// Module for functions and types in the Vulkan library

#if os == OS.Linux {
    #system_library vulkan "vulkan"
    #import X11

    VK_KHR_XLIB_SURFACE_EXTENSION_NAME := "VK_KHR_xlib_surface";

    struct VkXlibSurfaceCreateInfoKHR {
        sType := VkStructureType.VK_STRUCTURE_TYPE_XLIB_SURFACE_CREATE_INFO_KHR;
        pNext: void*;
        flags: u32;
        dpy: Display*;
        window: u64;
    }

    interface VkResult PFN_vkCreateXlibSurfaceKHR(VkInstance* instance, VkXlibSurfaceCreateInfoKHR* pCreateInfo, VkAllocationCallbacks* pAllocator, VkSurfaceKHR** pSurface)

    interface u32 PFN_vkGetPhysicalDeviceXlibPresentationSupportKHR(VkPhysicalDevice* physicalDevice, u32 queueFamilyIndex, Display* dpy, u64 visualID)

    VkResult vkCreateXlibSurfaceKHR(VkInstance* instance, VkXlibSurfaceCreateInfoKHR* pCreateInfo, VkAllocationCallbacks* pAllocator, VkSurfaceKHR** pSurface) #extern vulkan

    u32 vkGetPhysicalDeviceXlibPresentationSupportKHR(VkPhysicalDevice* physicalDevice, u32 queueFamilyIndex, Display* dpy, u64 visualID) #extern vulkan
}
#if os == OS.Windows {
    #system_library vulkan "vulkan-1" "C:/VulkanSDK/1.2.198.1/Lib"

    VK_KHR_WIN32_SURFACE_EXTENSION_NAME := "VK_KHR_win32_surface";

    struct VkWin32SurfaceCreateInfoKHR {
        sType := VkStructureType.VK_STRUCTURE_TYPE_WIN32_SURFACE_CREATE_INFO_KHR;
        pNext: void*;
        flags: u32;
        hinstance: Handle*;
        hwnd: Handle*;
    }

    interface VkResult PFN_vkCreateWin32SurfaceKHR(VkInstance* instance, VkWin32SurfaceCreateInfoKHR* pCreateInfo, VkAllocationCallbacks* pAllocator, VkSurfaceKHR** pSurface)

    interface u32 PFN_vkGetPhysicalDeviceWin32PresentationSupportKHR(VkPhysicalDevice* physicalDevice, u32 queueFamilyIndex)

    VkResult vkCreateWin32SurfaceKHR(VkInstance* instance, VkWin32SurfaceCreateInfoKHR* pCreateInfo, VkAllocationCallbacks* pAllocator, VkSurfaceKHR** pSurface) #extern vulkan

    u32 vkGetPhysicalDeviceWin32PresentationSupportKHR(VkPhysicalDevice* physicalDevice, u32 queueFamilyIndex) #extern vulkan
}

VK_TRUE := 1; #const
VK_FALSE := 0; #const

struct VkBuffer {}
struct VkImage {}
struct VkInstance {}
struct VkPhysicalDevice {}
struct VkDevice {}
struct VkQueue {}
struct VkSemaphore {}
struct VkCommandBuffer {}
struct VkFence {}
struct VkDeviceMemory {}
struct VkEvent {}
struct VkQueryPool {}
struct VkBufferView {}
struct VkImageView {}
struct VkShaderModule {}
struct VkPipelineCache {}
struct VkPipelineLayout {}
struct VkPipeline {}
struct VkRenderPass {}
struct VkDescriptorSetLayout {}
struct VkSampler {}
struct VkDescriptorSet {}
struct VkDescriptorPool {}
struct VkFramebuffer {}
struct VkCommandPool {}

VK_UUID_SIZE: u32 = 16; #const
VK_ATTACHMENT_UNUSED: u32 = 0xFFFFFFFF; #const
VK_LOD_CLAMP_NONE := 1000.0; #const
VK_QUEUE_FAMILY_IGNORED: u32 = 0xFFFFFFFF; #const
VK_REMAINING_ARRAY_LAYERS: u32 = 0xFFFFFFFF; #const
VK_REMAINING_MIP_LEVELS: u32 = 0xFFFFFFFF; #const
VK_SUBPASS_EXTERNAL: u32 = 0xFFFFFFFF; #const
VK_WHOLE_SIZE: u64 = 0xFFFFFFFFFFFFFFFF; #const
VK_MAX_MEMORY_TYPES: u32 = 32; #const
VK_MAX_MEMORY_HEAPS: u32 = 16; #const
VK_MAX_PHYSICAL_DEVICE_NAME_SIZE: u32 = 256; #const
VK_MAX_EXTENSION_NAME_SIZE: u32 = 256; #const
VK_MAX_DESCRIPTION_SIZE: u32 = 256; #const

enum VkResult {
    VK_SUCCESS = 0;
    VK_NOT_READY = 1;
    VK_TIMEOUT = 2;
    VK_EVENT_SET = 3;
    VK_EVENT_RESET = 4;
    VK_INCOMPLETE = 5;
    VK_ERROR_OUT_OF_HOST_MEMORY = -1;
    VK_ERROR_OUT_OF_DEVICE_MEMORY = -2;
    VK_ERROR_INITIALIZATION_FAILED = -3;
    VK_ERROR_DEVICE_LOST = -4;
    VK_ERROR_MEMORY_MAP_FAILED = -5;
    VK_ERROR_LAYER_NOT_PRESENT = -6;
    VK_ERROR_EXTENSION_NOT_PRESENT = -7;
    VK_ERROR_FEATURE_NOT_PRESENT = -8;
    VK_ERROR_INCOMPATIBLE_DRIVER = -9;
    VK_ERROR_TOO_MANY_OBJECTS = -10;
    VK_ERROR_FORMAT_NOT_SUPPORTED = -11;
    VK_ERROR_FRAGMENTED_POOL = -12;
    VK_ERROR_UNKNOWN = -13;
    VK_ERROR_OUT_OF_POOL_MEMORY = -1000069000;
    VK_ERROR_INVALID_EXTERNAL_HANDLE = -1000072003;
    VK_ERROR_FRAGMENTATION = -1000161000;
    VK_ERROR_INVALID_OPAQUE_CAPTURE_ADDRESS = -1000257000;
    VK_ERROR_SURFACE_LOST_KHR = -1000000000;
    VK_ERROR_NATIVE_WINDOW_IN_USE_KHR = -1000000001;
    VK_SUBOPTIMAL_KHR = 1000001003;
    VK_ERROR_OUT_OF_DATE_KHR = -1000001004;
    VK_ERROR_INCOMPATIBLE_DISPLAY_KHR = -1000003001;
    VK_ERROR_VALIDATION_FAILED_EXT = -1000011001;
    VK_ERROR_INVALID_SHADER_NV = -1000012000;
    VK_ERROR_INVALID_DRM_FORMAT_MODIFIER_PLANE_LAYOUT_EXT = -1000158000;
    VK_ERROR_NOT_PERMITTED_EXT = -1000174001;
    VK_ERROR_FULL_SCREEN_EXCLUSIVE_MODE_LOST_EXT = -1000255000;
    VK_THREAD_IDLE_KHR = 1000268000;
    VK_THREAD_DONE_KHR = 1000268001;
    VK_OPERATION_DEFERRED_KHR = 1000268002;
    VK_OPERATION_NOT_DEFERRED_KHR = 1000268003;
    VK_PIPELINE_COMPILE_REQUIRED_EXT = 1000297000;
    VK_ERROR_OUT_OF_POOL_MEMORY_KHR = VK_ERROR_OUT_OF_POOL_MEMORY;
    VK_ERROR_INVALID_EXTERNAL_HANDLE_KHR = VK_ERROR_INVALID_EXTERNAL_HANDLE;
    VK_ERROR_FRAGMENTATION_EXT = VK_ERROR_FRAGMENTATION;
    VK_ERROR_INVALID_DEVICE_ADDRESS_EXT = VK_ERROR_INVALID_OPAQUE_CAPTURE_ADDRESS;
    VK_ERROR_INVALID_OPAQUE_CAPTURE_ADDRESS_KHR = VK_ERROR_INVALID_OPAQUE_CAPTURE_ADDRESS;
    VK_ERROR_PIPELINE_COMPILE_REQUIRED_EXT = VK_PIPELINE_COMPILE_REQUIRED_EXT;
    VK_RESULT_MAX_ENUM = 0x7FFFFFFF;
}

enum VkStructureType {
    VK_STRUCTURE_TYPE_APPLICATION_INFO = 0;
    VK_STRUCTURE_TYPE_INSTANCE_CREATE_INFO = 1;
    VK_STRUCTURE_TYPE_DEVICE_QUEUE_CREATE_INFO = 2;
    VK_STRUCTURE_TYPE_DEVICE_CREATE_INFO = 3;
    VK_STRUCTURE_TYPE_SUBMIT_INFO = 4;
    VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_INFO = 5;
    VK_STRUCTURE_TYPE_MAPPED_MEMORY_RANGE = 6;
    VK_STRUCTURE_TYPE_BIND_SPARSE_INFO = 7;
    VK_STRUCTURE_TYPE_FENCE_CREATE_INFO = 8;
    VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO = 9;
    VK_STRUCTURE_TYPE_EVENT_CREATE_INFO = 10;
    VK_STRUCTURE_TYPE_QUERY_POOL_CREATE_INFO = 11;
    VK_STRUCTURE_TYPE_BUFFER_CREATE_INFO = 12;
    VK_STRUCTURE_TYPE_BUFFER_VIEW_CREATE_INFO = 13;
    VK_STRUCTURE_TYPE_IMAGE_CREATE_INFO = 14;
    VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO = 15;
    VK_STRUCTURE_TYPE_SHADER_MODULE_CREATE_INFO = 16;
    VK_STRUCTURE_TYPE_PIPELINE_CACHE_CREATE_INFO = 17;
    VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_CREATE_INFO = 18;
    VK_STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_STATE_CREATE_INFO = 19;
    VK_STRUCTURE_TYPE_PIPELINE_INPUT_ASSEMBLY_STATE_CREATE_INFO = 20;
    VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_STATE_CREATE_INFO = 21;
    VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_STATE_CREATE_INFO = 22;
    VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_CREATE_INFO = 23;
    VK_STRUCTURE_TYPE_PIPELINE_MULTISAMPLE_STATE_CREATE_INFO = 24;
    VK_STRUCTURE_TYPE_PIPELINE_DEPTH_STENCIL_STATE_CREATE_INFO = 25;
    VK_STRUCTURE_TYPE_PIPELINE_COLOR_BLEND_STATE_CREATE_INFO = 26;
    VK_STRUCTURE_TYPE_PIPELINE_DYNAMIC_STATE_CREATE_INFO = 27;
    VK_STRUCTURE_TYPE_GRAPHICS_PIPELINE_CREATE_INFO = 28;
    VK_STRUCTURE_TYPE_COMPUTE_PIPELINE_CREATE_INFO = 29;
    VK_STRUCTURE_TYPE_PIPELINE_LAYOUT_CREATE_INFO = 30;
    VK_STRUCTURE_TYPE_SAMPLER_CREATE_INFO = 31;
    VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_CREATE_INFO = 32;
    VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_CREATE_INFO = 33;
    VK_STRUCTURE_TYPE_DESCRIPTOR_SET_ALLOCATE_INFO = 34;
    VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET = 35;
    VK_STRUCTURE_TYPE_COPY_DESCRIPTOR_SET = 36;
    VK_STRUCTURE_TYPE_FRAMEBUFFER_CREATE_INFO = 37;
    VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO = 38;
    VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO = 39;
    VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO = 40;
    VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_INFO = 41;
    VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO = 42;
    VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO = 43;
    VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER = 44;
    VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER = 45;
    VK_STRUCTURE_TYPE_MEMORY_BARRIER = 46;
    VK_STRUCTURE_TYPE_LOADER_INSTANCE_CREATE_INFO = 47;
    VK_STRUCTURE_TYPE_LOADER_DEVICE_CREATE_INFO = 48;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_PROPERTIES = 1000094000;
    VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_INFO = 1000157000;
    VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_INFO = 1000157001;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_16BIT_STORAGE_FEATURES = 1000083000;
    VK_STRUCTURE_TYPE_MEMORY_DEDICATED_REQUIREMENTS = 1000127000;
    VK_STRUCTURE_TYPE_MEMORY_DEDICATED_ALLOCATE_INFO = 1000127001;
    VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_FLAGS_INFO = 1000060000;
    VK_STRUCTURE_TYPE_DEVICE_GROUP_RENDER_PASS_BEGIN_INFO = 1000060003;
    VK_STRUCTURE_TYPE_DEVICE_GROUP_COMMAND_BUFFER_BEGIN_INFO = 1000060004;
    VK_STRUCTURE_TYPE_DEVICE_GROUP_SUBMIT_INFO = 1000060005;
    VK_STRUCTURE_TYPE_DEVICE_GROUP_BIND_SPARSE_INFO = 1000060006;
    VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_DEVICE_GROUP_INFO = 1000060013;
    VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_DEVICE_GROUP_INFO = 1000060014;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GROUP_PROPERTIES = 1000070000;
    VK_STRUCTURE_TYPE_DEVICE_GROUP_DEVICE_CREATE_INFO = 1000070001;
    VK_STRUCTURE_TYPE_BUFFER_MEMORY_REQUIREMENTS_INFO_2 = 1000146000;
    VK_STRUCTURE_TYPE_IMAGE_MEMORY_REQUIREMENTS_INFO_2 = 1000146001;
    VK_STRUCTURE_TYPE_IMAGE_SPARSE_MEMORY_REQUIREMENTS_INFO_2 = 1000146002;
    VK_STRUCTURE_TYPE_MEMORY_REQUIREMENTS_2 = 1000146003;
    VK_STRUCTURE_TYPE_SPARSE_IMAGE_MEMORY_REQUIREMENTS_2 = 1000146004;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FEATURES_2 = 1000059000;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROPERTIES_2 = 1000059001;
    VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_2 = 1000059002;
    VK_STRUCTURE_TYPE_IMAGE_FORMAT_PROPERTIES_2 = 1000059003;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_FORMAT_INFO_2 = 1000059004;
    VK_STRUCTURE_TYPE_QUEUE_FAMILY_PROPERTIES_2 = 1000059005;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_PROPERTIES_2 = 1000059006;
    VK_STRUCTURE_TYPE_SPARSE_IMAGE_FORMAT_PROPERTIES_2 = 1000059007;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SPARSE_IMAGE_FORMAT_INFO_2 = 1000059008;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_POINT_CLIPPING_PROPERTIES = 1000117000;
    VK_STRUCTURE_TYPE_RENDER_PASS_INPUT_ATTACHMENT_ASPECT_CREATE_INFO = 1000117001;
    VK_STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO = 1000117002;
    VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_DOMAIN_ORIGIN_STATE_CREATE_INFO = 1000117003;
    VK_STRUCTURE_TYPE_RENDER_PASS_MULTIVIEW_CREATE_INFO = 1000053000;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_FEATURES = 1000053001;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PROPERTIES = 1000053002;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTERS_FEATURES = 1000120000;
    VK_STRUCTURE_TYPE_PROTECTED_SUBMIT_INFO = 1000145000;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROTECTED_MEMORY_FEATURES = 1000145001;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROTECTED_MEMORY_PROPERTIES = 1000145002;
    VK_STRUCTURE_TYPE_DEVICE_QUEUE_INFO_2 = 1000145003;
    VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_CREATE_INFO = 1000156000;
    VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_INFO = 1000156001;
    VK_STRUCTURE_TYPE_BIND_IMAGE_PLANE_MEMORY_INFO = 1000156002;
    VK_STRUCTURE_TYPE_IMAGE_PLANE_MEMORY_REQUIREMENTS_INFO = 1000156003;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_YCBCR_CONVERSION_FEATURES = 1000156004;
    VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_IMAGE_FORMAT_PROPERTIES = 1000156005;
    VK_STRUCTURE_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_CREATE_INFO = 1000085000;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_IMAGE_FORMAT_INFO = 1000071000;
    VK_STRUCTURE_TYPE_EXTERNAL_IMAGE_FORMAT_PROPERTIES = 1000071001;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_BUFFER_INFO = 1000071002;
    VK_STRUCTURE_TYPE_EXTERNAL_BUFFER_PROPERTIES = 1000071003;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ID_PROPERTIES = 1000071004;
    VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_BUFFER_CREATE_INFO = 1000072000;
    VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO = 1000072001;
    VK_STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO = 1000072002;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_FENCE_INFO = 1000112000;
    VK_STRUCTURE_TYPE_EXTERNAL_FENCE_PROPERTIES = 1000112001;
    VK_STRUCTURE_TYPE_EXPORT_FENCE_CREATE_INFO = 1000113000;
    VK_STRUCTURE_TYPE_EXPORT_SEMAPHORE_CREATE_INFO = 1000077000;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_SEMAPHORE_INFO = 1000076000;
    VK_STRUCTURE_TYPE_EXTERNAL_SEMAPHORE_PROPERTIES = 1000076001;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_3_PROPERTIES = 1000168000;
    VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_SUPPORT = 1000168001;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DRAW_PARAMETERS_FEATURES = 1000063000;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_1_FEATURES = 49;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_1_PROPERTIES = 50;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_2_FEATURES = 51;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_2_PROPERTIES = 52;
    VK_STRUCTURE_TYPE_IMAGE_FORMAT_LIST_CREATE_INFO = 1000147000;
    VK_STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_2 = 1000109000;
    VK_STRUCTURE_TYPE_ATTACHMENT_REFERENCE_2 = 1000109001;
    VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_2 = 1000109002;
    VK_STRUCTURE_TYPE_SUBPASS_DEPENDENCY_2 = 1000109003;
    VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO_2 = 1000109004;
    VK_STRUCTURE_TYPE_SUBPASS_BEGIN_INFO = 1000109005;
    VK_STRUCTURE_TYPE_SUBPASS_END_INFO = 1000109006;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_8BIT_STORAGE_FEATURES = 1000177000;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DRIVER_PROPERTIES = 1000196000;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_INT64_FEATURES = 1000180000;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_FLOAT16_INT8_FEATURES = 1000082000;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FLOAT_CONTROLS_PROPERTIES = 1000197000;
    VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_BINDING_FLAGS_CREATE_INFO = 1000161000;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_FEATURES = 1000161001;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_PROPERTIES = 1000161002;
    VK_STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_ALLOCATE_INFO = 1000161003;
    VK_STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_LAYOUT_SUPPORT = 1000161004;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_STENCIL_RESOLVE_PROPERTIES = 1000199000;
    VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_DEPTH_STENCIL_RESOLVE = 1000199001;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SCALAR_BLOCK_LAYOUT_FEATURES = 1000221000;
    VK_STRUCTURE_TYPE_IMAGE_STENCIL_USAGE_CREATE_INFO = 1000246000;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_FILTER_MINMAX_PROPERTIES = 1000130000;
    VK_STRUCTURE_TYPE_SAMPLER_REDUCTION_MODE_CREATE_INFO = 1000130001;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_MEMORY_MODEL_FEATURES = 1000211000;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGELESS_FRAMEBUFFER_FEATURES = 1000108000;
    VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENTS_CREATE_INFO = 1000108001;
    VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENT_IMAGE_INFO = 1000108002;
    VK_STRUCTURE_TYPE_RENDER_PASS_ATTACHMENT_BEGIN_INFO = 1000108003;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_UNIFORM_BUFFER_STANDARD_LAYOUT_FEATURES = 1000253000;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SUBGROUP_EXTENDED_TYPES_FEATURES = 1000175000;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SEPARATE_DEPTH_STENCIL_LAYOUTS_FEATURES = 1000241000;
    VK_STRUCTURE_TYPE_ATTACHMENT_REFERENCE_STENCIL_LAYOUT = 1000241001;
    VK_STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_STENCIL_LAYOUT = 1000241002;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_HOST_QUERY_RESET_FEATURES = 1000261000;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_FEATURES = 1000207000;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_PROPERTIES = 1000207001;
    VK_STRUCTURE_TYPE_SEMAPHORE_TYPE_CREATE_INFO = 1000207002;
    VK_STRUCTURE_TYPE_TIMELINE_SEMAPHORE_SUBMIT_INFO = 1000207003;
    VK_STRUCTURE_TYPE_SEMAPHORE_WAIT_INFO = 1000207004;
    VK_STRUCTURE_TYPE_SEMAPHORE_SIGNAL_INFO = 1000207005;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_DEVICE_ADDRESS_FEATURES = 1000257000;
    VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_INFO = 1000244001;
    VK_STRUCTURE_TYPE_BUFFER_OPAQUE_CAPTURE_ADDRESS_CREATE_INFO = 1000257002;
    VK_STRUCTURE_TYPE_MEMORY_OPAQUE_CAPTURE_ADDRESS_ALLOCATE_INFO = 1000257003;
    VK_STRUCTURE_TYPE_DEVICE_MEMORY_OPAQUE_CAPTURE_ADDRESS_INFO = 1000257004;
    VK_STRUCTURE_TYPE_SWAPCHAIN_CREATE_INFO_KHR = 1000001000;
    VK_STRUCTURE_TYPE_PRESENT_INFO_KHR = 1000001001;
    VK_STRUCTURE_TYPE_DEVICE_GROUP_PRESENT_CAPABILITIES_KHR = 1000060007;
    VK_STRUCTURE_TYPE_IMAGE_SWAPCHAIN_CREATE_INFO_KHR = 1000060008;
    VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_SWAPCHAIN_INFO_KHR = 1000060009;
    VK_STRUCTURE_TYPE_ACQUIRE_NEXT_IMAGE_INFO_KHR = 1000060010;
    VK_STRUCTURE_TYPE_DEVICE_GROUP_PRESENT_INFO_KHR = 1000060011;
    VK_STRUCTURE_TYPE_DEVICE_GROUP_SWAPCHAIN_CREATE_INFO_KHR = 1000060012;
    VK_STRUCTURE_TYPE_DISPLAY_MODE_CREATE_INFO_KHR = 1000002000;
    VK_STRUCTURE_TYPE_DISPLAY_SURFACE_CREATE_INFO_KHR = 1000002001;
    VK_STRUCTURE_TYPE_DISPLAY_PRESENT_INFO_KHR = 1000003000;
    VK_STRUCTURE_TYPE_XLIB_SURFACE_CREATE_INFO_KHR = 1000004000;
    VK_STRUCTURE_TYPE_XCB_SURFACE_CREATE_INFO_KHR = 1000005000;
    VK_STRUCTURE_TYPE_WAYLAND_SURFACE_CREATE_INFO_KHR = 1000006000;
    VK_STRUCTURE_TYPE_ANDROID_SURFACE_CREATE_INFO_KHR = 1000008000;
    VK_STRUCTURE_TYPE_WIN32_SURFACE_CREATE_INFO_KHR = 1000009000;
    VK_STRUCTURE_TYPE_DEBUG_REPORT_CALLBACK_CREATE_INFO_EXT = 1000011000;
    VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_RASTERIZATION_ORDER_AMD = 1000018000;
    VK_STRUCTURE_TYPE_DEBUG_MARKER_OBJECT_NAME_INFO_EXT = 1000022000;
    VK_STRUCTURE_TYPE_DEBUG_MARKER_OBJECT_TAG_INFO_EXT = 1000022001;
    VK_STRUCTURE_TYPE_DEBUG_MARKER_MARKER_INFO_EXT = 1000022002;
    VK_STRUCTURE_TYPE_DEDICATED_ALLOCATION_IMAGE_CREATE_INFO_NV = 1000026000;
    VK_STRUCTURE_TYPE_DEDICATED_ALLOCATION_BUFFER_CREATE_INFO_NV = 1000026001;
    VK_STRUCTURE_TYPE_DEDICATED_ALLOCATION_MEMORY_ALLOCATE_INFO_NV = 1000026002;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TRANSFORM_FEEDBACK_FEATURES_EXT = 1000028000;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TRANSFORM_FEEDBACK_PROPERTIES_EXT = 1000028001;
    VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_STREAM_CREATE_INFO_EXT = 1000028002;
    VK_STRUCTURE_TYPE_CU_MODULE_CREATE_INFO_NVX = 1000029000;
    VK_STRUCTURE_TYPE_CU_FUNCTION_CREATE_INFO_NVX = 1000029001;
    VK_STRUCTURE_TYPE_CU_LAUNCH_INFO_NVX = 1000029002;
    VK_STRUCTURE_TYPE_IMAGE_VIEW_HANDLE_INFO_NVX = 1000030000;
    VK_STRUCTURE_TYPE_IMAGE_VIEW_ADDRESS_PROPERTIES_NVX = 1000030001;
    VK_STRUCTURE_TYPE_TEXTURE_LOD_GATHER_FORMAT_PROPERTIES_AMD = 1000041000;
    VK_STRUCTURE_TYPE_STREAM_DESCRIPTOR_SURFACE_CREATE_INFO_GGP = 1000049000;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CORNER_SAMPLED_IMAGE_FEATURES_NV = 1000050000;
    VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO_NV = 1000056000;
    VK_STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO_NV = 1000056001;
    VK_STRUCTURE_TYPE_IMPORT_MEMORY_WIN32_HANDLE_INFO_NV = 1000057000;
    VK_STRUCTURE_TYPE_EXPORT_MEMORY_WIN32_HANDLE_INFO_NV = 1000057001;
    VK_STRUCTURE_TYPE_WIN32_KEYED_MUTEX_ACQUIRE_RELEASE_INFO_NV = 1000058000;
    VK_STRUCTURE_TYPE_VALIDATION_FLAGS_EXT = 1000061000;
    VK_STRUCTURE_TYPE_VI_SURFACE_CREATE_INFO_NN = 1000062000;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXTURE_COMPRESSION_ASTC_HDR_FEATURES_EXT = 1000066000;
    VK_STRUCTURE_TYPE_IMAGE_VIEW_ASTC_DECODE_MODE_EXT = 1000067000;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ASTC_DECODE_FEATURES_EXT = 1000067001;
    VK_STRUCTURE_TYPE_IMPORT_MEMORY_WIN32_HANDLE_INFO_KHR = 1000073000;
    VK_STRUCTURE_TYPE_EXPORT_MEMORY_WIN32_HANDLE_INFO_KHR = 1000073001;
    VK_STRUCTURE_TYPE_MEMORY_WIN32_HANDLE_PROPERTIES_KHR = 1000073002;
    VK_STRUCTURE_TYPE_MEMORY_GET_WIN32_HANDLE_INFO_KHR = 1000073003;
    VK_STRUCTURE_TYPE_IMPORT_MEMORY_FD_INFO_KHR = 1000074000;
    VK_STRUCTURE_TYPE_MEMORY_FD_PROPERTIES_KHR = 1000074001;
    VK_STRUCTURE_TYPE_MEMORY_GET_FD_INFO_KHR = 1000074002;
    VK_STRUCTURE_TYPE_WIN32_KEYED_MUTEX_ACQUIRE_RELEASE_INFO_KHR = 1000075000;
    VK_STRUCTURE_TYPE_IMPORT_SEMAPHORE_WIN32_HANDLE_INFO_KHR = 1000078000;
    VK_STRUCTURE_TYPE_EXPORT_SEMAPHORE_WIN32_HANDLE_INFO_KHR = 1000078001;
    VK_STRUCTURE_TYPE_D3D12_FENCE_SUBMIT_INFO_KHR = 1000078002;
    VK_STRUCTURE_TYPE_SEMAPHORE_GET_WIN32_HANDLE_INFO_KHR = 1000078003;
    VK_STRUCTURE_TYPE_IMPORT_SEMAPHORE_FD_INFO_KHR = 1000079000;
    VK_STRUCTURE_TYPE_SEMAPHORE_GET_FD_INFO_KHR = 1000079001;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PUSH_DESCRIPTOR_PROPERTIES_KHR = 1000080000;
    VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_CONDITIONAL_RENDERING_INFO_EXT = 1000081000;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CONDITIONAL_RENDERING_FEATURES_EXT = 1000081001;
    VK_STRUCTURE_TYPE_CONDITIONAL_RENDERING_BEGIN_INFO_EXT = 1000081002;
    VK_STRUCTURE_TYPE_PRESENT_REGIONS_KHR = 1000084000;
    VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_W_SCALING_STATE_CREATE_INFO_NV = 1000087000;
    VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_2_EXT = 1000090000;
    VK_STRUCTURE_TYPE_DISPLAY_POWER_INFO_EXT = 1000091000;
    VK_STRUCTURE_TYPE_DEVICE_EVENT_INFO_EXT = 1000091001;
    VK_STRUCTURE_TYPE_DISPLAY_EVENT_INFO_EXT = 1000091002;
    VK_STRUCTURE_TYPE_SWAPCHAIN_COUNTER_CREATE_INFO_EXT = 1000091003;
    VK_STRUCTURE_TYPE_PRESENT_TIMES_INFO_GOOGLE = 1000092000;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PER_VIEW_ATTRIBUTES_PROPERTIES_NVX = 1000097000;
    VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_SWIZZLE_STATE_CREATE_INFO_NV = 1000098000;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DISCARD_RECTANGLE_PROPERTIES_EXT = 1000099000;
    VK_STRUCTURE_TYPE_PIPELINE_DISCARD_RECTANGLE_STATE_CREATE_INFO_EXT = 1000099001;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CONSERVATIVE_RASTERIZATION_PROPERTIES_EXT = 1000101000;
    VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_CONSERVATIVE_STATE_CREATE_INFO_EXT = 1000101001;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_CLIP_ENABLE_FEATURES_EXT = 1000102000;
    VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_DEPTH_CLIP_STATE_CREATE_INFO_EXT = 1000102001;
    VK_STRUCTURE_TYPE_HDR_METADATA_EXT = 1000105000;
    VK_STRUCTURE_TYPE_SHARED_PRESENT_SURFACE_CAPABILITIES_KHR = 1000111000;
    VK_STRUCTURE_TYPE_IMPORT_FENCE_WIN32_HANDLE_INFO_KHR = 1000114000;
    VK_STRUCTURE_TYPE_EXPORT_FENCE_WIN32_HANDLE_INFO_KHR = 1000114001;
    VK_STRUCTURE_TYPE_FENCE_GET_WIN32_HANDLE_INFO_KHR = 1000114002;
    VK_STRUCTURE_TYPE_IMPORT_FENCE_FD_INFO_KHR = 1000115000;
    VK_STRUCTURE_TYPE_FENCE_GET_FD_INFO_KHR = 1000115001;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PERFORMANCE_QUERY_FEATURES_KHR = 1000116000;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PERFORMANCE_QUERY_PROPERTIES_KHR = 1000116001;
    VK_STRUCTURE_TYPE_QUERY_POOL_PERFORMANCE_CREATE_INFO_KHR = 1000116002;
    VK_STRUCTURE_TYPE_PERFORMANCE_QUERY_SUBMIT_INFO_KHR = 1000116003;
    VK_STRUCTURE_TYPE_ACQUIRE_PROFILING_LOCK_INFO_KHR = 1000116004;
    VK_STRUCTURE_TYPE_PERFORMANCE_COUNTER_KHR = 1000116005;
    VK_STRUCTURE_TYPE_PERFORMANCE_COUNTER_DESCRIPTION_KHR = 1000116006;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SURFACE_INFO_2_KHR = 1000119000;
    VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_2_KHR = 1000119001;
    VK_STRUCTURE_TYPE_SURFACE_FORMAT_2_KHR = 1000119002;
    VK_STRUCTURE_TYPE_DISPLAY_PROPERTIES_2_KHR = 1000121000;
    VK_STRUCTURE_TYPE_DISPLAY_PLANE_PROPERTIES_2_KHR = 1000121001;
    VK_STRUCTURE_TYPE_DISPLAY_MODE_PROPERTIES_2_KHR = 1000121002;
    VK_STRUCTURE_TYPE_DISPLAY_PLANE_INFO_2_KHR = 1000121003;
    VK_STRUCTURE_TYPE_DISPLAY_PLANE_CAPABILITIES_2_KHR = 1000121004;
    VK_STRUCTURE_TYPE_IOS_SURFACE_CREATE_INFO_MVK = 1000122000;
    VK_STRUCTURE_TYPE_MACOS_SURFACE_CREATE_INFO_MVK = 1000123000;
    VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT = 1000128000;
    VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_TAG_INFO_EXT = 1000128001;
    VK_STRUCTURE_TYPE_DEBUG_UTILS_LABEL_EXT = 1000128002;
    VK_STRUCTURE_TYPE_DEBUG_UTILS_MESSENGER_CALLBACK_DATA_EXT = 1000128003;
    VK_STRUCTURE_TYPE_DEBUG_UTILS_MESSENGER_CREATE_INFO_EXT = 1000128004;
    VK_STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_USAGE_ANDROID = 1000129000;
    VK_STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_PROPERTIES_ANDROID = 1000129001;
    VK_STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_FORMAT_PROPERTIES_ANDROID = 1000129002;
    VK_STRUCTURE_TYPE_IMPORT_ANDROID_HARDWARE_BUFFER_INFO_ANDROID = 1000129003;
    VK_STRUCTURE_TYPE_MEMORY_GET_ANDROID_HARDWARE_BUFFER_INFO_ANDROID = 1000129004;
    VK_STRUCTURE_TYPE_EXTERNAL_FORMAT_ANDROID = 1000129005;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_FEATURES_EXT = 1000138000;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_PROPERTIES_EXT = 1000138001;
    VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_INLINE_UNIFORM_BLOCK_EXT = 1000138002;
    VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_INLINE_UNIFORM_BLOCK_CREATE_INFO_EXT = 1000138003;
    VK_STRUCTURE_TYPE_SAMPLE_LOCATIONS_INFO_EXT = 1000143000;
    VK_STRUCTURE_TYPE_RENDER_PASS_SAMPLE_LOCATIONS_BEGIN_INFO_EXT = 1000143001;
    VK_STRUCTURE_TYPE_PIPELINE_SAMPLE_LOCATIONS_STATE_CREATE_INFO_EXT = 1000143002;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLE_LOCATIONS_PROPERTIES_EXT = 1000143003;
    VK_STRUCTURE_TYPE_MULTISAMPLE_PROPERTIES_EXT = 1000143004;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BLEND_OPERATION_ADVANCED_FEATURES_EXT = 1000148000;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BLEND_OPERATION_ADVANCED_PROPERTIES_EXT = 1000148001;
    VK_STRUCTURE_TYPE_PIPELINE_COLOR_BLEND_ADVANCED_STATE_CREATE_INFO_EXT = 1000148002;
    VK_STRUCTURE_TYPE_PIPELINE_COVERAGE_TO_COLOR_STATE_CREATE_INFO_NV = 1000149000;
    VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_ACCELERATION_STRUCTURE_KHR = 1000150007;
    VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_BUILD_GEOMETRY_INFO_KHR = 1000150000;
    VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_DEVICE_ADDRESS_INFO_KHR = 1000150002;
    VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_AABBS_DATA_KHR = 1000150003;
    VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_INSTANCES_DATA_KHR = 1000150004;
    VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_TRIANGLES_DATA_KHR = 1000150005;
    VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_KHR = 1000150006;
    VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_VERSION_INFO_KHR = 1000150009;
    VK_STRUCTURE_TYPE_COPY_ACCELERATION_STRUCTURE_INFO_KHR = 1000150010;
    VK_STRUCTURE_TYPE_COPY_ACCELERATION_STRUCTURE_TO_MEMORY_INFO_KHR = 1000150011;
    VK_STRUCTURE_TYPE_COPY_MEMORY_TO_ACCELERATION_STRUCTURE_INFO_KHR = 1000150012;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ACCELERATION_STRUCTURE_FEATURES_KHR = 1000150013;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ACCELERATION_STRUCTURE_PROPERTIES_KHR = 1000150014;
    VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_CREATE_INFO_KHR = 1000150017;
    VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_BUILD_SIZES_INFO_KHR = 1000150020;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_PIPELINE_FEATURES_KHR = 1000347000;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_PIPELINE_PROPERTIES_KHR = 1000347001;
    VK_STRUCTURE_TYPE_RAY_TRACING_PIPELINE_CREATE_INFO_KHR = 1000150015;
    VK_STRUCTURE_TYPE_RAY_TRACING_SHADER_GROUP_CREATE_INFO_KHR = 1000150016;
    VK_STRUCTURE_TYPE_RAY_TRACING_PIPELINE_INTERFACE_CREATE_INFO_KHR = 1000150018;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_QUERY_FEATURES_KHR = 1000348013;
    VK_STRUCTURE_TYPE_PIPELINE_COVERAGE_MODULATION_STATE_CREATE_INFO_NV = 1000152000;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SM_BUILTINS_FEATURES_NV = 1000154000;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SM_BUILTINS_PROPERTIES_NV = 1000154001;
    VK_STRUCTURE_TYPE_DRM_FORMAT_MODIFIER_PROPERTIES_LIST_EXT = 1000158000;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_DRM_FORMAT_MODIFIER_INFO_EXT = 1000158002;
    VK_STRUCTURE_TYPE_IMAGE_DRM_FORMAT_MODIFIER_LIST_CREATE_INFO_EXT = 1000158003;
    VK_STRUCTURE_TYPE_IMAGE_DRM_FORMAT_MODIFIER_EXPLICIT_CREATE_INFO_EXT = 1000158004;
    VK_STRUCTURE_TYPE_IMAGE_DRM_FORMAT_MODIFIER_PROPERTIES_EXT = 1000158005;
    VK_STRUCTURE_TYPE_VALIDATION_CACHE_CREATE_INFO_EXT = 1000160000;
    VK_STRUCTURE_TYPE_SHADER_MODULE_VALIDATION_CACHE_CREATE_INFO_EXT = 1000160001;
    VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_SHADING_RATE_IMAGE_STATE_CREATE_INFO_NV = 1000164000;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADING_RATE_IMAGE_FEATURES_NV = 1000164001;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADING_RATE_IMAGE_PROPERTIES_NV = 1000164002;
    VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_COARSE_SAMPLE_ORDER_STATE_CREATE_INFO_NV = 1000164005;
    VK_STRUCTURE_TYPE_RAY_TRACING_PIPELINE_CREATE_INFO_NV = 1000165000;
    VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_CREATE_INFO_NV = 1000165001;
    VK_STRUCTURE_TYPE_GEOMETRY_NV = 1000165003;
    VK_STRUCTURE_TYPE_GEOMETRY_TRIANGLES_NV = 1000165004;
    VK_STRUCTURE_TYPE_GEOMETRY_AABB_NV = 1000165005;
    VK_STRUCTURE_TYPE_BIND_ACCELERATION_STRUCTURE_MEMORY_INFO_NV = 1000165006;
    VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_ACCELERATION_STRUCTURE_NV = 1000165007;
    VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_INFO_NV = 1000165008;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_PROPERTIES_NV = 1000165009;
    VK_STRUCTURE_TYPE_RAY_TRACING_SHADER_GROUP_CREATE_INFO_NV = 1000165011;
    VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_INFO_NV = 1000165012;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_REPRESENTATIVE_FRAGMENT_TEST_FEATURES_NV = 1000166000;
    VK_STRUCTURE_TYPE_PIPELINE_REPRESENTATIVE_FRAGMENT_TEST_STATE_CREATE_INFO_NV = 1000166001;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_VIEW_IMAGE_FORMAT_INFO_EXT = 1000170000;
    VK_STRUCTURE_TYPE_FILTER_CUBIC_IMAGE_VIEW_IMAGE_FORMAT_PROPERTIES_EXT = 1000170001;
    VK_STRUCTURE_TYPE_DEVICE_QUEUE_GLOBAL_PRIORITY_CREATE_INFO_EXT = 1000174000;
    VK_STRUCTURE_TYPE_IMPORT_MEMORY_HOST_POINTER_INFO_EXT = 1000178000;
    VK_STRUCTURE_TYPE_MEMORY_HOST_POINTER_PROPERTIES_EXT = 1000178001;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_MEMORY_HOST_PROPERTIES_EXT = 1000178002;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CLOCK_FEATURES_KHR = 1000181000;
    VK_STRUCTURE_TYPE_PIPELINE_COMPILER_CONTROL_CREATE_INFO_AMD = 1000183000;
    VK_STRUCTURE_TYPE_CALIBRATED_TIMESTAMP_INFO_EXT = 1000184000;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CORE_PROPERTIES_AMD = 1000185000;
    VK_STRUCTURE_TYPE_DEVICE_MEMORY_OVERALLOCATION_CREATE_INFO_AMD = 1000189000;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_ATTRIBUTE_DIVISOR_PROPERTIES_EXT = 1000190000;
    VK_STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_DIVISOR_STATE_CREATE_INFO_EXT = 1000190001;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_ATTRIBUTE_DIVISOR_FEATURES_EXT = 1000190002;
    VK_STRUCTURE_TYPE_PRESENT_FRAME_TOKEN_GGP = 1000191000;
    VK_STRUCTURE_TYPE_PIPELINE_CREATION_FEEDBACK_CREATE_INFO_EXT = 1000192000;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COMPUTE_SHADER_DERIVATIVES_FEATURES_NV = 1000201000;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MESH_SHADER_FEATURES_NV = 1000202000;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MESH_SHADER_PROPERTIES_NV = 1000202001;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADER_BARYCENTRIC_FEATURES_NV = 1000203000;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_IMAGE_FOOTPRINT_FEATURES_NV = 1000204000;
    VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_EXCLUSIVE_SCISSOR_STATE_CREATE_INFO_NV = 1000205000;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXCLUSIVE_SCISSOR_FEATURES_NV = 1000205002;
    VK_STRUCTURE_TYPE_CHECKPOINT_DATA_NV = 1000206000;
    VK_STRUCTURE_TYPE_QUEUE_FAMILY_CHECKPOINT_PROPERTIES_NV = 1000206001;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_INTEGER_FUNCTIONS_2_FEATURES_INTEL = 1000209000;
    VK_STRUCTURE_TYPE_QUERY_POOL_PERFORMANCE_QUERY_CREATE_INFO_INTEL = 1000210000;
    VK_STRUCTURE_TYPE_INITIALIZE_PERFORMANCE_API_INFO_INTEL = 1000210001;
    VK_STRUCTURE_TYPE_PERFORMANCE_MARKER_INFO_INTEL = 1000210002;
    VK_STRUCTURE_TYPE_PERFORMANCE_STREAM_MARKER_INFO_INTEL = 1000210003;
    VK_STRUCTURE_TYPE_PERFORMANCE_OVERRIDE_INFO_INTEL = 1000210004;
    VK_STRUCTURE_TYPE_PERFORMANCE_CONFIGURATION_ACQUIRE_INFO_INTEL = 1000210005;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PCI_BUS_INFO_PROPERTIES_EXT = 1000212000;
    VK_STRUCTURE_TYPE_DISPLAY_NATIVE_HDR_SURFACE_CAPABILITIES_AMD = 1000213000;
    VK_STRUCTURE_TYPE_SWAPCHAIN_DISPLAY_NATIVE_HDR_CREATE_INFO_AMD = 1000213001;
    VK_STRUCTURE_TYPE_IMAGEPIPE_SURFACE_CREATE_INFO_FUCHSIA = 1000214000;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_TERMINATE_INVOCATION_FEATURES_KHR = 1000215000;
    VK_STRUCTURE_TYPE_METAL_SURFACE_CREATE_INFO_EXT = 1000217000;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_FEATURES_EXT = 1000218000;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_PROPERTIES_EXT = 1000218001;
    VK_STRUCTURE_TYPE_RENDER_PASS_FRAGMENT_DENSITY_MAP_CREATE_INFO_EXT = 1000218002;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_SIZE_CONTROL_PROPERTIES_EXT = 1000225000;
    VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_REQUIRED_SUBGROUP_SIZE_CREATE_INFO_EXT = 1000225001;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_SIZE_CONTROL_FEATURES_EXT = 1000225002;
    VK_STRUCTURE_TYPE_FRAGMENT_SHADING_RATE_ATTACHMENT_INFO_KHR = 1000226000;
    VK_STRUCTURE_TYPE_PIPELINE_FRAGMENT_SHADING_RATE_STATE_CREATE_INFO_KHR = 1000226001;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_PROPERTIES_KHR = 1000226002;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_FEATURES_KHR = 1000226003;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_KHR = 1000226004;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CORE_PROPERTIES_2_AMD = 1000227000;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COHERENT_MEMORY_FEATURES_AMD = 1000229000;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_IMAGE_ATOMIC_INT64_FEATURES_EXT = 1000234000;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_BUDGET_PROPERTIES_EXT = 1000237000;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_PRIORITY_FEATURES_EXT = 1000238000;
    VK_STRUCTURE_TYPE_MEMORY_PRIORITY_ALLOCATE_INFO_EXT = 1000238001;
    VK_STRUCTURE_TYPE_SURFACE_PROTECTED_CAPABILITIES_KHR = 1000239000;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEDICATED_ALLOCATION_IMAGE_ALIASING_FEATURES_NV = 1000240000;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_DEVICE_ADDRESS_FEATURES_EXT = 1000244000;
    VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_CREATE_INFO_EXT = 1000244002;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TOOL_PROPERTIES_EXT = 1000245000;
    VK_STRUCTURE_TYPE_VALIDATION_FEATURES_EXT = 1000247000;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRESENT_WAIT_FEATURES_KHR = 1000248000;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COOPERATIVE_MATRIX_FEATURES_NV = 1000249000;
    VK_STRUCTURE_TYPE_COOPERATIVE_MATRIX_PROPERTIES_NV = 1000249001;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COOPERATIVE_MATRIX_PROPERTIES_NV = 1000249002;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COVERAGE_REDUCTION_MODE_FEATURES_NV = 1000250000;
    VK_STRUCTURE_TYPE_PIPELINE_COVERAGE_REDUCTION_STATE_CREATE_INFO_NV = 1000250001;
    VK_STRUCTURE_TYPE_FRAMEBUFFER_MIXED_SAMPLES_COMBINATION_NV = 1000250002;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADER_INTERLOCK_FEATURES_EXT = 1000251000;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_YCBCR_IMAGE_ARRAYS_FEATURES_EXT = 1000252000;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROVOKING_VERTEX_FEATURES_EXT = 1000254000;
    VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_PROVOKING_VERTEX_STATE_CREATE_INFO_EXT = 1000254001;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROVOKING_VERTEX_PROPERTIES_EXT = 1000254002;
    VK_STRUCTURE_TYPE_SURFACE_FULL_SCREEN_EXCLUSIVE_INFO_EXT = 1000255000;
    VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_FULL_SCREEN_EXCLUSIVE_EXT = 1000255002;
    VK_STRUCTURE_TYPE_SURFACE_FULL_SCREEN_EXCLUSIVE_WIN32_INFO_EXT = 1000255001;
    VK_STRUCTURE_TYPE_HEADLESS_SURFACE_CREATE_INFO_EXT = 1000256000;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LINE_RASTERIZATION_FEATURES_EXT = 1000259000;
    VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_LINE_STATE_CREATE_INFO_EXT = 1000259001;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LINE_RASTERIZATION_PROPERTIES_EXT = 1000259002;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_FLOAT_FEATURES_EXT = 1000260000;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INDEX_TYPE_UINT8_FEATURES_EXT = 1000265000;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTENDED_DYNAMIC_STATE_FEATURES_EXT = 1000267000;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_EXECUTABLE_PROPERTIES_FEATURES_KHR = 1000269000;
    VK_STRUCTURE_TYPE_PIPELINE_INFO_KHR = 1000269001;
    VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_PROPERTIES_KHR = 1000269002;
    VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_INFO_KHR = 1000269003;
    VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_STATISTIC_KHR = 1000269004;
    VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_INTERNAL_REPRESENTATION_KHR = 1000269005;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_FLOAT_2_FEATURES_EXT = 1000273000;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DEMOTE_TO_HELPER_INVOCATION_FEATURES_EXT = 1000276000;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEVICE_GENERATED_COMMANDS_PROPERTIES_NV = 1000277000;
    VK_STRUCTURE_TYPE_GRAPHICS_SHADER_GROUP_CREATE_INFO_NV = 1000277001;
    VK_STRUCTURE_TYPE_GRAPHICS_PIPELINE_SHADER_GROUPS_CREATE_INFO_NV = 1000277002;
    VK_STRUCTURE_TYPE_INDIRECT_COMMANDS_LAYOUT_TOKEN_NV = 1000277003;
    VK_STRUCTURE_TYPE_INDIRECT_COMMANDS_LAYOUT_CREATE_INFO_NV = 1000277004;
    VK_STRUCTURE_TYPE_GENERATED_COMMANDS_INFO_NV = 1000277005;
    VK_STRUCTURE_TYPE_GENERATED_COMMANDS_MEMORY_REQUIREMENTS_INFO_NV = 1000277006;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEVICE_GENERATED_COMMANDS_FEATURES_NV = 1000277007;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INHERITED_VIEWPORT_SCISSOR_FEATURES_NV = 1000278000;
    VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_VIEWPORT_SCISSOR_INFO_NV = 1000278001;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_INTEGER_DOT_PRODUCT_FEATURES_KHR = 1000280000;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_INTEGER_DOT_PRODUCT_PROPERTIES_KHR = 1000280001;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXEL_BUFFER_ALIGNMENT_FEATURES_EXT = 1000281000;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXEL_BUFFER_ALIGNMENT_PROPERTIES_EXT = 1000281001;
    VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_RENDER_PASS_TRANSFORM_INFO_QCOM = 1000282000;
    VK_STRUCTURE_TYPE_RENDER_PASS_TRANSFORM_BEGIN_INFO_QCOM = 1000282001;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEVICE_MEMORY_REPORT_FEATURES_EXT = 1000284000;
    VK_STRUCTURE_TYPE_DEVICE_DEVICE_MEMORY_REPORT_CREATE_INFO_EXT = 1000284001;
    VK_STRUCTURE_TYPE_DEVICE_MEMORY_REPORT_CALLBACK_DATA_EXT = 1000284002;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ROBUSTNESS_2_FEATURES_EXT = 1000286000;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ROBUSTNESS_2_PROPERTIES_EXT = 1000286001;
    VK_STRUCTURE_TYPE_SAMPLER_CUSTOM_BORDER_COLOR_CREATE_INFO_EXT = 1000287000;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CUSTOM_BORDER_COLOR_PROPERTIES_EXT = 1000287001;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CUSTOM_BORDER_COLOR_FEATURES_EXT = 1000287002;
    VK_STRUCTURE_TYPE_PIPELINE_LIBRARY_CREATE_INFO_KHR = 1000290000;
    VK_STRUCTURE_TYPE_PRESENT_ID_KHR = 1000294000;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRESENT_ID_FEATURES_KHR = 1000294001;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRIVATE_DATA_FEATURES_EXT = 1000295000;
    VK_STRUCTURE_TYPE_DEVICE_PRIVATE_DATA_CREATE_INFO_EXT = 1000295001;
    VK_STRUCTURE_TYPE_PRIVATE_DATA_SLOT_CREATE_INFO_EXT = 1000295002;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_CREATION_CACHE_CONTROL_FEATURES_EXT = 1000297000;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DIAGNOSTICS_CONFIG_FEATURES_NV = 1000300000;
    VK_STRUCTURE_TYPE_DEVICE_DIAGNOSTICS_CONFIG_CREATE_INFO_NV = 1000300001;
    VK_STRUCTURE_TYPE_MEMORY_BARRIER_2_KHR = 1000314000;
    VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER_2_KHR = 1000314001;
    VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER_2_KHR = 1000314002;
    VK_STRUCTURE_TYPE_DEPENDENCY_INFO_KHR = 1000314003;
    VK_STRUCTURE_TYPE_SUBMIT_INFO_2_KHR = 1000314004;
    VK_STRUCTURE_TYPE_SEMAPHORE_SUBMIT_INFO_KHR = 1000314005;
    VK_STRUCTURE_TYPE_COMMAND_BUFFER_SUBMIT_INFO_KHR = 1000314006;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SYNCHRONIZATION_2_FEATURES_KHR = 1000314007;
    VK_STRUCTURE_TYPE_QUEUE_FAMILY_CHECKPOINT_PROPERTIES_2_NV = 1000314008;
    VK_STRUCTURE_TYPE_CHECKPOINT_DATA_2_NV = 1000314009;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SUBGROUP_UNIFORM_CONTROL_FLOW_FEATURES_KHR = 1000323000;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ZERO_INITIALIZE_WORKGROUP_MEMORY_FEATURES_KHR = 1000325000;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_ENUMS_PROPERTIES_NV = 1000326000;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_ENUMS_FEATURES_NV = 1000326001;
    VK_STRUCTURE_TYPE_PIPELINE_FRAGMENT_SHADING_RATE_ENUM_STATE_CREATE_INFO_NV = 1000326002;
    VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_MOTION_TRIANGLES_DATA_NV = 1000327000;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_MOTION_BLUR_FEATURES_NV = 1000327001;
    VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_MOTION_INFO_NV = 1000327002;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_YCBCR_2_PLANE_444_FORMATS_FEATURES_EXT = 1000330000;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_2_FEATURES_EXT = 1000332000;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_2_PROPERTIES_EXT = 1000332001;
    VK_STRUCTURE_TYPE_COPY_COMMAND_TRANSFORM_INFO_QCOM = 1000333000;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_ROBUSTNESS_FEATURES_EXT = 1000335000;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_WORKGROUP_MEMORY_EXPLICIT_LAYOUT_FEATURES_KHR = 1000336000;
    VK_STRUCTURE_TYPE_COPY_BUFFER_INFO_2_KHR = 1000337000;
    VK_STRUCTURE_TYPE_COPY_IMAGE_INFO_2_KHR = 1000337001;
    VK_STRUCTURE_TYPE_COPY_BUFFER_TO_IMAGE_INFO_2_KHR = 1000337002;
    VK_STRUCTURE_TYPE_COPY_IMAGE_TO_BUFFER_INFO_2_KHR = 1000337003;
    VK_STRUCTURE_TYPE_BLIT_IMAGE_INFO_2_KHR = 1000337004;
    VK_STRUCTURE_TYPE_RESOLVE_IMAGE_INFO_2_KHR = 1000337005;
    VK_STRUCTURE_TYPE_BUFFER_COPY_2_KHR = 1000337006;
    VK_STRUCTURE_TYPE_IMAGE_COPY_2_KHR = 1000337007;
    VK_STRUCTURE_TYPE_IMAGE_BLIT_2_KHR = 1000337008;
    VK_STRUCTURE_TYPE_BUFFER_IMAGE_COPY_2_KHR = 1000337009;
    VK_STRUCTURE_TYPE_IMAGE_RESOLVE_2_KHR = 1000337010;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_4444_FORMATS_FEATURES_EXT = 1000340000;
    VK_STRUCTURE_TYPE_DIRECTFB_SURFACE_CREATE_INFO_EXT = 1000346000;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MUTABLE_DESCRIPTOR_TYPE_FEATURES_VALVE = 1000351000;
    VK_STRUCTURE_TYPE_MUTABLE_DESCRIPTOR_TYPE_CREATE_INFO_VALVE = 1000351002;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_INPUT_DYNAMIC_STATE_FEATURES_EXT = 1000352000;
    VK_STRUCTURE_TYPE_VERTEX_INPUT_BINDING_DESCRIPTION_2_EXT = 1000352001;
    VK_STRUCTURE_TYPE_VERTEX_INPUT_ATTRIBUTE_DESCRIPTION_2_EXT = 1000352002;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DRM_PROPERTIES_EXT = 1000353000;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRIMITIVE_TOPOLOGY_LIST_RESTART_FEATURES_EXT = 1000356000;
    VK_STRUCTURE_TYPE_IMPORT_MEMORY_ZIRCON_HANDLE_INFO_FUCHSIA = 1000364000;
    VK_STRUCTURE_TYPE_MEMORY_ZIRCON_HANDLE_PROPERTIES_FUCHSIA = 1000364001;
    VK_STRUCTURE_TYPE_MEMORY_GET_ZIRCON_HANDLE_INFO_FUCHSIA = 1000364002;
    VK_STRUCTURE_TYPE_IMPORT_SEMAPHORE_ZIRCON_HANDLE_INFO_FUCHSIA = 1000365000;
    VK_STRUCTURE_TYPE_SEMAPHORE_GET_ZIRCON_HANDLE_INFO_FUCHSIA = 1000365001;
    VK_STRUCTURE_TYPE_BUFFER_COLLECTION_CREATE_INFO_FUCHSIA = 1000366000;
    VK_STRUCTURE_TYPE_IMPORT_MEMORY_BUFFER_COLLECTION_FUCHSIA = 1000366001;
    VK_STRUCTURE_TYPE_BUFFER_COLLECTION_IMAGE_CREATE_INFO_FUCHSIA = 1000366002;
    VK_STRUCTURE_TYPE_BUFFER_COLLECTION_PROPERTIES_FUCHSIA = 1000366003;
    VK_STRUCTURE_TYPE_BUFFER_CONSTRAINTS_INFO_FUCHSIA = 1000366004;
    VK_STRUCTURE_TYPE_BUFFER_COLLECTION_BUFFER_CREATE_INFO_FUCHSIA = 1000366005;
    VK_STRUCTURE_TYPE_IMAGE_CONSTRAINTS_INFO_FUCHSIA = 1000366006;
    VK_STRUCTURE_TYPE_IMAGE_FORMAT_CONSTRAINTS_INFO_FUCHSIA = 1000366007;
    VK_STRUCTURE_TYPE_SYSMEM_COLOR_SPACE_FUCHSIA = 1000366008;
    VK_STRUCTURE_TYPE_BUFFER_COLLECTION_CONSTRAINTS_INFO_FUCHSIA = 1000366009;
    VK_STRUCTURE_TYPE_SUBPASS_SHADING_PIPELINE_CREATE_INFO_HUAWEI = 1000369000;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBPASS_SHADING_FEATURES_HUAWEI = 1000369001;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBPASS_SHADING_PROPERTIES_HUAWEI = 1000369002;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INVOCATION_MASK_FEATURES_HUAWEI = 1000370000;
    VK_STRUCTURE_TYPE_MEMORY_GET_REMOTE_ADDRESS_INFO_NV = 1000371000;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_MEMORY_RDMA_FEATURES_NV = 1000371001;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTENDED_DYNAMIC_STATE_2_FEATURES_EXT = 1000377000;
    VK_STRUCTURE_TYPE_SCREEN_SURFACE_CREATE_INFO_QNX = 1000378000;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COLOR_WRITE_ENABLE_FEATURES_EXT = 1000381000;
    VK_STRUCTURE_TYPE_PIPELINE_COLOR_WRITE_CREATE_INFO_EXT = 1000381001;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GLOBAL_PRIORITY_QUERY_FEATURES_EXT = 1000388000;
    VK_STRUCTURE_TYPE_QUEUE_FAMILY_GLOBAL_PRIORITY_PROPERTIES_EXT = 1000388001;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTI_DRAW_FEATURES_EXT = 1000392000;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTI_DRAW_PROPERTIES_EXT = 1000392001;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PAGEABLE_DEVICE_LOCAL_MEMORY_FEATURES_EXT = 1000412000;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTER_FEATURES = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTERS_FEATURES;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DRAW_PARAMETER_FEATURES = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DRAW_PARAMETERS_FEATURES;
    VK_STRUCTURE_TYPE_DEBUG_REPORT_CREATE_INFO_EXT = VK_STRUCTURE_TYPE_DEBUG_REPORT_CALLBACK_CREATE_INFO_EXT;
    VK_STRUCTURE_TYPE_RENDER_PASS_MULTIVIEW_CREATE_INFO_KHR = VK_STRUCTURE_TYPE_RENDER_PASS_MULTIVIEW_CREATE_INFO;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_FEATURES_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_FEATURES;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PROPERTIES_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PROPERTIES;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FEATURES_2_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FEATURES_2;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROPERTIES_2_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROPERTIES_2;
    VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_2_KHR = VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_2;
    VK_STRUCTURE_TYPE_IMAGE_FORMAT_PROPERTIES_2_KHR = VK_STRUCTURE_TYPE_IMAGE_FORMAT_PROPERTIES_2;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_FORMAT_INFO_2_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_FORMAT_INFO_2;
    VK_STRUCTURE_TYPE_QUEUE_FAMILY_PROPERTIES_2_KHR = VK_STRUCTURE_TYPE_QUEUE_FAMILY_PROPERTIES_2;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_PROPERTIES_2_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_PROPERTIES_2;
    VK_STRUCTURE_TYPE_SPARSE_IMAGE_FORMAT_PROPERTIES_2_KHR = VK_STRUCTURE_TYPE_SPARSE_IMAGE_FORMAT_PROPERTIES_2;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SPARSE_IMAGE_FORMAT_INFO_2_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SPARSE_IMAGE_FORMAT_INFO_2;
    VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_FLAGS_INFO_KHR = VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_FLAGS_INFO;
    VK_STRUCTURE_TYPE_DEVICE_GROUP_RENDER_PASS_BEGIN_INFO_KHR = VK_STRUCTURE_TYPE_DEVICE_GROUP_RENDER_PASS_BEGIN_INFO;
    VK_STRUCTURE_TYPE_DEVICE_GROUP_COMMAND_BUFFER_BEGIN_INFO_KHR = VK_STRUCTURE_TYPE_DEVICE_GROUP_COMMAND_BUFFER_BEGIN_INFO;
    VK_STRUCTURE_TYPE_DEVICE_GROUP_SUBMIT_INFO_KHR = VK_STRUCTURE_TYPE_DEVICE_GROUP_SUBMIT_INFO;
    VK_STRUCTURE_TYPE_DEVICE_GROUP_BIND_SPARSE_INFO_KHR = VK_STRUCTURE_TYPE_DEVICE_GROUP_BIND_SPARSE_INFO;
    VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_DEVICE_GROUP_INFO_KHR = VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_DEVICE_GROUP_INFO;
    VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_DEVICE_GROUP_INFO_KHR = VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_DEVICE_GROUP_INFO;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GROUP_PROPERTIES_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GROUP_PROPERTIES;
    VK_STRUCTURE_TYPE_DEVICE_GROUP_DEVICE_CREATE_INFO_KHR = VK_STRUCTURE_TYPE_DEVICE_GROUP_DEVICE_CREATE_INFO;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_IMAGE_FORMAT_INFO_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_IMAGE_FORMAT_INFO;
    VK_STRUCTURE_TYPE_EXTERNAL_IMAGE_FORMAT_PROPERTIES_KHR = VK_STRUCTURE_TYPE_EXTERNAL_IMAGE_FORMAT_PROPERTIES;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_BUFFER_INFO_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_BUFFER_INFO;
    VK_STRUCTURE_TYPE_EXTERNAL_BUFFER_PROPERTIES_KHR = VK_STRUCTURE_TYPE_EXTERNAL_BUFFER_PROPERTIES;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ID_PROPERTIES_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ID_PROPERTIES;
    VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_BUFFER_CREATE_INFO_KHR = VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_BUFFER_CREATE_INFO;
    VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO_KHR = VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO;
    VK_STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO_KHR = VK_STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_SEMAPHORE_INFO_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_SEMAPHORE_INFO;
    VK_STRUCTURE_TYPE_EXTERNAL_SEMAPHORE_PROPERTIES_KHR = VK_STRUCTURE_TYPE_EXTERNAL_SEMAPHORE_PROPERTIES;
    VK_STRUCTURE_TYPE_EXPORT_SEMAPHORE_CREATE_INFO_KHR = VK_STRUCTURE_TYPE_EXPORT_SEMAPHORE_CREATE_INFO;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_FLOAT16_INT8_FEATURES_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_FLOAT16_INT8_FEATURES;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FLOAT16_INT8_FEATURES_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_FLOAT16_INT8_FEATURES;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_16BIT_STORAGE_FEATURES_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_16BIT_STORAGE_FEATURES;
    VK_STRUCTURE_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_CREATE_INFO_KHR = VK_STRUCTURE_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_CREATE_INFO;
    VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES2_EXT = VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_2_EXT;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGELESS_FRAMEBUFFER_FEATURES_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGELESS_FRAMEBUFFER_FEATURES;
    VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENTS_CREATE_INFO_KHR = VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENTS_CREATE_INFO;
    VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENT_IMAGE_INFO_KHR = VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENT_IMAGE_INFO;
    VK_STRUCTURE_TYPE_RENDER_PASS_ATTACHMENT_BEGIN_INFO_KHR = VK_STRUCTURE_TYPE_RENDER_PASS_ATTACHMENT_BEGIN_INFO;
    VK_STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_2_KHR = VK_STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_2;
    VK_STRUCTURE_TYPE_ATTACHMENT_REFERENCE_2_KHR = VK_STRUCTURE_TYPE_ATTACHMENT_REFERENCE_2;
    VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_2_KHR = VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_2;
    VK_STRUCTURE_TYPE_SUBPASS_DEPENDENCY_2_KHR = VK_STRUCTURE_TYPE_SUBPASS_DEPENDENCY_2;
    VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO_2_KHR = VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO_2;
    VK_STRUCTURE_TYPE_SUBPASS_BEGIN_INFO_KHR = VK_STRUCTURE_TYPE_SUBPASS_BEGIN_INFO;
    VK_STRUCTURE_TYPE_SUBPASS_END_INFO_KHR = VK_STRUCTURE_TYPE_SUBPASS_END_INFO;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_FENCE_INFO_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_FENCE_INFO;
    VK_STRUCTURE_TYPE_EXTERNAL_FENCE_PROPERTIES_KHR = VK_STRUCTURE_TYPE_EXTERNAL_FENCE_PROPERTIES;
    VK_STRUCTURE_TYPE_EXPORT_FENCE_CREATE_INFO_KHR = VK_STRUCTURE_TYPE_EXPORT_FENCE_CREATE_INFO;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_POINT_CLIPPING_PROPERTIES_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_POINT_CLIPPING_PROPERTIES;
    VK_STRUCTURE_TYPE_RENDER_PASS_INPUT_ATTACHMENT_ASPECT_CREATE_INFO_KHR = VK_STRUCTURE_TYPE_RENDER_PASS_INPUT_ATTACHMENT_ASPECT_CREATE_INFO;
    VK_STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO_KHR = VK_STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO;
    VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_DOMAIN_ORIGIN_STATE_CREATE_INFO_KHR = VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_DOMAIN_ORIGIN_STATE_CREATE_INFO;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTERS_FEATURES_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTERS_FEATURES;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTER_FEATURES_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTERS_FEATURES_KHR;
    VK_STRUCTURE_TYPE_MEMORY_DEDICATED_REQUIREMENTS_KHR = VK_STRUCTURE_TYPE_MEMORY_DEDICATED_REQUIREMENTS;
    VK_STRUCTURE_TYPE_MEMORY_DEDICATED_ALLOCATE_INFO_KHR = VK_STRUCTURE_TYPE_MEMORY_DEDICATED_ALLOCATE_INFO;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_FILTER_MINMAX_PROPERTIES_EXT = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_FILTER_MINMAX_PROPERTIES;
    VK_STRUCTURE_TYPE_SAMPLER_REDUCTION_MODE_CREATE_INFO_EXT = VK_STRUCTURE_TYPE_SAMPLER_REDUCTION_MODE_CREATE_INFO;
    VK_STRUCTURE_TYPE_BUFFER_MEMORY_REQUIREMENTS_INFO_2_KHR = VK_STRUCTURE_TYPE_BUFFER_MEMORY_REQUIREMENTS_INFO_2;
    VK_STRUCTURE_TYPE_IMAGE_MEMORY_REQUIREMENTS_INFO_2_KHR = VK_STRUCTURE_TYPE_IMAGE_MEMORY_REQUIREMENTS_INFO_2;
    VK_STRUCTURE_TYPE_IMAGE_SPARSE_MEMORY_REQUIREMENTS_INFO_2_KHR = VK_STRUCTURE_TYPE_IMAGE_SPARSE_MEMORY_REQUIREMENTS_INFO_2;
    VK_STRUCTURE_TYPE_MEMORY_REQUIREMENTS_2_KHR = VK_STRUCTURE_TYPE_MEMORY_REQUIREMENTS_2;
    VK_STRUCTURE_TYPE_SPARSE_IMAGE_MEMORY_REQUIREMENTS_2_KHR = VK_STRUCTURE_TYPE_SPARSE_IMAGE_MEMORY_REQUIREMENTS_2;
    VK_STRUCTURE_TYPE_IMAGE_FORMAT_LIST_CREATE_INFO_KHR = VK_STRUCTURE_TYPE_IMAGE_FORMAT_LIST_CREATE_INFO;
    VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_CREATE_INFO_KHR = VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_CREATE_INFO;
    VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_INFO_KHR = VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_INFO;
    VK_STRUCTURE_TYPE_BIND_IMAGE_PLANE_MEMORY_INFO_KHR = VK_STRUCTURE_TYPE_BIND_IMAGE_PLANE_MEMORY_INFO;
    VK_STRUCTURE_TYPE_IMAGE_PLANE_MEMORY_REQUIREMENTS_INFO_KHR = VK_STRUCTURE_TYPE_IMAGE_PLANE_MEMORY_REQUIREMENTS_INFO;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_YCBCR_CONVERSION_FEATURES_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_YCBCR_CONVERSION_FEATURES;
    VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_IMAGE_FORMAT_PROPERTIES_KHR = VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_IMAGE_FORMAT_PROPERTIES;
    VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_INFO_KHR = VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_INFO;
    VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_INFO_KHR = VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_INFO;
    VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_BINDING_FLAGS_CREATE_INFO_EXT = VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_BINDING_FLAGS_CREATE_INFO;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_FEATURES_EXT = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_FEATURES;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_PROPERTIES_EXT = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_PROPERTIES;
    VK_STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_ALLOCATE_INFO_EXT = VK_STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_ALLOCATE_INFO;
    VK_STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_LAYOUT_SUPPORT_EXT = VK_STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_LAYOUT_SUPPORT;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_3_PROPERTIES_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_3_PROPERTIES;
    VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_SUPPORT_KHR = VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_SUPPORT;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SUBGROUP_EXTENDED_TYPES_FEATURES_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SUBGROUP_EXTENDED_TYPES_FEATURES;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_8BIT_STORAGE_FEATURES_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_8BIT_STORAGE_FEATURES;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_INT64_FEATURES_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_INT64_FEATURES;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DRIVER_PROPERTIES_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DRIVER_PROPERTIES;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FLOAT_CONTROLS_PROPERTIES_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FLOAT_CONTROLS_PROPERTIES;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_STENCIL_RESOLVE_PROPERTIES_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_STENCIL_RESOLVE_PROPERTIES;
    VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_DEPTH_STENCIL_RESOLVE_KHR = VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_DEPTH_STENCIL_RESOLVE;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_FEATURES_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_FEATURES;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_PROPERTIES_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_PROPERTIES;
    VK_STRUCTURE_TYPE_SEMAPHORE_TYPE_CREATE_INFO_KHR = VK_STRUCTURE_TYPE_SEMAPHORE_TYPE_CREATE_INFO;
    VK_STRUCTURE_TYPE_TIMELINE_SEMAPHORE_SUBMIT_INFO_KHR = VK_STRUCTURE_TYPE_TIMELINE_SEMAPHORE_SUBMIT_INFO;
    VK_STRUCTURE_TYPE_SEMAPHORE_WAIT_INFO_KHR = VK_STRUCTURE_TYPE_SEMAPHORE_WAIT_INFO;
    VK_STRUCTURE_TYPE_SEMAPHORE_SIGNAL_INFO_KHR = VK_STRUCTURE_TYPE_SEMAPHORE_SIGNAL_INFO;
    VK_STRUCTURE_TYPE_QUERY_POOL_CREATE_INFO_INTEL = VK_STRUCTURE_TYPE_QUERY_POOL_PERFORMANCE_QUERY_CREATE_INFO_INTEL;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_MEMORY_MODEL_FEATURES_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_MEMORY_MODEL_FEATURES;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SCALAR_BLOCK_LAYOUT_FEATURES_EXT = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SCALAR_BLOCK_LAYOUT_FEATURES;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SEPARATE_DEPTH_STENCIL_LAYOUTS_FEATURES_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SEPARATE_DEPTH_STENCIL_LAYOUTS_FEATURES;
    VK_STRUCTURE_TYPE_ATTACHMENT_REFERENCE_STENCIL_LAYOUT_KHR = VK_STRUCTURE_TYPE_ATTACHMENT_REFERENCE_STENCIL_LAYOUT;
    VK_STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_STENCIL_LAYOUT_KHR = VK_STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_STENCIL_LAYOUT;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_ADDRESS_FEATURES_EXT = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_DEVICE_ADDRESS_FEATURES_EXT;
    VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_INFO_EXT = VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_INFO;
    VK_STRUCTURE_TYPE_IMAGE_STENCIL_USAGE_CREATE_INFO_EXT = VK_STRUCTURE_TYPE_IMAGE_STENCIL_USAGE_CREATE_INFO;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_UNIFORM_BUFFER_STANDARD_LAYOUT_FEATURES_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_UNIFORM_BUFFER_STANDARD_LAYOUT_FEATURES;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_DEVICE_ADDRESS_FEATURES_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_DEVICE_ADDRESS_FEATURES;
    VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_INFO_KHR = VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_INFO;
    VK_STRUCTURE_TYPE_BUFFER_OPAQUE_CAPTURE_ADDRESS_CREATE_INFO_KHR = VK_STRUCTURE_TYPE_BUFFER_OPAQUE_CAPTURE_ADDRESS_CREATE_INFO;
    VK_STRUCTURE_TYPE_MEMORY_OPAQUE_CAPTURE_ADDRESS_ALLOCATE_INFO_KHR = VK_STRUCTURE_TYPE_MEMORY_OPAQUE_CAPTURE_ADDRESS_ALLOCATE_INFO;
    VK_STRUCTURE_TYPE_DEVICE_MEMORY_OPAQUE_CAPTURE_ADDRESS_INFO_KHR = VK_STRUCTURE_TYPE_DEVICE_MEMORY_OPAQUE_CAPTURE_ADDRESS_INFO;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_HOST_QUERY_RESET_FEATURES_EXT = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_HOST_QUERY_RESET_FEATURES;
    VK_STRUCTURE_TYPE_MAX_ENUM = 0x7FFFFFFF;
}

enum VkImageLayout {
    VK_IMAGE_LAYOUT_UNDEFINED = 0;
    VK_IMAGE_LAYOUT_GENERAL = 1;
    VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL = 2;
    VK_IMAGE_LAYOUT_DEPTH_STENCIL_ATTACHMENT_OPTIMAL = 3;
    VK_IMAGE_LAYOUT_DEPTH_STENCIL_READ_ONLY_OPTIMAL = 4;
    VK_IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL = 5;
    VK_IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL = 6;
    VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL = 7;
    VK_IMAGE_LAYOUT_PREINITIALIZED = 8;
    VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_STENCIL_ATTACHMENT_OPTIMAL = 1000117000;
    VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_STENCIL_READ_ONLY_OPTIMAL = 1000117001;
    VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_OPTIMAL = 1000241000;
    VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_OPTIMAL = 1000241001;
    VK_IMAGE_LAYOUT_STENCIL_ATTACHMENT_OPTIMAL = 1000241002;
    VK_IMAGE_LAYOUT_STENCIL_READ_ONLY_OPTIMAL = 1000241003;
    VK_IMAGE_LAYOUT_PRESENT_SRC_KHR = 1000001002;
    VK_IMAGE_LAYOUT_SHARED_PRESENT_KHR = 1000111000;
    VK_IMAGE_LAYOUT_FRAGMENT_DENSITY_MAP_OPTIMAL_EXT = 1000218000;
    VK_IMAGE_LAYOUT_FRAGMENT_SHADING_RATE_ATTACHMENT_OPTIMAL_KHR = 1000164003;
    VK_IMAGE_LAYOUT_READ_ONLY_OPTIMAL_KHR = 1000314000;
    VK_IMAGE_LAYOUT_ATTACHMENT_OPTIMAL_KHR = 1000314001;
    VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_STENCIL_ATTACHMENT_OPTIMAL_KHR = VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_STENCIL_ATTACHMENT_OPTIMAL;
    VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_STENCIL_READ_ONLY_OPTIMAL_KHR = VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_STENCIL_READ_ONLY_OPTIMAL;
    VK_IMAGE_LAYOUT_SHADING_RATE_OPTIMAL_NV = VK_IMAGE_LAYOUT_FRAGMENT_SHADING_RATE_ATTACHMENT_OPTIMAL_KHR;
    VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_OPTIMAL_KHR = VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_OPTIMAL;
    VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_OPTIMAL_KHR = VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_OPTIMAL;
    VK_IMAGE_LAYOUT_STENCIL_ATTACHMENT_OPTIMAL_KHR = VK_IMAGE_LAYOUT_STENCIL_ATTACHMENT_OPTIMAL;
    VK_IMAGE_LAYOUT_STENCIL_READ_ONLY_OPTIMAL_KHR = VK_IMAGE_LAYOUT_STENCIL_READ_ONLY_OPTIMAL;
    VK_IMAGE_LAYOUT_MAX_ENUM = 0x7FFFFFFF;
}

enum VkObjectType {
    VK_OBJECT_TYPE_UNKNOWN = 0;
    VK_OBJECT_TYPE_INSTANCE = 1;
    VK_OBJECT_TYPE_PHYSICAL_DEVICE = 2;
    VK_OBJECT_TYPE_DEVICE = 3;
    VK_OBJECT_TYPE_QUEUE = 4;
    VK_OBJECT_TYPE_SEMAPHORE = 5;
    VK_OBJECT_TYPE_COMMAND_BUFFER = 6;
    VK_OBJECT_TYPE_FENCE = 7;
    VK_OBJECT_TYPE_DEVICE_MEMORY = 8;
    VK_OBJECT_TYPE_BUFFER = 9;
    VK_OBJECT_TYPE_IMAGE = 10;
    VK_OBJECT_TYPE_EVENT = 11;
    VK_OBJECT_TYPE_QUERY_POOL = 12;
    VK_OBJECT_TYPE_BUFFER_VIEW = 13;
    VK_OBJECT_TYPE_IMAGE_VIEW = 14;
    VK_OBJECT_TYPE_SHADER_MODULE = 15;
    VK_OBJECT_TYPE_PIPELINE_CACHE = 16;
    VK_OBJECT_TYPE_PIPELINE_LAYOUT = 17;
    VK_OBJECT_TYPE_RENDER_PASS = 18;
    VK_OBJECT_TYPE_PIPELINE = 19;
    VK_OBJECT_TYPE_DESCRIPTOR_SET_LAYOUT = 20;
    VK_OBJECT_TYPE_SAMPLER = 21;
    VK_OBJECT_TYPE_DESCRIPTOR_POOL = 22;
    VK_OBJECT_TYPE_DESCRIPTOR_SET = 23;
    VK_OBJECT_TYPE_FRAMEBUFFER = 24;
    VK_OBJECT_TYPE_COMMAND_POOL = 25;
    VK_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION = 1000156000;
    VK_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE = 1000085000;
    VK_OBJECT_TYPE_SURFACE_KHR = 1000000000;
    VK_OBJECT_TYPE_SWAPCHAIN_KHR = 1000001000;
    VK_OBJECT_TYPE_DISPLAY_KHR = 1000002000;
    VK_OBJECT_TYPE_DISPLAY_MODE_KHR = 1000002001;
    VK_OBJECT_TYPE_DEBUG_REPORT_CALLBACK_EXT = 1000011000;
    VK_OBJECT_TYPE_CU_MODULE_NVX = 1000029000;
    VK_OBJECT_TYPE_CU_FUNCTION_NVX = 1000029001;
    VK_OBJECT_TYPE_DEBUG_UTILS_MESSENGER_EXT = 1000128000;
    VK_OBJECT_TYPE_ACCELERATION_STRUCTURE_KHR = 1000150000;
    VK_OBJECT_TYPE_VALIDATION_CACHE_EXT = 1000160000;
    VK_OBJECT_TYPE_ACCELERATION_STRUCTURE_NV = 1000165000;
    VK_OBJECT_TYPE_PERFORMANCE_CONFIGURATION_INTEL = 1000210000;
    VK_OBJECT_TYPE_DEFERRED_OPERATION_KHR = 1000268000;
    VK_OBJECT_TYPE_INDIRECT_COMMANDS_LAYOUT_NV = 1000277000;
    VK_OBJECT_TYPE_PRIVATE_DATA_SLOT_EXT = 1000295000;
    VK_OBJECT_TYPE_BUFFER_COLLECTION_FUCHSIA = 1000366000;
    VK_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_KHR = VK_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE;
    VK_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION_KHR = VK_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION;
    VK_OBJECT_TYPE_MAX_ENUM = 0x7FFFFFFF;
}

enum VkPipelineCacheHeaderVersion {
    VK_PIPELINE_CACHE_HEADER_VERSION_ONE = 1;
    VK_PIPELINE_CACHE_HEADER_VERSION_MAX_ENUM = 0x7FFFFFFF;
}

enum VkVendorId {
    VK_VENDOR_ID_VIV = 0x10001;
    VK_VENDOR_ID_VSI = 0x10002;
    VK_VENDOR_ID_KAZAN = 0x10003;
    VK_VENDOR_ID_CODEPLAY = 0x10004;
    VK_VENDOR_ID_MESA = 0x10005;
    VK_VENDOR_ID_POCL = 0x10006;
    VK_VENDOR_ID_MAX_ENUM = 0x7FFFFFFF;
}

enum VkSystemAllocationScope {
    VK_SYSTEM_ALLOCATION_SCOPE_COMMAND = 0;
    VK_SYSTEM_ALLOCATION_SCOPE_OBJECT = 1;
    VK_SYSTEM_ALLOCATION_SCOPE_CACHE = 2;
    VK_SYSTEM_ALLOCATION_SCOPE_DEVICE = 3;
    VK_SYSTEM_ALLOCATION_SCOPE_INSTANCE = 4;
    VK_SYSTEM_ALLOCATION_SCOPE_MAX_ENUM = 0x7FFFFFFF;
}

enum VkInternalAllocationType {
    VK_INTERNAL_ALLOCATION_TYPE_EXECUTABLE = 0;
    VK_INTERNAL_ALLOCATION_TYPE_MAX_ENUM = 0x7FFFFFFF;
}

enum VkFormat {
    VK_FORMAT_UNDEFINED = 0;
    VK_FORMAT_R4G4_UNORM_PACK8 = 1;
    VK_FORMAT_R4G4B4A4_UNORM_PACK16 = 2;
    VK_FORMAT_B4G4R4A4_UNORM_PACK16 = 3;
    VK_FORMAT_R5G6B5_UNORM_PACK16 = 4;
    VK_FORMAT_B5G6R5_UNORM_PACK16 = 5;
    VK_FORMAT_R5G5B5A1_UNORM_PACK16 = 6;
    VK_FORMAT_B5G5R5A1_UNORM_PACK16 = 7;
    VK_FORMAT_A1R5G5B5_UNORM_PACK16 = 8;
    VK_FORMAT_R8_UNORM = 9;
    VK_FORMAT_R8_SNORM = 10;
    VK_FORMAT_R8_USCALED = 11;
    VK_FORMAT_R8_SSCALED = 12;
    VK_FORMAT_R8_UINT = 13;
    VK_FORMAT_R8_SINT = 14;
    VK_FORMAT_R8_SRGB = 15;
    VK_FORMAT_R8G8_UNORM = 16;
    VK_FORMAT_R8G8_SNORM = 17;
    VK_FORMAT_R8G8_USCALED = 18;
    VK_FORMAT_R8G8_SSCALED = 19;
    VK_FORMAT_R8G8_UINT = 20;
    VK_FORMAT_R8G8_SINT = 21;
    VK_FORMAT_R8G8_SRGB = 22;
    VK_FORMAT_R8G8B8_UNORM = 23;
    VK_FORMAT_R8G8B8_SNORM = 24;
    VK_FORMAT_R8G8B8_USCALED = 25;
    VK_FORMAT_R8G8B8_SSCALED = 26;
    VK_FORMAT_R8G8B8_UINT = 27;
    VK_FORMAT_R8G8B8_SINT = 28;
    VK_FORMAT_R8G8B8_SRGB = 29;
    VK_FORMAT_B8G8R8_UNORM = 30;
    VK_FORMAT_B8G8R8_SNORM = 31;
    VK_FORMAT_B8G8R8_USCALED = 32;
    VK_FORMAT_B8G8R8_SSCALED = 33;
    VK_FORMAT_B8G8R8_UINT = 34;
    VK_FORMAT_B8G8R8_SINT = 35;
    VK_FORMAT_B8G8R8_SRGB = 36;
    VK_FORMAT_R8G8B8A8_UNORM = 37;
    VK_FORMAT_R8G8B8A8_SNORM = 38;
    VK_FORMAT_R8G8B8A8_USCALED = 39;
    VK_FORMAT_R8G8B8A8_SSCALED = 40;
    VK_FORMAT_R8G8B8A8_UINT = 41;
    VK_FORMAT_R8G8B8A8_SINT = 42;
    VK_FORMAT_R8G8B8A8_SRGB = 43;
    VK_FORMAT_B8G8R8A8_UNORM = 44;
    VK_FORMAT_B8G8R8A8_SNORM = 45;
    VK_FORMAT_B8G8R8A8_USCALED = 46;
    VK_FORMAT_B8G8R8A8_SSCALED = 47;
    VK_FORMAT_B8G8R8A8_UINT = 48;
    VK_FORMAT_B8G8R8A8_SINT = 49;
    VK_FORMAT_B8G8R8A8_SRGB = 50;
    VK_FORMAT_A8B8G8R8_UNORM_PACK32 = 51;
    VK_FORMAT_A8B8G8R8_SNORM_PACK32 = 52;
    VK_FORMAT_A8B8G8R8_USCALED_PACK32 = 53;
    VK_FORMAT_A8B8G8R8_SSCALED_PACK32 = 54;
    VK_FORMAT_A8B8G8R8_UINT_PACK32 = 55;
    VK_FORMAT_A8B8G8R8_SINT_PACK32 = 56;
    VK_FORMAT_A8B8G8R8_SRGB_PACK32 = 57;
    VK_FORMAT_A2R10G10B10_UNORM_PACK32 = 58;
    VK_FORMAT_A2R10G10B10_SNORM_PACK32 = 59;
    VK_FORMAT_A2R10G10B10_USCALED_PACK32 = 60;
    VK_FORMAT_A2R10G10B10_SSCALED_PACK32 = 61;
    VK_FORMAT_A2R10G10B10_UINT_PACK32 = 62;
    VK_FORMAT_A2R10G10B10_SINT_PACK32 = 63;
    VK_FORMAT_A2B10G10R10_UNORM_PACK32 = 64;
    VK_FORMAT_A2B10G10R10_SNORM_PACK32 = 65;
    VK_FORMAT_A2B10G10R10_USCALED_PACK32 = 66;
    VK_FORMAT_A2B10G10R10_SSCALED_PACK32 = 67;
    VK_FORMAT_A2B10G10R10_UINT_PACK32 = 68;
    VK_FORMAT_A2B10G10R10_SINT_PACK32 = 69;
    VK_FORMAT_R16_UNORM = 70;
    VK_FORMAT_R16_SNORM = 71;
    VK_FORMAT_R16_USCALED = 72;
    VK_FORMAT_R16_SSCALED = 73;
    VK_FORMAT_R16_UINT = 74;
    VK_FORMAT_R16_SINT = 75;
    VK_FORMAT_R16_SFLOAT = 76;
    VK_FORMAT_R16G16_UNORM = 77;
    VK_FORMAT_R16G16_SNORM = 78;
    VK_FORMAT_R16G16_USCALED = 79;
    VK_FORMAT_R16G16_SSCALED = 80;
    VK_FORMAT_R16G16_UINT = 81;
    VK_FORMAT_R16G16_SINT = 82;
    VK_FORMAT_R16G16_SFLOAT = 83;
    VK_FORMAT_R16G16B16_UNORM = 84;
    VK_FORMAT_R16G16B16_SNORM = 85;
    VK_FORMAT_R16G16B16_USCALED = 86;
    VK_FORMAT_R16G16B16_SSCALED = 87;
    VK_FORMAT_R16G16B16_UINT = 88;
    VK_FORMAT_R16G16B16_SINT = 89;
    VK_FORMAT_R16G16B16_SFLOAT = 90;
    VK_FORMAT_R16G16B16A16_UNORM = 91;
    VK_FORMAT_R16G16B16A16_SNORM = 92;
    VK_FORMAT_R16G16B16A16_USCALED = 93;
    VK_FORMAT_R16G16B16A16_SSCALED = 94;
    VK_FORMAT_R16G16B16A16_UINT = 95;
    VK_FORMAT_R16G16B16A16_SINT = 96;
    VK_FORMAT_R16G16B16A16_SFLOAT = 97;
    VK_FORMAT_R32_UINT = 98;
    VK_FORMAT_R32_SINT = 99;
    VK_FORMAT_R32_SFLOAT = 100;
    VK_FORMAT_R32G32_UINT = 101;
    VK_FORMAT_R32G32_SINT = 102;
    VK_FORMAT_R32G32_SFLOAT = 103;
    VK_FORMAT_R32G32B32_UINT = 104;
    VK_FORMAT_R32G32B32_SINT = 105;
    VK_FORMAT_R32G32B32_SFLOAT = 106;
    VK_FORMAT_R32G32B32A32_UINT = 107;
    VK_FORMAT_R32G32B32A32_SINT = 108;
    VK_FORMAT_R32G32B32A32_SFLOAT = 109;
    VK_FORMAT_R64_UINT = 110;
    VK_FORMAT_R64_SINT = 111;
    VK_FORMAT_R64_SFLOAT = 112;
    VK_FORMAT_R64G64_UINT = 113;
    VK_FORMAT_R64G64_SINT = 114;
    VK_FORMAT_R64G64_SFLOAT = 115;
    VK_FORMAT_R64G64B64_UINT = 116;
    VK_FORMAT_R64G64B64_SINT = 117;
    VK_FORMAT_R64G64B64_SFLOAT = 118;
    VK_FORMAT_R64G64B64A64_UINT = 119;
    VK_FORMAT_R64G64B64A64_SINT = 120;
    VK_FORMAT_R64G64B64A64_SFLOAT = 121;
    VK_FORMAT_B10G11R11_UFLOAT_PACK32 = 122;
    VK_FORMAT_E5B9G9R9_UFLOAT_PACK32 = 123;
    VK_FORMAT_D16_UNORM = 124;
    VK_FORMAT_X8_D24_UNORM_PACK32 = 125;
    VK_FORMAT_D32_SFLOAT = 126;
    VK_FORMAT_S8_UINT = 127;
    VK_FORMAT_D16_UNORM_S8_UINT = 128;
    VK_FORMAT_D24_UNORM_S8_UINT = 129;
    VK_FORMAT_D32_SFLOAT_S8_UINT = 130;
    VK_FORMAT_BC1_RGB_UNORM_BLOCK = 131;
    VK_FORMAT_BC1_RGB_SRGB_BLOCK = 132;
    VK_FORMAT_BC1_RGBA_UNORM_BLOCK = 133;
    VK_FORMAT_BC1_RGBA_SRGB_BLOCK = 134;
    VK_FORMAT_BC2_UNORM_BLOCK = 135;
    VK_FORMAT_BC2_SRGB_BLOCK = 136;
    VK_FORMAT_BC3_UNORM_BLOCK = 137;
    VK_FORMAT_BC3_SRGB_BLOCK = 138;
    VK_FORMAT_BC4_UNORM_BLOCK = 139;
    VK_FORMAT_BC4_SNORM_BLOCK = 140;
    VK_FORMAT_BC5_UNORM_BLOCK = 141;
    VK_FORMAT_BC5_SNORM_BLOCK = 142;
    VK_FORMAT_BC6H_UFLOAT_BLOCK = 143;
    VK_FORMAT_BC6H_SFLOAT_BLOCK = 144;
    VK_FORMAT_BC7_UNORM_BLOCK = 145;
    VK_FORMAT_BC7_SRGB_BLOCK = 146;
    VK_FORMAT_ETC2_R8G8B8_UNORM_BLOCK = 147;
    VK_FORMAT_ETC2_R8G8B8_SRGB_BLOCK = 148;
    VK_FORMAT_ETC2_R8G8B8A1_UNORM_BLOCK = 149;
    VK_FORMAT_ETC2_R8G8B8A1_SRGB_BLOCK = 150;
    VK_FORMAT_ETC2_R8G8B8A8_UNORM_BLOCK = 151;
    VK_FORMAT_ETC2_R8G8B8A8_SRGB_BLOCK = 152;
    VK_FORMAT_EAC_R11_UNORM_BLOCK = 153;
    VK_FORMAT_EAC_R11_SNORM_BLOCK = 154;
    VK_FORMAT_EAC_R11G11_UNORM_BLOCK = 155;
    VK_FORMAT_EAC_R11G11_SNORM_BLOCK = 156;
    VK_FORMAT_ASTC_4x4_UNORM_BLOCK = 157;
    VK_FORMAT_ASTC_4x4_SRGB_BLOCK = 158;
    VK_FORMAT_ASTC_5x4_UNORM_BLOCK = 159;
    VK_FORMAT_ASTC_5x4_SRGB_BLOCK = 160;
    VK_FORMAT_ASTC_5x5_UNORM_BLOCK = 161;
    VK_FORMAT_ASTC_5x5_SRGB_BLOCK = 162;
    VK_FORMAT_ASTC_6x5_UNORM_BLOCK = 163;
    VK_FORMAT_ASTC_6x5_SRGB_BLOCK = 164;
    VK_FORMAT_ASTC_6x6_UNORM_BLOCK = 165;
    VK_FORMAT_ASTC_6x6_SRGB_BLOCK = 166;
    VK_FORMAT_ASTC_8x5_UNORM_BLOCK = 167;
    VK_FORMAT_ASTC_8x5_SRGB_BLOCK = 168;
    VK_FORMAT_ASTC_8x6_UNORM_BLOCK = 169;
    VK_FORMAT_ASTC_8x6_SRGB_BLOCK = 170;
    VK_FORMAT_ASTC_8x8_UNORM_BLOCK = 171;
    VK_FORMAT_ASTC_8x8_SRGB_BLOCK = 172;
    VK_FORMAT_ASTC_10x5_UNORM_BLOCK = 173;
    VK_FORMAT_ASTC_10x5_SRGB_BLOCK = 174;
    VK_FORMAT_ASTC_10x6_UNORM_BLOCK = 175;
    VK_FORMAT_ASTC_10x6_SRGB_BLOCK = 176;
    VK_FORMAT_ASTC_10x8_UNORM_BLOCK = 177;
    VK_FORMAT_ASTC_10x8_SRGB_BLOCK = 178;
    VK_FORMAT_ASTC_10x10_UNORM_BLOCK = 179;
    VK_FORMAT_ASTC_10x10_SRGB_BLOCK = 180;
    VK_FORMAT_ASTC_12x10_UNORM_BLOCK = 181;
    VK_FORMAT_ASTC_12x10_SRGB_BLOCK = 182;
    VK_FORMAT_ASTC_12x12_UNORM_BLOCK = 183;
    VK_FORMAT_ASTC_12x12_SRGB_BLOCK = 184;
    VK_FORMAT_G8B8G8R8_422_UNORM = 1000156000;
    VK_FORMAT_B8G8R8G8_422_UNORM = 1000156001;
    VK_FORMAT_G8_B8_R8_3PLANE_420_UNORM = 1000156002;
    VK_FORMAT_G8_B8R8_2PLANE_420_UNORM = 1000156003;
    VK_FORMAT_G8_B8_R8_3PLANE_422_UNORM = 1000156004;
    VK_FORMAT_G8_B8R8_2PLANE_422_UNORM = 1000156005;
    VK_FORMAT_G8_B8_R8_3PLANE_444_UNORM = 1000156006;
    VK_FORMAT_R10X6_UNORM_PACK16 = 1000156007;
    VK_FORMAT_R10X6G10X6_UNORM_2PACK16 = 1000156008;
    VK_FORMAT_R10X6G10X6B10X6A10X6_UNORM_4PACK16 = 1000156009;
    VK_FORMAT_G10X6B10X6G10X6R10X6_422_UNORM_4PACK16 = 1000156010;
    VK_FORMAT_B10X6G10X6R10X6G10X6_422_UNORM_4PACK16 = 1000156011;
    VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_420_UNORM_3PACK16 = 1000156012;
    VK_FORMAT_G10X6_B10X6R10X6_2PLANE_420_UNORM_3PACK16 = 1000156013;
    VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_422_UNORM_3PACK16 = 1000156014;
    VK_FORMAT_G10X6_B10X6R10X6_2PLANE_422_UNORM_3PACK16 = 1000156015;
    VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_444_UNORM_3PACK16 = 1000156016;
    VK_FORMAT_R12X4_UNORM_PACK16 = 1000156017;
    VK_FORMAT_R12X4G12X4_UNORM_2PACK16 = 1000156018;
    VK_FORMAT_R12X4G12X4B12X4A12X4_UNORM_4PACK16 = 1000156019;
    VK_FORMAT_G12X4B12X4G12X4R12X4_422_UNORM_4PACK16 = 1000156020;
    VK_FORMAT_B12X4G12X4R12X4G12X4_422_UNORM_4PACK16 = 1000156021;
    VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_420_UNORM_3PACK16 = 1000156022;
    VK_FORMAT_G12X4_B12X4R12X4_2PLANE_420_UNORM_3PACK16 = 1000156023;
    VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_422_UNORM_3PACK16 = 1000156024;
    VK_FORMAT_G12X4_B12X4R12X4_2PLANE_422_UNORM_3PACK16 = 1000156025;
    VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_444_UNORM_3PACK16 = 1000156026;
    VK_FORMAT_G16B16G16R16_422_UNORM = 1000156027;
    VK_FORMAT_B16G16R16G16_422_UNORM = 1000156028;
    VK_FORMAT_G16_B16_R16_3PLANE_420_UNORM = 1000156029;
    VK_FORMAT_G16_B16R16_2PLANE_420_UNORM = 1000156030;
    VK_FORMAT_G16_B16_R16_3PLANE_422_UNORM = 1000156031;
    VK_FORMAT_G16_B16R16_2PLANE_422_UNORM = 1000156032;
    VK_FORMAT_G16_B16_R16_3PLANE_444_UNORM = 1000156033;
    VK_FORMAT_PVRTC1_2BPP_UNORM_BLOCK_IMG = 1000054000;
    VK_FORMAT_PVRTC1_4BPP_UNORM_BLOCK_IMG = 1000054001;
    VK_FORMAT_PVRTC2_2BPP_UNORM_BLOCK_IMG = 1000054002;
    VK_FORMAT_PVRTC2_4BPP_UNORM_BLOCK_IMG = 1000054003;
    VK_FORMAT_PVRTC1_2BPP_SRGB_BLOCK_IMG = 1000054004;
    VK_FORMAT_PVRTC1_4BPP_SRGB_BLOCK_IMG = 1000054005;
    VK_FORMAT_PVRTC2_2BPP_SRGB_BLOCK_IMG = 1000054006;
    VK_FORMAT_PVRTC2_4BPP_SRGB_BLOCK_IMG = 1000054007;
    VK_FORMAT_ASTC_4x4_SFLOAT_BLOCK_EXT = 1000066000;
    VK_FORMAT_ASTC_5x4_SFLOAT_BLOCK_EXT = 1000066001;
    VK_FORMAT_ASTC_5x5_SFLOAT_BLOCK_EXT = 1000066002;
    VK_FORMAT_ASTC_6x5_SFLOAT_BLOCK_EXT = 1000066003;
    VK_FORMAT_ASTC_6x6_SFLOAT_BLOCK_EXT = 1000066004;
    VK_FORMAT_ASTC_8x5_SFLOAT_BLOCK_EXT = 1000066005;
    VK_FORMAT_ASTC_8x6_SFLOAT_BLOCK_EXT = 1000066006;
    VK_FORMAT_ASTC_8x8_SFLOAT_BLOCK_EXT = 1000066007;
    VK_FORMAT_ASTC_10x5_SFLOAT_BLOCK_EXT = 1000066008;
    VK_FORMAT_ASTC_10x6_SFLOAT_BLOCK_EXT = 1000066009;
    VK_FORMAT_ASTC_10x8_SFLOAT_BLOCK_EXT = 1000066010;
    VK_FORMAT_ASTC_10x10_SFLOAT_BLOCK_EXT = 1000066011;
    VK_FORMAT_ASTC_12x10_SFLOAT_BLOCK_EXT = 1000066012;
    VK_FORMAT_ASTC_12x12_SFLOAT_BLOCK_EXT = 1000066013;
    VK_FORMAT_G8_B8R8_2PLANE_444_UNORM_EXT = 1000330000;
    VK_FORMAT_G10X6_B10X6R10X6_2PLANE_444_UNORM_3PACK16_EXT = 1000330001;
    VK_FORMAT_G12X4_B12X4R12X4_2PLANE_444_UNORM_3PACK16_EXT = 1000330002;
    VK_FORMAT_G16_B16R16_2PLANE_444_UNORM_EXT = 1000330003;
    VK_FORMAT_A4R4G4B4_UNORM_PACK16_EXT = 1000340000;
    VK_FORMAT_A4B4G4R4_UNORM_PACK16_EXT = 1000340001;
    VK_FORMAT_G8B8G8R8_422_UNORM_KHR = VK_FORMAT_G8B8G8R8_422_UNORM;
    VK_FORMAT_B8G8R8G8_422_UNORM_KHR = VK_FORMAT_B8G8R8G8_422_UNORM;
    VK_FORMAT_G8_B8_R8_3PLANE_420_UNORM_KHR = VK_FORMAT_G8_B8_R8_3PLANE_420_UNORM;
    VK_FORMAT_G8_B8R8_2PLANE_420_UNORM_KHR = VK_FORMAT_G8_B8R8_2PLANE_420_UNORM;
    VK_FORMAT_G8_B8_R8_3PLANE_422_UNORM_KHR = VK_FORMAT_G8_B8_R8_3PLANE_422_UNORM;
    VK_FORMAT_G8_B8R8_2PLANE_422_UNORM_KHR = VK_FORMAT_G8_B8R8_2PLANE_422_UNORM;
    VK_FORMAT_G8_B8_R8_3PLANE_444_UNORM_KHR = VK_FORMAT_G8_B8_R8_3PLANE_444_UNORM;
    VK_FORMAT_R10X6_UNORM_PACK16_KHR = VK_FORMAT_R10X6_UNORM_PACK16;
    VK_FORMAT_R10X6G10X6_UNORM_2PACK16_KHR = VK_FORMAT_R10X6G10X6_UNORM_2PACK16;
    VK_FORMAT_R10X6G10X6B10X6A10X6_UNORM_4PACK16_KHR = VK_FORMAT_R10X6G10X6B10X6A10X6_UNORM_4PACK16;
    VK_FORMAT_G10X6B10X6G10X6R10X6_422_UNORM_4PACK16_KHR = VK_FORMAT_G10X6B10X6G10X6R10X6_422_UNORM_4PACK16;
    VK_FORMAT_B10X6G10X6R10X6G10X6_422_UNORM_4PACK16_KHR = VK_FORMAT_B10X6G10X6R10X6G10X6_422_UNORM_4PACK16;
    VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_420_UNORM_3PACK16_KHR = VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_420_UNORM_3PACK16;
    VK_FORMAT_G10X6_B10X6R10X6_2PLANE_420_UNORM_3PACK16_KHR = VK_FORMAT_G10X6_B10X6R10X6_2PLANE_420_UNORM_3PACK16;
    VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_422_UNORM_3PACK16_KHR = VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_422_UNORM_3PACK16;
    VK_FORMAT_G10X6_B10X6R10X6_2PLANE_422_UNORM_3PACK16_KHR = VK_FORMAT_G10X6_B10X6R10X6_2PLANE_422_UNORM_3PACK16;
    VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_444_UNORM_3PACK16_KHR = VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_444_UNORM_3PACK16;
    VK_FORMAT_R12X4_UNORM_PACK16_KHR = VK_FORMAT_R12X4_UNORM_PACK16;
    VK_FORMAT_R12X4G12X4_UNORM_2PACK16_KHR = VK_FORMAT_R12X4G12X4_UNORM_2PACK16;
    VK_FORMAT_R12X4G12X4B12X4A12X4_UNORM_4PACK16_KHR = VK_FORMAT_R12X4G12X4B12X4A12X4_UNORM_4PACK16;
    VK_FORMAT_G12X4B12X4G12X4R12X4_422_UNORM_4PACK16_KHR = VK_FORMAT_G12X4B12X4G12X4R12X4_422_UNORM_4PACK16;
    VK_FORMAT_B12X4G12X4R12X4G12X4_422_UNORM_4PACK16_KHR = VK_FORMAT_B12X4G12X4R12X4G12X4_422_UNORM_4PACK16;
    VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_420_UNORM_3PACK16_KHR = VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_420_UNORM_3PACK16;
    VK_FORMAT_G12X4_B12X4R12X4_2PLANE_420_UNORM_3PACK16_KHR = VK_FORMAT_G12X4_B12X4R12X4_2PLANE_420_UNORM_3PACK16;
    VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_422_UNORM_3PACK16_KHR = VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_422_UNORM_3PACK16;
    VK_FORMAT_G12X4_B12X4R12X4_2PLANE_422_UNORM_3PACK16_KHR = VK_FORMAT_G12X4_B12X4R12X4_2PLANE_422_UNORM_3PACK16;
    VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_444_UNORM_3PACK16_KHR = VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_444_UNORM_3PACK16;
    VK_FORMAT_G16B16G16R16_422_UNORM_KHR = VK_FORMAT_G16B16G16R16_422_UNORM;
    VK_FORMAT_B16G16R16G16_422_UNORM_KHR = VK_FORMAT_B16G16R16G16_422_UNORM;
    VK_FORMAT_G16_B16_R16_3PLANE_420_UNORM_KHR = VK_FORMAT_G16_B16_R16_3PLANE_420_UNORM;
    VK_FORMAT_G16_B16R16_2PLANE_420_UNORM_KHR = VK_FORMAT_G16_B16R16_2PLANE_420_UNORM;
    VK_FORMAT_G16_B16_R16_3PLANE_422_UNORM_KHR = VK_FORMAT_G16_B16_R16_3PLANE_422_UNORM;
    VK_FORMAT_G16_B16R16_2PLANE_422_UNORM_KHR = VK_FORMAT_G16_B16R16_2PLANE_422_UNORM;
    VK_FORMAT_G16_B16_R16_3PLANE_444_UNORM_KHR = VK_FORMAT_G16_B16_R16_3PLANE_444_UNORM;
    VK_FORMAT_MAX_ENUM = 0x7FFFFFFF;
}

enum VkImageTiling {
    VK_IMAGE_TILING_OPTIMAL = 0;
    VK_IMAGE_TILING_LINEAR = 1;
    VK_IMAGE_TILING_DRM_FORMAT_MODIFIER_EXT = 1000158000;
    VK_IMAGE_TILING_MAX_ENUM = 0x7FFFFFFF;
}

enum VkImageType {
    VK_IMAGE_TYPE_1D = 0;
    VK_IMAGE_TYPE_2D = 1;
    VK_IMAGE_TYPE_3D = 2;
    VK_IMAGE_TYPE_MAX_ENUM = 0x7FFFFFFF;
}

enum VkPhysicalDeviceType {
    VK_PHYSICAL_DEVICE_TYPE_OTHER = 0;
    VK_PHYSICAL_DEVICE_TYPE_INTEGRATED_GPU = 1;
    VK_PHYSICAL_DEVICE_TYPE_DISCRETE_GPU = 2;
    VK_PHYSICAL_DEVICE_TYPE_VIRTUAL_GPU = 3;
    VK_PHYSICAL_DEVICE_TYPE_CPU = 4;
    VK_PHYSICAL_DEVICE_TYPE_MAX_ENUM = 0x7FFFFFFF;
}

enum VkQueryType {
    VK_QUERY_TYPE_OCCLUSION = 0;
    VK_QUERY_TYPE_PIPELINE_STATISTICS = 1;
    VK_QUERY_TYPE_TIMESTAMP = 2;
    VK_QUERY_TYPE_TRANSFORM_FEEDBACK_STREAM_EXT = 1000028004;
    VK_QUERY_TYPE_PERFORMANCE_QUERY_KHR = 1000116000;
    VK_QUERY_TYPE_ACCELERATION_STRUCTURE_COMPACTED_SIZE_KHR = 1000150000;
    VK_QUERY_TYPE_ACCELERATION_STRUCTURE_SERIALIZATION_SIZE_KHR = 1000150001;
    VK_QUERY_TYPE_ACCELERATION_STRUCTURE_COMPACTED_SIZE_NV = 1000165000;
    VK_QUERY_TYPE_PERFORMANCE_QUERY_INTEL = 1000210000;
    VK_QUERY_TYPE_MAX_ENUM = 0x7FFFFFFF;
}

enum VkSharingMode {
    VK_SHARING_MODE_EXCLUSIVE = 0;
    VK_SHARING_MODE_CONCURRENT = 1;
    VK_SHARING_MODE_MAX_ENUM = 0x7FFFFFFF;
}

enum VkComponentSwizzle {
    VK_COMPONENT_SWIZZLE_IDENTITY = 0;
    VK_COMPONENT_SWIZZLE_ZERO = 1;
    VK_COMPONENT_SWIZZLE_ONE = 2;
    VK_COMPONENT_SWIZZLE_R = 3;
    VK_COMPONENT_SWIZZLE_G = 4;
    VK_COMPONENT_SWIZZLE_B = 5;
    VK_COMPONENT_SWIZZLE_A = 6;
    VK_COMPONENT_SWIZZLE_MAX_ENUM = 0x7FFFFFFF;
}

enum VkImageViewType {
    VK_IMAGE_VIEW_TYPE_1D = 0;
    VK_IMAGE_VIEW_TYPE_2D = 1;
    VK_IMAGE_VIEW_TYPE_3D = 2;
    VK_IMAGE_VIEW_TYPE_CUBE = 3;
    VK_IMAGE_VIEW_TYPE_1D_ARRAY = 4;
    VK_IMAGE_VIEW_TYPE_2D_ARRAY = 5;
    VK_IMAGE_VIEW_TYPE_CUBE_ARRAY = 6;
    VK_IMAGE_VIEW_TYPE_MAX_ENUM = 0x7FFFFFFF;
}

enum VkBlendFactor {
    VK_BLEND_FACTOR_ZERO = 0;
    VK_BLEND_FACTOR_ONE = 1;
    VK_BLEND_FACTOR_SRC_COLOR = 2;
    VK_BLEND_FACTOR_ONE_MINUS_SRC_COLOR = 3;
    VK_BLEND_FACTOR_DST_COLOR = 4;
    VK_BLEND_FACTOR_ONE_MINUS_DST_COLOR = 5;
    VK_BLEND_FACTOR_SRC_ALPHA = 6;
    VK_BLEND_FACTOR_ONE_MINUS_SRC_ALPHA = 7;
    VK_BLEND_FACTOR_DST_ALPHA = 8;
    VK_BLEND_FACTOR_ONE_MINUS_DST_ALPHA = 9;
    VK_BLEND_FACTOR_CONSTANT_COLOR = 10;
    VK_BLEND_FACTOR_ONE_MINUS_CONSTANT_COLOR = 11;
    VK_BLEND_FACTOR_CONSTANT_ALPHA = 12;
    VK_BLEND_FACTOR_ONE_MINUS_CONSTANT_ALPHA = 13;
    VK_BLEND_FACTOR_SRC_ALPHA_SATURATE = 14;
    VK_BLEND_FACTOR_SRC1_COLOR = 15;
    VK_BLEND_FACTOR_ONE_MINUS_SRC1_COLOR = 16;
    VK_BLEND_FACTOR_SRC1_ALPHA = 17;
    VK_BLEND_FACTOR_ONE_MINUS_SRC1_ALPHA = 18;
    VK_BLEND_FACTOR_MAX_ENUM = 0x7FFFFFFF;
}

enum VkBlendOp {
    VK_BLEND_OP_ADD = 0;
    VK_BLEND_OP_SUBTRACT = 1;
    VK_BLEND_OP_REVERSE_SUBTRACT = 2;
    VK_BLEND_OP_MIN = 3;
    VK_BLEND_OP_MAX = 4;
    VK_BLEND_OP_ZERO_EXT = 1000148000;
    VK_BLEND_OP_SRC_EXT = 1000148001;
    VK_BLEND_OP_DST_EXT = 1000148002;
    VK_BLEND_OP_SRC_OVER_EXT = 1000148003;
    VK_BLEND_OP_DST_OVER_EXT = 1000148004;
    VK_BLEND_OP_SRC_IN_EXT = 1000148005;
    VK_BLEND_OP_DST_IN_EXT = 1000148006;
    VK_BLEND_OP_SRC_OUT_EXT = 1000148007;
    VK_BLEND_OP_DST_OUT_EXT = 1000148008;
    VK_BLEND_OP_SRC_ATOP_EXT = 1000148009;
    VK_BLEND_OP_DST_ATOP_EXT = 1000148010;
    VK_BLEND_OP_XOR_EXT = 1000148011;
    VK_BLEND_OP_MULTIPLY_EXT = 1000148012;
    VK_BLEND_OP_SCREEN_EXT = 1000148013;
    VK_BLEND_OP_OVERLAY_EXT = 1000148014;
    VK_BLEND_OP_DARKEN_EXT = 1000148015;
    VK_BLEND_OP_LIGHTEN_EXT = 1000148016;
    VK_BLEND_OP_COLORDODGE_EXT = 1000148017;
    VK_BLEND_OP_COLORBURN_EXT = 1000148018;
    VK_BLEND_OP_HARDLIGHT_EXT = 1000148019;
    VK_BLEND_OP_SOFTLIGHT_EXT = 1000148020;
    VK_BLEND_OP_DIFFERENCE_EXT = 1000148021;
    VK_BLEND_OP_EXCLUSION_EXT = 1000148022;
    VK_BLEND_OP_INVERT_EXT = 1000148023;
    VK_BLEND_OP_INVERT_RGB_EXT = 1000148024;
    VK_BLEND_OP_LINEARDODGE_EXT = 1000148025;
    VK_BLEND_OP_LINEARBURN_EXT = 1000148026;
    VK_BLEND_OP_VIVIDLIGHT_EXT = 1000148027;
    VK_BLEND_OP_LINEARLIGHT_EXT = 1000148028;
    VK_BLEND_OP_PINLIGHT_EXT = 1000148029;
    VK_BLEND_OP_HARDMIX_EXT = 1000148030;
    VK_BLEND_OP_HSL_HUE_EXT = 1000148031;
    VK_BLEND_OP_HSL_SATURATION_EXT = 1000148032;
    VK_BLEND_OP_HSL_COLOR_EXT = 1000148033;
    VK_BLEND_OP_HSL_LUMINOSITY_EXT = 1000148034;
    VK_BLEND_OP_PLUS_EXT = 1000148035;
    VK_BLEND_OP_PLUS_CLAMPED_EXT = 1000148036;
    VK_BLEND_OP_PLUS_CLAMPED_ALPHA_EXT = 1000148037;
    VK_BLEND_OP_PLUS_DARKER_EXT = 1000148038;
    VK_BLEND_OP_MINUS_EXT = 1000148039;
    VK_BLEND_OP_MINUS_CLAMPED_EXT = 1000148040;
    VK_BLEND_OP_CONTRAST_EXT = 1000148041;
    VK_BLEND_OP_INVERT_OVG_EXT = 1000148042;
    VK_BLEND_OP_RED_EXT = 1000148043;
    VK_BLEND_OP_GREEN_EXT = 1000148044;
    VK_BLEND_OP_BLUE_EXT = 1000148045;
    VK_BLEND_OP_MAX_ENUM = 0x7FFFFFFF;
}

enum VkCompareOp {
    VK_COMPARE_OP_NEVER = 0;
    VK_COMPARE_OP_LESS = 1;
    VK_COMPARE_OP_EQUAL = 2;
    VK_COMPARE_OP_LESS_OR_EQUAL = 3;
    VK_COMPARE_OP_GREATER = 4;
    VK_COMPARE_OP_NOT_EQUAL = 5;
    VK_COMPARE_OP_GREATER_OR_EQUAL = 6;
    VK_COMPARE_OP_ALWAYS = 7;
    VK_COMPARE_OP_MAX_ENUM = 0x7FFFFFFF;
}

enum VkDynamicState {
    VK_DYNAMIC_STATE_VIEWPORT = 0;
    VK_DYNAMIC_STATE_SCISSOR = 1;
    VK_DYNAMIC_STATE_LINE_WIDTH = 2;
    VK_DYNAMIC_STATE_DEPTH_BIAS = 3;
    VK_DYNAMIC_STATE_BLEND_CONSTANTS = 4;
    VK_DYNAMIC_STATE_DEPTH_BOUNDS = 5;
    VK_DYNAMIC_STATE_STENCIL_COMPARE_MASK = 6;
    VK_DYNAMIC_STATE_STENCIL_WRITE_MASK = 7;
    VK_DYNAMIC_STATE_STENCIL_REFERENCE = 8;
    VK_DYNAMIC_STATE_VIEWPORT_W_SCALING_NV = 1000087000;
    VK_DYNAMIC_STATE_DISCARD_RECTANGLE_EXT = 1000099000;
    VK_DYNAMIC_STATE_SAMPLE_LOCATIONS_EXT = 1000143000;
    VK_DYNAMIC_STATE_RAY_TRACING_PIPELINE_STACK_SIZE_KHR = 1000347000;
    VK_DYNAMIC_STATE_VIEWPORT_SHADING_RATE_PALETTE_NV = 1000164004;
    VK_DYNAMIC_STATE_VIEWPORT_COARSE_SAMPLE_ORDER_NV = 1000164006;
    VK_DYNAMIC_STATE_EXCLUSIVE_SCISSOR_NV = 1000205001;
    VK_DYNAMIC_STATE_FRAGMENT_SHADING_RATE_KHR = 1000226000;
    VK_DYNAMIC_STATE_LINE_STIPPLE_EXT = 1000259000;
    VK_DYNAMIC_STATE_CULL_MODE_EXT = 1000267000;
    VK_DYNAMIC_STATE_FRONT_FACE_EXT = 1000267001;
    VK_DYNAMIC_STATE_PRIMITIVE_TOPOLOGY_EXT = 1000267002;
    VK_DYNAMIC_STATE_VIEWPORT_WITH_COUNT_EXT = 1000267003;
    VK_DYNAMIC_STATE_SCISSOR_WITH_COUNT_EXT = 1000267004;
    VK_DYNAMIC_STATE_VERTEX_INPUT_BINDING_STRIDE_EXT = 1000267005;
    VK_DYNAMIC_STATE_DEPTH_TEST_ENABLE_EXT = 1000267006;
    VK_DYNAMIC_STATE_DEPTH_WRITE_ENABLE_EXT = 1000267007;
    VK_DYNAMIC_STATE_DEPTH_COMPARE_OP_EXT = 1000267008;
    VK_DYNAMIC_STATE_DEPTH_BOUNDS_TEST_ENABLE_EXT = 1000267009;
    VK_DYNAMIC_STATE_STENCIL_TEST_ENABLE_EXT = 1000267010;
    VK_DYNAMIC_STATE_STENCIL_OP_EXT = 1000267011;
    VK_DYNAMIC_STATE_VERTEX_INPUT_EXT = 1000352000;
    VK_DYNAMIC_STATE_PATCH_CONTROL_POINTS_EXT = 1000377000;
    VK_DYNAMIC_STATE_RASTERIZER_DISCARD_ENABLE_EXT = 1000377001;
    VK_DYNAMIC_STATE_DEPTH_BIAS_ENABLE_EXT = 1000377002;
    VK_DYNAMIC_STATE_LOGIC_OP_EXT = 1000377003;
    VK_DYNAMIC_STATE_PRIMITIVE_RESTART_ENABLE_EXT = 1000377004;
    VK_DYNAMIC_STATE_COLOR_WRITE_ENABLE_EXT = 1000381000;
    VK_DYNAMIC_STATE_MAX_ENUM = 0x7FFFFFFF;
}

enum VkFrontFace {
    VK_FRONT_FACE_COUNTER_CLOCKWISE = 0;
    VK_FRONT_FACE_CLOCKWISE = 1;
    VK_FRONT_FACE_MAX_ENUM = 0x7FFFFFFF;
}

enum VkVertexInputRate {
    VK_VERTEX_INPUT_RATE_VERTEX = 0;
    VK_VERTEX_INPUT_RATE_INSTANCE = 1;
    VK_VERTEX_INPUT_RATE_MAX_ENUM = 0x7FFFFFFF;
}

enum VkPrimitiveTopology {
    VK_PRIMITIVE_TOPOLOGY_POINT_LIST = 0;
    VK_PRIMITIVE_TOPOLOGY_LINE_LIST = 1;
    VK_PRIMITIVE_TOPOLOGY_LINE_STRIP = 2;
    VK_PRIMITIVE_TOPOLOGY_TRIANGLE_LIST = 3;
    VK_PRIMITIVE_TOPOLOGY_TRIANGLE_STRIP = 4;
    VK_PRIMITIVE_TOPOLOGY_TRIANGLE_FAN = 5;
    VK_PRIMITIVE_TOPOLOGY_LINE_LIST_WITH_ADJACENCY = 6;
    VK_PRIMITIVE_TOPOLOGY_LINE_STRIP_WITH_ADJACENCY = 7;
    VK_PRIMITIVE_TOPOLOGY_TRIANGLE_LIST_WITH_ADJACENCY = 8;
    VK_PRIMITIVE_TOPOLOGY_TRIANGLE_STRIP_WITH_ADJACENCY = 9;
    VK_PRIMITIVE_TOPOLOGY_PATCH_LIST = 10;
    VK_PRIMITIVE_TOPOLOGY_MAX_ENUM = 0x7FFFFFFF;
}

enum VkPolygonMode {
    VK_POLYGON_MODE_FILL = 0;
    VK_POLYGON_MODE_LINE = 1;
    VK_POLYGON_MODE_POINT = 2;
    VK_POLYGON_MODE_FILL_RECTANGLE_NV = 1000153000;
    VK_POLYGON_MODE_MAX_ENUM = 0x7FFFFFFF;
}

enum VkStencilOp {
    VK_STENCIL_OP_KEEP = 0;
    VK_STENCIL_OP_ZERO = 1;
    VK_STENCIL_OP_REPLACE = 2;
    VK_STENCIL_OP_INCREMENT_AND_CLAMP = 3;
    VK_STENCIL_OP_DECREMENT_AND_CLAMP = 4;
    VK_STENCIL_OP_INVERT = 5;
    VK_STENCIL_OP_INCREMENT_AND_WRAP = 6;
    VK_STENCIL_OP_DECREMENT_AND_WRAP = 7;
    VK_STENCIL_OP_MAX_ENUM = 0x7FFFFFFF;
}

enum VkLogicOp {
    VK_LOGIC_OP_CLEAR = 0;
    VK_LOGIC_OP_AND = 1;
    VK_LOGIC_OP_AND_REVERSE = 2;
    VK_LOGIC_OP_COPY = 3;
    VK_LOGIC_OP_AND_INVERTED = 4;
    VK_LOGIC_OP_NO_OP = 5;
    VK_LOGIC_OP_XOR = 6;
    VK_LOGIC_OP_OR = 7;
    VK_LOGIC_OP_NOR = 8;
    VK_LOGIC_OP_EQUIVALENT = 9;
    VK_LOGIC_OP_INVERT = 10;
    VK_LOGIC_OP_OR_REVERSE = 11;
    VK_LOGIC_OP_COPY_INVERTED = 12;
    VK_LOGIC_OP_OR_INVERTED = 13;
    VK_LOGIC_OP_NAND = 14;
    VK_LOGIC_OP_SET = 15;
    VK_LOGIC_OP_MAX_ENUM = 0x7FFFFFFF;
}

enum VkBorderColor {
    VK_BORDER_COLOR_FLOAT_TRANSPARENT_BLACK = 0;
    VK_BORDER_COLOR_INT_TRANSPARENT_BLACK = 1;
    VK_BORDER_COLOR_FLOAT_OPAQUE_BLACK = 2;
    VK_BORDER_COLOR_INT_OPAQUE_BLACK = 3;
    VK_BORDER_COLOR_FLOAT_OPAQUE_WHITE = 4;
    VK_BORDER_COLOR_INT_OPAQUE_WHITE = 5;
    VK_BORDER_COLOR_FLOAT_CUSTOM_EXT = 1000287003;
    VK_BORDER_COLOR_INT_CUSTOM_EXT = 1000287004;
    VK_BORDER_COLOR_MAX_ENUM = 0x7FFFFFFF;
}

enum VkFilter {
    VK_FILTER_NEAREST = 0;
    VK_FILTER_LINEAR = 1;
    VK_FILTER_CUBIC_IMG = 1000015000;
    VK_FILTER_CUBIC_EXT = VK_FILTER_CUBIC_IMG;
    VK_FILTER_MAX_ENUM = 0x7FFFFFFF;
}

enum VkSamplerAddressMode {
    VK_SAMPLER_ADDRESS_MODE_REPEAT = 0;
    VK_SAMPLER_ADDRESS_MODE_MIRRORED_REPEAT = 1;
    VK_SAMPLER_ADDRESS_MODE_CLAMP_TO_EDGE = 2;
    VK_SAMPLER_ADDRESS_MODE_CLAMP_TO_BORDER = 3;
    VK_SAMPLER_ADDRESS_MODE_MIRROR_CLAMP_TO_EDGE = 4;
    VK_SAMPLER_ADDRESS_MODE_MIRROR_CLAMP_TO_EDGE_KHR = VK_SAMPLER_ADDRESS_MODE_MIRROR_CLAMP_TO_EDGE;
    VK_SAMPLER_ADDRESS_MODE_MAX_ENUM = 0x7FFFFFFF;
}

enum VkSamplerMipmapMode {
    VK_SAMPLER_MIPMAP_MODE_NEAREST = 0;
    VK_SAMPLER_MIPMAP_MODE_LINEAR = 1;
    VK_SAMPLER_MIPMAP_MODE_MAX_ENUM = 0x7FFFFFFF;
}

enum VkDescriptorType {
    VK_DESCRIPTOR_TYPE_SAMPLER = 0;
    VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER = 1;
    VK_DESCRIPTOR_TYPE_SAMPLED_IMAGE = 2;
    VK_DESCRIPTOR_TYPE_STORAGE_IMAGE = 3;
    VK_DESCRIPTOR_TYPE_UNIFORM_TEXEL_BUFFER = 4;
    VK_DESCRIPTOR_TYPE_STORAGE_TEXEL_BUFFER = 5;
    VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER = 6;
    VK_DESCRIPTOR_TYPE_STORAGE_BUFFER = 7;
    VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER_DYNAMIC = 8;
    VK_DESCRIPTOR_TYPE_STORAGE_BUFFER_DYNAMIC = 9;
    VK_DESCRIPTOR_TYPE_INPUT_ATTACHMENT = 10;
    VK_DESCRIPTOR_TYPE_INLINE_UNIFORM_BLOCK_EXT = 1000138000;
    VK_DESCRIPTOR_TYPE_ACCELERATION_STRUCTURE_KHR = 1000150000;
    VK_DESCRIPTOR_TYPE_ACCELERATION_STRUCTURE_NV = 1000165000;
    VK_DESCRIPTOR_TYPE_MUTABLE_VALVE = 1000351000;
    VK_DESCRIPTOR_TYPE_MAX_ENUM = 0x7FFFFFFF;
}

enum VkAttachmentLoadOp {
    VK_ATTACHMENT_LOAD_OP_LOAD = 0;
    VK_ATTACHMENT_LOAD_OP_CLEAR = 1;
    VK_ATTACHMENT_LOAD_OP_DONT_CARE = 2;
    VK_ATTACHMENT_LOAD_OP_NONE_EXT = 1000400000;
    VK_ATTACHMENT_LOAD_OP_MAX_ENUM = 0x7FFFFFFF;
}

enum VkAttachmentStoreOp {
    VK_ATTACHMENT_STORE_OP_STORE = 0;
    VK_ATTACHMENT_STORE_OP_DONT_CARE = 1;
    VK_ATTACHMENT_STORE_OP_NONE_EXT = 1000301000;
    VK_ATTACHMENT_STORE_OP_NONE_QCOM = VK_ATTACHMENT_STORE_OP_NONE_EXT;
    VK_ATTACHMENT_STORE_OP_MAX_ENUM = 0x7FFFFFFF;
}

enum VkPipelineBindPoint {
    VK_PIPELINE_BIND_POINT_GRAPHICS = 0;
    VK_PIPELINE_BIND_POINT_COMPUTE = 1;
    VK_PIPELINE_BIND_POINT_RAY_TRACING_KHR = 1000165000;
    VK_PIPELINE_BIND_POINT_SUBPASS_SHADING_HUAWEI = 1000369003;
    VK_PIPELINE_BIND_POINT_RAY_TRACING_NV = VK_PIPELINE_BIND_POINT_RAY_TRACING_KHR;
    VK_PIPELINE_BIND_POINT_MAX_ENUM = 0x7FFFFFFF;
}

enum VkCommandBufferLevel {
    VK_COMMAND_BUFFER_LEVEL_PRIMARY = 0;
    VK_COMMAND_BUFFER_LEVEL_SECONDARY = 1;
    VK_COMMAND_BUFFER_LEVEL_MAX_ENUM = 0x7FFFFFFF;
}

enum VkIndexType {
    VK_INDEX_TYPE_UINT16 = 0;
    VK_INDEX_TYPE_UINT32 = 1;
    VK_INDEX_TYPE_NONE_KHR = 1000165000;
    VK_INDEX_TYPE_UINT8_EXT = 1000265000;
    VK_INDEX_TYPE_NONE_NV = VK_INDEX_TYPE_NONE_KHR;
    VK_INDEX_TYPE_MAX_ENUM = 0x7FFFFFFF;
}

enum VkSubpassContents {
    VK_SUBPASS_CONTENTS_INLINE = 0;
    VK_SUBPASS_CONTENTS_SECONDARY_COMMAND_BUFFERS = 1;
    VK_SUBPASS_CONTENTS_MAX_ENUM = 0x7FFFFFFF;
}

enum VkAccessFlagBits {
    VK_ACCESS_INDIRECT_COMMAND_READ_BIT = 0x00000001;
    VK_ACCESS_INDEX_READ_BIT = 0x00000002;
    VK_ACCESS_VERTEX_ATTRIBUTE_READ_BIT = 0x00000004;
    VK_ACCESS_UNIFORM_READ_BIT = 0x00000008;
    VK_ACCESS_INPUT_ATTACHMENT_READ_BIT = 0x00000010;
    VK_ACCESS_SHADER_READ_BIT = 0x00000020;
    VK_ACCESS_SHADER_WRITE_BIT = 0x00000040;
    VK_ACCESS_COLOR_ATTACHMENT_READ_BIT = 0x00000080;
    VK_ACCESS_COLOR_ATTACHMENT_WRITE_BIT = 0x00000100;
    VK_ACCESS_DEPTH_STENCIL_ATTACHMENT_READ_BIT = 0x00000200;
    VK_ACCESS_DEPTH_STENCIL_ATTACHMENT_WRITE_BIT = 0x00000400;
    VK_ACCESS_TRANSFER_READ_BIT = 0x00000800;
    VK_ACCESS_TRANSFER_WRITE_BIT = 0x00001000;
    VK_ACCESS_HOST_READ_BIT = 0x00002000;
    VK_ACCESS_HOST_WRITE_BIT = 0x00004000;
    VK_ACCESS_MEMORY_READ_BIT = 0x00008000;
    VK_ACCESS_MEMORY_WRITE_BIT = 0x00010000;
    VK_ACCESS_TRANSFORM_FEEDBACK_WRITE_BIT_EXT = 0x02000000;
    VK_ACCESS_TRANSFORM_FEEDBACK_COUNTER_READ_BIT_EXT = 0x04000000;
    VK_ACCESS_TRANSFORM_FEEDBACK_COUNTER_WRITE_BIT_EXT = 0x08000000;
    VK_ACCESS_CONDITIONAL_RENDERING_READ_BIT_EXT = 0x00100000;
    VK_ACCESS_COLOR_ATTACHMENT_READ_NONCOHERENT_BIT_EXT = 0x00080000;
    VK_ACCESS_ACCELERATION_STRUCTURE_READ_BIT_KHR = 0x00200000;
    VK_ACCESS_ACCELERATION_STRUCTURE_WRITE_BIT_KHR = 0x00400000;
    VK_ACCESS_FRAGMENT_DENSITY_MAP_READ_BIT_EXT = 0x01000000;
    VK_ACCESS_FRAGMENT_SHADING_RATE_ATTACHMENT_READ_BIT_KHR = 0x00800000;
    VK_ACCESS_COMMAND_PREPROCESS_READ_BIT_NV = 0x00020000;
    VK_ACCESS_COMMAND_PREPROCESS_WRITE_BIT_NV = 0x00040000;
    VK_ACCESS_NONE_KHR = 0;
    VK_ACCESS_SHADING_RATE_IMAGE_READ_BIT_NV = VK_ACCESS_FRAGMENT_SHADING_RATE_ATTACHMENT_READ_BIT_KHR;
    VK_ACCESS_ACCELERATION_STRUCTURE_READ_BIT_NV = VK_ACCESS_ACCELERATION_STRUCTURE_READ_BIT_KHR;
    VK_ACCESS_ACCELERATION_STRUCTURE_WRITE_BIT_NV = VK_ACCESS_ACCELERATION_STRUCTURE_WRITE_BIT_KHR;
    VK_ACCESS_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF;
}

enum VkImageAspectFlagBits {
    VK_IMAGE_ASPECT_COLOR_BIT = 0x00000001;
    VK_IMAGE_ASPECT_DEPTH_BIT = 0x00000002;
    VK_IMAGE_ASPECT_STENCIL_BIT = 0x00000004;
    VK_IMAGE_ASPECT_METADATA_BIT = 0x00000008;
    VK_IMAGE_ASPECT_PLANE_0_BIT = 0x00000010;
    VK_IMAGE_ASPECT_PLANE_1_BIT = 0x00000020;
    VK_IMAGE_ASPECT_PLANE_2_BIT = 0x00000040;
    VK_IMAGE_ASPECT_MEMORY_PLANE_0_BIT_EXT = 0x00000080;
    VK_IMAGE_ASPECT_MEMORY_PLANE_1_BIT_EXT = 0x00000100;
    VK_IMAGE_ASPECT_MEMORY_PLANE_2_BIT_EXT = 0x00000200;
    VK_IMAGE_ASPECT_MEMORY_PLANE_3_BIT_EXT = 0x00000400;
    VK_IMAGE_ASPECT_PLANE_0_BIT_KHR = VK_IMAGE_ASPECT_PLANE_0_BIT;
    VK_IMAGE_ASPECT_PLANE_1_BIT_KHR = VK_IMAGE_ASPECT_PLANE_1_BIT;
    VK_IMAGE_ASPECT_PLANE_2_BIT_KHR = VK_IMAGE_ASPECT_PLANE_2_BIT;
    VK_IMAGE_ASPECT_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF;
}

enum VkFormatFeatureFlagBits {
    VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT = 0x00000001;
    VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT = 0x00000002;
    VK_FORMAT_FEATURE_STORAGE_IMAGE_ATOMIC_BIT = 0x00000004;
    VK_FORMAT_FEATURE_UNIFORM_TEXEL_BUFFER_BIT = 0x00000008;
    VK_FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_BIT = 0x00000010;
    VK_FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_ATOMIC_BIT = 0x00000020;
    VK_FORMAT_FEATURE_VERTEX_BUFFER_BIT = 0x00000040;
    VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT = 0x00000080;
    VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BLEND_BIT = 0x00000100;
    VK_FORMAT_FEATURE_DEPTH_STENCIL_ATTACHMENT_BIT = 0x00000200;
    VK_FORMAT_FEATURE_BLIT_SRC_BIT = 0x00000400;
    VK_FORMAT_FEATURE_BLIT_DST_BIT = 0x00000800;
    VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT = 0x00001000;
    VK_FORMAT_FEATURE_TRANSFER_SRC_BIT = 0x00004000;
    VK_FORMAT_FEATURE_TRANSFER_DST_BIT = 0x00008000;
    VK_FORMAT_FEATURE_MIDPOINT_CHROMA_SAMPLES_BIT = 0x00020000;
    VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_LINEAR_FILTER_BIT = 0x00040000;
    VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_SEPARATE_RECONSTRUCTION_FILTER_BIT = 0x00080000;
    VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_BIT = 0x00100000;
    VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_FORCEABLE_BIT = 0x00200000;
    VK_FORMAT_FEATURE_DISJOINT_BIT = 0x00400000;
    VK_FORMAT_FEATURE_COSITED_CHROMA_SAMPLES_BIT = 0x00800000;
    VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT = 0x00010000;
    VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_CUBIC_BIT_IMG = 0x00002000;
    VK_FORMAT_FEATURE_ACCELERATION_STRUCTURE_VERTEX_BUFFER_BIT_KHR = 0x20000000;
    VK_FORMAT_FEATURE_FRAGMENT_DENSITY_MAP_BIT_EXT = 0x01000000;
    VK_FORMAT_FEATURE_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR = 0x40000000;
    VK_FORMAT_FEATURE_TRANSFER_SRC_BIT_KHR = VK_FORMAT_FEATURE_TRANSFER_SRC_BIT;
    VK_FORMAT_FEATURE_TRANSFER_DST_BIT_KHR = VK_FORMAT_FEATURE_TRANSFER_DST_BIT;
    VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT_EXT = VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT;
    VK_FORMAT_FEATURE_MIDPOINT_CHROMA_SAMPLES_BIT_KHR = VK_FORMAT_FEATURE_MIDPOINT_CHROMA_SAMPLES_BIT;
    VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_LINEAR_FILTER_BIT_KHR = VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_LINEAR_FILTER_BIT;
    VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_SEPARATE_RECONSTRUCTION_FILTER_BIT_KHR = VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_SEPARATE_RECONSTRUCTION_FILTER_BIT;
    VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_BIT_KHR = VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_BIT;
    VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_FORCEABLE_BIT_KHR = VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_FORCEABLE_BIT;
    VK_FORMAT_FEATURE_DISJOINT_BIT_KHR = VK_FORMAT_FEATURE_DISJOINT_BIT;
    VK_FORMAT_FEATURE_COSITED_CHROMA_SAMPLES_BIT_KHR = VK_FORMAT_FEATURE_COSITED_CHROMA_SAMPLES_BIT;
    VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_CUBIC_BIT_EXT = VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_CUBIC_BIT_IMG;
    VK_FORMAT_FEATURE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF;
}

enum VkImageCreateFlagBits {
    VK_IMAGE_CREATE_SPARSE_BINDING_BIT = 0x00000001;
    VK_IMAGE_CREATE_SPARSE_RESIDENCY_BIT = 0x00000002;
    VK_IMAGE_CREATE_SPARSE_ALIASED_BIT = 0x00000004;
    VK_IMAGE_CREATE_MUTABLE_FORMAT_BIT = 0x00000008;
    VK_IMAGE_CREATE_CUBE_COMPATIBLE_BIT = 0x00000010;
    VK_IMAGE_CREATE_ALIAS_BIT = 0x00000400;
    VK_IMAGE_CREATE_SPLIT_INSTANCE_BIND_REGIONS_BIT = 0x00000040;
    VK_IMAGE_CREATE_2D_ARRAY_COMPATIBLE_BIT = 0x00000020;
    VK_IMAGE_CREATE_BLOCK_TEXEL_VIEW_COMPATIBLE_BIT = 0x00000080;
    VK_IMAGE_CREATE_EXTENDED_USAGE_BIT = 0x00000100;
    VK_IMAGE_CREATE_PROTECTED_BIT = 0x00000800;
    VK_IMAGE_CREATE_DISJOINT_BIT = 0x00000200;
    VK_IMAGE_CREATE_CORNER_SAMPLED_BIT_NV = 0x00002000;
    VK_IMAGE_CREATE_SAMPLE_LOCATIONS_COMPATIBLE_DEPTH_BIT_EXT = 0x00001000;
    VK_IMAGE_CREATE_SUBSAMPLED_BIT_EXT = 0x00004000;
    VK_IMAGE_CREATE_SPLIT_INSTANCE_BIND_REGIONS_BIT_KHR = VK_IMAGE_CREATE_SPLIT_INSTANCE_BIND_REGIONS_BIT;
    VK_IMAGE_CREATE_2D_ARRAY_COMPATIBLE_BIT_KHR = VK_IMAGE_CREATE_2D_ARRAY_COMPATIBLE_BIT;
    VK_IMAGE_CREATE_BLOCK_TEXEL_VIEW_COMPATIBLE_BIT_KHR = VK_IMAGE_CREATE_BLOCK_TEXEL_VIEW_COMPATIBLE_BIT;
    VK_IMAGE_CREATE_EXTENDED_USAGE_BIT_KHR = VK_IMAGE_CREATE_EXTENDED_USAGE_BIT;
    VK_IMAGE_CREATE_DISJOINT_BIT_KHR = VK_IMAGE_CREATE_DISJOINT_BIT;
    VK_IMAGE_CREATE_ALIAS_BIT_KHR = VK_IMAGE_CREATE_ALIAS_BIT;
    VK_IMAGE_CREATE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF;
}

enum VkSampleCountFlagBits {
    VK_SAMPLE_COUNT_1_BIT = 0x00000001;
    VK_SAMPLE_COUNT_2_BIT = 0x00000002;
    VK_SAMPLE_COUNT_4_BIT = 0x00000004;
    VK_SAMPLE_COUNT_8_BIT = 0x00000008;
    VK_SAMPLE_COUNT_16_BIT = 0x00000010;
    VK_SAMPLE_COUNT_32_BIT = 0x00000020;
    VK_SAMPLE_COUNT_64_BIT = 0x00000040;
    VK_SAMPLE_COUNT_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF;
}

enum VkImageUsageFlagBits {
    VK_IMAGE_USAGE_TRANSFER_SRC_BIT = 0x00000001;
    VK_IMAGE_USAGE_TRANSFER_DST_BIT = 0x00000002;
    VK_IMAGE_USAGE_SAMPLED_BIT = 0x00000004;
    VK_IMAGE_USAGE_STORAGE_BIT = 0x00000008;
    VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT = 0x00000010;
    VK_IMAGE_USAGE_DEPTH_STENCIL_ATTACHMENT_BIT = 0x00000020;
    VK_IMAGE_USAGE_TRANSIENT_ATTACHMENT_BIT = 0x00000040;
    VK_IMAGE_USAGE_INPUT_ATTACHMENT_BIT = 0x00000080;
    VK_IMAGE_USAGE_FRAGMENT_DENSITY_MAP_BIT_EXT = 0x00000200;
    VK_IMAGE_USAGE_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR = 0x00000100;
    VK_IMAGE_USAGE_INVOCATION_MASK_BIT_HUAWEI = 0x00040000;
    VK_IMAGE_USAGE_SHADING_RATE_IMAGE_BIT_NV = VK_IMAGE_USAGE_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR;
    VK_IMAGE_USAGE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF;
}

enum VkMemoryHeapFlagBits {
    VK_MEMORY_HEAP_DEVICE_LOCAL_BIT = 0x00000001;
    VK_MEMORY_HEAP_MULTI_INSTANCE_BIT = 0x00000002;
    VK_MEMORY_HEAP_MULTI_INSTANCE_BIT_KHR = VK_MEMORY_HEAP_MULTI_INSTANCE_BIT;
    VK_MEMORY_HEAP_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF;
}

enum VkMemoryPropertyFlagBits {
    VK_MEMORY_PROPERTY_DEVICE_LOCAL_BIT = 0x00000001;
    VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT = 0x00000002;
    VK_MEMORY_PROPERTY_HOST_COHERENT_BIT = 0x00000004;
    VK_MEMORY_PROPERTY_HOST_CACHED_BIT = 0x00000008;
    VK_MEMORY_PROPERTY_LAZILY_ALLOCATED_BIT = 0x00000010;
    VK_MEMORY_PROPERTY_PROTECTED_BIT = 0x00000020;
    VK_MEMORY_PROPERTY_DEVICE_COHERENT_BIT_AMD = 0x00000040;
    VK_MEMORY_PROPERTY_DEVICE_UNCACHED_BIT_AMD = 0x00000080;
    VK_MEMORY_PROPERTY_RDMA_CAPABLE_BIT_NV = 0x00000100;
    VK_MEMORY_PROPERTY_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF;
}

enum VkQueueFlagBits {
    VK_QUEUE_GRAPHICS_BIT = 0x00000001;
    VK_QUEUE_COMPUTE_BIT = 0x00000002;
    VK_QUEUE_TRANSFER_BIT = 0x00000004;
    VK_QUEUE_SPARSE_BINDING_BIT = 0x00000008;
    VK_QUEUE_PROTECTED_BIT = 0x00000010;
    VK_QUEUE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF;
}

enum VkDeviceQueueCreateFlagBits {
    VK_DEVICE_QUEUE_CREATE_PROTECTED_BIT = 0x00000001;
    VK_DEVICE_QUEUE_CREATE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF;
}

enum VkPipelineStageFlagBits {
    VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT = 0x00000001;
    VK_PIPELINE_STAGE_DRAW_INDIRECT_BIT = 0x00000002;
    VK_PIPELINE_STAGE_VERTEX_INPUT_BIT = 0x00000004;
    VK_PIPELINE_STAGE_VERTEX_SHADER_BIT = 0x00000008;
    VK_PIPELINE_STAGE_TESSELLATION_CONTROL_SHADER_BIT = 0x00000010;
    VK_PIPELINE_STAGE_TESSELLATION_EVALUATION_SHADER_BIT = 0x00000020;
    VK_PIPELINE_STAGE_GEOMETRY_SHADER_BIT = 0x00000040;
    VK_PIPELINE_STAGE_FRAGMENT_SHADER_BIT = 0x00000080;
    VK_PIPELINE_STAGE_EARLY_FRAGMENT_TESTS_BIT = 0x00000100;
    VK_PIPELINE_STAGE_LATE_FRAGMENT_TESTS_BIT = 0x00000200;
    VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT = 0x00000400;
    VK_PIPELINE_STAGE_COMPUTE_SHADER_BIT = 0x00000800;
    VK_PIPELINE_STAGE_TRANSFER_BIT = 0x00001000;
    VK_PIPELINE_STAGE_BOTTOM_OF_PIPE_BIT = 0x00002000;
    VK_PIPELINE_STAGE_HOST_BIT = 0x00004000;
    VK_PIPELINE_STAGE_ALL_GRAPHICS_BIT = 0x00008000;
    VK_PIPELINE_STAGE_ALL_COMMANDS_BIT = 0x00010000;
    VK_PIPELINE_STAGE_TRANSFORM_FEEDBACK_BIT_EXT = 0x01000000;
    VK_PIPELINE_STAGE_CONDITIONAL_RENDERING_BIT_EXT = 0x00040000;
    VK_PIPELINE_STAGE_ACCELERATION_STRUCTURE_BUILD_BIT_KHR = 0x02000000;
    VK_PIPELINE_STAGE_RAY_TRACING_SHADER_BIT_KHR = 0x00200000;
    VK_PIPELINE_STAGE_TASK_SHADER_BIT_NV = 0x00080000;
    VK_PIPELINE_STAGE_MESH_SHADER_BIT_NV = 0x00100000;
    VK_PIPELINE_STAGE_FRAGMENT_DENSITY_PROCESS_BIT_EXT = 0x00800000;
    VK_PIPELINE_STAGE_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR = 0x00400000;
    VK_PIPELINE_STAGE_COMMAND_PREPROCESS_BIT_NV = 0x00020000;
    VK_PIPELINE_STAGE_NONE_KHR = 0;
    VK_PIPELINE_STAGE_SHADING_RATE_IMAGE_BIT_NV = VK_PIPELINE_STAGE_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR;
    VK_PIPELINE_STAGE_RAY_TRACING_SHADER_BIT_NV = VK_PIPELINE_STAGE_RAY_TRACING_SHADER_BIT_KHR;
    VK_PIPELINE_STAGE_ACCELERATION_STRUCTURE_BUILD_BIT_NV = VK_PIPELINE_STAGE_ACCELERATION_STRUCTURE_BUILD_BIT_KHR;
    VK_PIPELINE_STAGE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF;
}

enum VkSparseMemoryBindFlagBits {
    VK_SPARSE_MEMORY_BIND_METADATA_BIT = 0x00000001;
    VK_SPARSE_MEMORY_BIND_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF;
}

enum VkSparseImageFormatFlagBits {
    VK_SPARSE_IMAGE_FORMAT_SINGLE_MIPTAIL_BIT = 0x00000001;
    VK_SPARSE_IMAGE_FORMAT_ALIGNED_MIP_SIZE_BIT = 0x00000002;
    VK_SPARSE_IMAGE_FORMAT_NONSTANDARD_BLOCK_SIZE_BIT = 0x00000004;
    VK_SPARSE_IMAGE_FORMAT_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF;
}

enum VkFenceCreateFlagBits {
    VK_FENCE_CREATE_SIGNALED_BIT = 0x00000001;
    VK_FENCE_CREATE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF;
}

enum VkEventCreateFlagBits {
    VK_EVENT_CREATE_DEVICE_ONLY_BIT_KHR = 0x00000001;
    VK_EVENT_CREATE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF;
}

enum VkQueryPipelineStatisticFlagBits {
    VK_QUERY_PIPELINE_STATISTIC_INPUT_ASSEMBLY_VERTICES_BIT = 0x00000001;
    VK_QUERY_PIPELINE_STATISTIC_INPUT_ASSEMBLY_PRIMITIVES_BIT = 0x00000002;
    VK_QUERY_PIPELINE_STATISTIC_VERTEX_SHADER_INVOCATIONS_BIT = 0x00000004;
    VK_QUERY_PIPELINE_STATISTIC_GEOMETRY_SHADER_INVOCATIONS_BIT = 0x00000008;
    VK_QUERY_PIPELINE_STATISTIC_GEOMETRY_SHADER_PRIMITIVES_BIT = 0x00000010;
    VK_QUERY_PIPELINE_STATISTIC_CLIPPING_INVOCATIONS_BIT = 0x00000020;
    VK_QUERY_PIPELINE_STATISTIC_CLIPPING_PRIMITIVES_BIT = 0x00000040;
    VK_QUERY_PIPELINE_STATISTIC_FRAGMENT_SHADER_INVOCATIONS_BIT = 0x00000080;
    VK_QUERY_PIPELINE_STATISTIC_TESSELLATION_CONTROL_SHADER_PATCHES_BIT = 0x00000100;
    VK_QUERY_PIPELINE_STATISTIC_TESSELLATION_EVALUATION_SHADER_INVOCATIONS_BIT = 0x00000200;
    VK_QUERY_PIPELINE_STATISTIC_COMPUTE_SHADER_INVOCATIONS_BIT = 0x00000400;
    VK_QUERY_PIPELINE_STATISTIC_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF;
}

enum VkQueryResultFlagBits {
    VK_QUERY_RESULT_64_BIT = 0x00000001;
    VK_QUERY_RESULT_WAIT_BIT = 0x00000002;
    VK_QUERY_RESULT_WITH_AVAILABILITY_BIT = 0x00000004;
    VK_QUERY_RESULT_PARTIAL_BIT = 0x00000008;
    VK_QUERY_RESULT_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF;
}

enum VkBufferCreateFlagBits {
    VK_BUFFER_CREATE_SPARSE_BINDING_BIT = 0x00000001;
    VK_BUFFER_CREATE_SPARSE_RESIDENCY_BIT = 0x00000002;
    VK_BUFFER_CREATE_SPARSE_ALIASED_BIT = 0x00000004;
    VK_BUFFER_CREATE_PROTECTED_BIT = 0x00000008;
    VK_BUFFER_CREATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT = 0x00000010;
    VK_BUFFER_CREATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT_EXT = VK_BUFFER_CREATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT;
    VK_BUFFER_CREATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT_KHR = VK_BUFFER_CREATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT;
    VK_BUFFER_CREATE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF;
}

enum VkBufferUsageFlagBits {
    VK_BUFFER_USAGE_TRANSFER_SRC_BIT = 0x00000001;
    VK_BUFFER_USAGE_TRANSFER_DST_BIT = 0x00000002;
    VK_BUFFER_USAGE_UNIFORM_TEXEL_BUFFER_BIT = 0x00000004;
    VK_BUFFER_USAGE_STORAGE_TEXEL_BUFFER_BIT = 0x00000008;
    VK_BUFFER_USAGE_UNIFORM_BUFFER_BIT = 0x00000010;
    VK_BUFFER_USAGE_STORAGE_BUFFER_BIT = 0x00000020;
    VK_BUFFER_USAGE_INDEX_BUFFER_BIT = 0x00000040;
    VK_BUFFER_USAGE_VERTEX_BUFFER_BIT = 0x00000080;
    VK_BUFFER_USAGE_INDIRECT_BUFFER_BIT = 0x00000100;
    VK_BUFFER_USAGE_SHADER_DEVICE_ADDRESS_BIT = 0x00020000;
    VK_BUFFER_USAGE_TRANSFORM_FEEDBACK_BUFFER_BIT_EXT = 0x00000800;
    VK_BUFFER_USAGE_TRANSFORM_FEEDBACK_COUNTER_BUFFER_BIT_EXT = 0x00001000;
    VK_BUFFER_USAGE_CONDITIONAL_RENDERING_BIT_EXT = 0x00000200;
    VK_BUFFER_USAGE_ACCELERATION_STRUCTURE_BUILD_INPUT_READ_ONLY_BIT_KHR = 0x00080000;
    VK_BUFFER_USAGE_ACCELERATION_STRUCTURE_STORAGE_BIT_KHR = 0x00100000;
    VK_BUFFER_USAGE_SHADER_BINDING_TABLE_BIT_KHR = 0x00000400;
    VK_BUFFER_USAGE_RAY_TRACING_BIT_NV = VK_BUFFER_USAGE_SHADER_BINDING_TABLE_BIT_KHR;
    VK_BUFFER_USAGE_SHADER_DEVICE_ADDRESS_BIT_EXT = VK_BUFFER_USAGE_SHADER_DEVICE_ADDRESS_BIT;
    VK_BUFFER_USAGE_SHADER_DEVICE_ADDRESS_BIT_KHR = VK_BUFFER_USAGE_SHADER_DEVICE_ADDRESS_BIT;
    VK_BUFFER_USAGE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF;
}

enum VkImageViewCreateFlagBits {
    VK_IMAGE_VIEW_CREATE_FRAGMENT_DENSITY_MAP_DYNAMIC_BIT_EXT = 0x00000001;
    VK_IMAGE_VIEW_CREATE_FRAGMENT_DENSITY_MAP_DEFERRED_BIT_EXT = 0x00000002;
    VK_IMAGE_VIEW_CREATE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF;
}

enum VkPipelineCacheCreateFlagBits {
    VK_PIPELINE_CACHE_CREATE_EXTERNALLY_SYNCHRONIZED_BIT_EXT = 0x00000001;
    VK_PIPELINE_CACHE_CREATE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF;
}

enum VkColorComponentFlagBits {
    VK_COLOR_COMPONENT_R_BIT = 0x00000001;
    VK_COLOR_COMPONENT_G_BIT = 0x00000002;
    VK_COLOR_COMPONENT_B_BIT = 0x00000004;
    VK_COLOR_COMPONENT_A_BIT = 0x00000008;
    VK_COLOR_COMPONENT_RGBA  = 0x0000000F;
    VK_COLOR_COMPONENT_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF;
}

enum VkPipelineCreateFlagBits {
    VK_PIPELINE_CREATE_DISABLE_OPTIMIZATION_BIT = 0x00000001;
    VK_PIPELINE_CREATE_ALLOW_DERIVATIVES_BIT = 0x00000002;
    VK_PIPELINE_CREATE_DERIVATIVE_BIT = 0x00000004;
    VK_PIPELINE_CREATE_VIEW_INDEX_FROM_DEVICE_INDEX_BIT = 0x00000008;
    VK_PIPELINE_CREATE_DISPATCH_BASE_BIT = 0x00000010;
    VK_PIPELINE_CREATE_RAY_TRACING_NO_NULL_ANY_HIT_SHADERS_BIT_KHR = 0x00004000;
    VK_PIPELINE_CREATE_RAY_TRACING_NO_NULL_CLOSEST_HIT_SHADERS_BIT_KHR = 0x00008000;
    VK_PIPELINE_CREATE_RAY_TRACING_NO_NULL_MISS_SHADERS_BIT_KHR = 0x00010000;
    VK_PIPELINE_CREATE_RAY_TRACING_NO_NULL_INTERSECTION_SHADERS_BIT_KHR = 0x00020000;
    VK_PIPELINE_CREATE_RAY_TRACING_SKIP_TRIANGLES_BIT_KHR = 0x00001000;
    VK_PIPELINE_CREATE_RAY_TRACING_SKIP_AABBS_BIT_KHR = 0x00002000;
    VK_PIPELINE_CREATE_RAY_TRACING_SHADER_GROUP_HANDLE_CAPTURE_REPLAY_BIT_KHR = 0x00080000;
    VK_PIPELINE_CREATE_DEFER_COMPILE_BIT_NV = 0x00000020;
    VK_PIPELINE_CREATE_CAPTURE_STATISTICS_BIT_KHR = 0x00000040;
    VK_PIPELINE_CREATE_CAPTURE_INTERNAL_REPRESENTATIONS_BIT_KHR = 0x00000080;
    VK_PIPELINE_CREATE_INDIRECT_BINDABLE_BIT_NV = 0x00040000;
    VK_PIPELINE_CREATE_LIBRARY_BIT_KHR = 0x00000800;
    VK_PIPELINE_CREATE_FAIL_ON_PIPELINE_COMPILE_REQUIRED_BIT_EXT = 0x00000100;
    VK_PIPELINE_CREATE_EARLY_RETURN_ON_FAILURE_BIT_EXT = 0x00000200;
    VK_PIPELINE_CREATE_RAY_TRACING_ALLOW_MOTION_BIT_NV = 0x00100000;
    VK_PIPELINE_CREATE_DISPATCH_BASE = VK_PIPELINE_CREATE_DISPATCH_BASE_BIT;
    VK_PIPELINE_CREATE_VIEW_INDEX_FROM_DEVICE_INDEX_BIT_KHR = VK_PIPELINE_CREATE_VIEW_INDEX_FROM_DEVICE_INDEX_BIT;
    VK_PIPELINE_CREATE_DISPATCH_BASE_KHR = VK_PIPELINE_CREATE_DISPATCH_BASE;
    VK_PIPELINE_CREATE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF;
}

enum VkPipelineShaderStageCreateFlagBits {
    VK_PIPELINE_SHADER_STAGE_CREATE_ALLOW_VARYING_SUBGROUP_SIZE_BIT_EXT = 0x00000001;
    VK_PIPELINE_SHADER_STAGE_CREATE_REQUIRE_FULL_SUBGROUPS_BIT_EXT = 0x00000002;
    VK_PIPELINE_SHADER_STAGE_CREATE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF;
}

enum VkShaderStageFlagBits {
    VK_SHADER_STAGE_VERTEX_BIT = 0x00000001;
    VK_SHADER_STAGE_TESSELLATION_CONTROL_BIT = 0x00000002;
    VK_SHADER_STAGE_TESSELLATION_EVALUATION_BIT = 0x00000004;
    VK_SHADER_STAGE_GEOMETRY_BIT = 0x00000008;
    VK_SHADER_STAGE_FRAGMENT_BIT = 0x00000010;
    VK_SHADER_STAGE_COMPUTE_BIT = 0x00000020;
    VK_SHADER_STAGE_ALL_GRAPHICS = 0x0000001F;
    VK_SHADER_STAGE_ALL = 0x7FFFFFFF;
    VK_SHADER_STAGE_RAYGEN_BIT_KHR = 0x00000100;
    VK_SHADER_STAGE_ANY_HIT_BIT_KHR = 0x00000200;
    VK_SHADER_STAGE_CLOSEST_HIT_BIT_KHR = 0x00000400;
    VK_SHADER_STAGE_MISS_BIT_KHR = 0x00000800;
    VK_SHADER_STAGE_INTERSECTION_BIT_KHR = 0x00001000;
    VK_SHADER_STAGE_CALLABLE_BIT_KHR = 0x00002000;
    VK_SHADER_STAGE_TASK_BIT_NV = 0x00000040;
    VK_SHADER_STAGE_MESH_BIT_NV = 0x00000080;
    VK_SHADER_STAGE_SUBPASS_SHADING_BIT_HUAWEI = 0x00004000;
    VK_SHADER_STAGE_RAYGEN_BIT_NV = VK_SHADER_STAGE_RAYGEN_BIT_KHR;
    VK_SHADER_STAGE_ANY_HIT_BIT_NV = VK_SHADER_STAGE_ANY_HIT_BIT_KHR;
    VK_SHADER_STAGE_CLOSEST_HIT_BIT_NV = VK_SHADER_STAGE_CLOSEST_HIT_BIT_KHR;
    VK_SHADER_STAGE_MISS_BIT_NV = VK_SHADER_STAGE_MISS_BIT_KHR;
    VK_SHADER_STAGE_INTERSECTION_BIT_NV = VK_SHADER_STAGE_INTERSECTION_BIT_KHR;
    VK_SHADER_STAGE_CALLABLE_BIT_NV = VK_SHADER_STAGE_CALLABLE_BIT_KHR;
    VK_SHADER_STAGE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF;
}

enum VkCullModeFlagBits {
    VK_CULL_MODE_NONE = 0;
    VK_CULL_MODE_FRONT_BIT = 0x00000001;
    VK_CULL_MODE_BACK_BIT = 0x00000002;
    VK_CULL_MODE_FRONT_AND_BACK = 0x00000003;
    VK_CULL_MODE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF;
}

enum VkSamplerCreateFlagBits {
    VK_SAMPLER_CREATE_SUBSAMPLED_BIT_EXT = 0x00000001;
    VK_SAMPLER_CREATE_SUBSAMPLED_COARSE_RECONSTRUCTION_BIT_EXT = 0x00000002;
    VK_SAMPLER_CREATE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF;
}

enum VkDescriptorPoolCreateFlagBits {
    VK_DESCRIPTOR_POOL_CREATE_FREE_DESCRIPTOR_SET_BIT = 0x00000001;
    VK_DESCRIPTOR_POOL_CREATE_UPDATE_AFTER_BIND_BIT = 0x00000002;
    VK_DESCRIPTOR_POOL_CREATE_HOST_ONLY_BIT_VALVE = 0x00000004;
    VK_DESCRIPTOR_POOL_CREATE_UPDATE_AFTER_BIND_BIT_EXT = VK_DESCRIPTOR_POOL_CREATE_UPDATE_AFTER_BIND_BIT;
    VK_DESCRIPTOR_POOL_CREATE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF;
}

enum VkDescriptorSetLayoutCreateFlagBits {
    VK_DESCRIPTOR_SET_LAYOUT_CREATE_UPDATE_AFTER_BIND_POOL_BIT = 0x00000002;
    VK_DESCRIPTOR_SET_LAYOUT_CREATE_PUSH_DESCRIPTOR_BIT_KHR = 0x00000001;
    VK_DESCRIPTOR_SET_LAYOUT_CREATE_HOST_ONLY_POOL_BIT_VALVE = 0x00000004;
    VK_DESCRIPTOR_SET_LAYOUT_CREATE_UPDATE_AFTER_BIND_POOL_BIT_EXT = VK_DESCRIPTOR_SET_LAYOUT_CREATE_UPDATE_AFTER_BIND_POOL_BIT;
    VK_DESCRIPTOR_SET_LAYOUT_CREATE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF;
}

enum VkAttachmentDescriptionFlagBits {
    VK_ATTACHMENT_DESCRIPTION_MAY_ALIAS_BIT = 0x00000001;
    VK_ATTACHMENT_DESCRIPTION_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF;
}

enum VkDependencyFlagBits {
    VK_DEPENDENCY_BY_REGION_BIT = 0x00000001;
    VK_DEPENDENCY_DEVICE_GROUP_BIT = 0x00000004;
    VK_DEPENDENCY_VIEW_LOCAL_BIT = 0x00000002;
    VK_DEPENDENCY_VIEW_LOCAL_BIT_KHR = VK_DEPENDENCY_VIEW_LOCAL_BIT;
    VK_DEPENDENCY_DEVICE_GROUP_BIT_KHR = VK_DEPENDENCY_DEVICE_GROUP_BIT;
    VK_DEPENDENCY_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF;
}

enum VkFramebufferCreateFlagBits {
    VK_FRAMEBUFFER_CREATE_IMAGELESS_BIT = 0x00000001;
    VK_FRAMEBUFFER_CREATE_IMAGELESS_BIT_KHR = VK_FRAMEBUFFER_CREATE_IMAGELESS_BIT;
    VK_FRAMEBUFFER_CREATE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF;
}

enum VkRenderPassCreateFlagBits {
    VK_RENDER_PASS_CREATE_TRANSFORM_BIT_QCOM = 0x00000002;
    VK_RENDER_PASS_CREATE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF;
}

enum VkSubpassDescriptionFlagBits {
    VK_SUBPASS_DESCRIPTION_PER_VIEW_ATTRIBUTES_BIT_NVX = 0x00000001;
    VK_SUBPASS_DESCRIPTION_PER_VIEW_POSITION_X_ONLY_BIT_NVX = 0x00000002;
    VK_SUBPASS_DESCRIPTION_FRAGMENT_REGION_BIT_QCOM = 0x00000004;
    VK_SUBPASS_DESCRIPTION_SHADER_RESOLVE_BIT_QCOM = 0x00000008;
    VK_SUBPASS_DESCRIPTION_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF;
}

enum VkCommandPoolCreateFlagBits {
    VK_COMMAND_POOL_CREATE_TRANSIENT_BIT = 0x00000001;
    VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT = 0x00000002;
    VK_COMMAND_POOL_CREATE_PROTECTED_BIT = 0x00000004;
    VK_COMMAND_POOL_CREATE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF;
}

enum VkCommandPoolResetFlagBits {
    VK_COMMAND_POOL_RESET_RELEASE_RESOURCES_BIT = 0x00000001;
    VK_COMMAND_POOL_RESET_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF;
}

enum VkCommandBufferUsageFlagBits {
    VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT = 0x00000001;
    VK_COMMAND_BUFFER_USAGE_RENDER_PASS_CONTINUE_BIT = 0x00000002;
    VK_COMMAND_BUFFER_USAGE_SIMULTANEOUS_USE_BIT = 0x00000004;
    VK_COMMAND_BUFFER_USAGE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF;
}

enum VkQueryControlFlagBits {
    VK_QUERY_CONTROL_PRECISE_BIT = 0x00000001;
    VK_QUERY_CONTROL_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF;
}

enum VkCommandBufferResetFlagBits {
    VK_COMMAND_BUFFER_RESET_RELEASE_RESOURCES_BIT = 0x00000001;
    VK_COMMAND_BUFFER_RESET_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF;
}

enum VkStencilFaceFlagBits {
    VK_STENCIL_FACE_FRONT_BIT = 0x00000001;
    VK_STENCIL_FACE_BACK_BIT = 0x00000002;
    VK_STENCIL_FACE_FRONT_AND_BACK = 0x00000003;
    VK_STENCIL_FRONT_AND_BACK = VK_STENCIL_FACE_FRONT_AND_BACK;
    VK_STENCIL_FACE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF;
}

struct VkExtent2D {
    width: u32;
    height: u32;
}

struct VkExtent3D {
    width: u32;
    height: u32;
    depth: u32;
}

struct VkOffset2D {
    x: s32;
    y: s32;
}

struct VkOffset3D {
    x: s32;
    y: s32;
    z: s32;
}

struct VkRect2D {
    offset: VkOffset2D;
    extent: VkExtent2D;
}

struct VkBaseInStructure {
    sType: VkStructureType;
    pNext: VkBaseInStructure*;
}

struct VkBaseOutStructure {
    sType: VkStructureType;
    pNext: VkBaseOutStructure*;
}

struct VkBufferMemoryBarrier {
    sType := VkStructureType.VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER;
    pNext: void*;
    srcAccessMask: u32;
    dstAccessMask: u32;
    srcQueueFamilyIndex: u32;
    dstQueueFamilyIndex: u32;
    buffer: VkBuffer*;
    offset: u64;
    size: u64;
}

struct VkDispatchIndirectCommand {
    x: u32;
    y: u32;
    z: u32;
}

struct VkDrawIndexedIndirectCommand {
    indexCount: u32;
    instanceCount: u32;
    firstIndex: u32;
    vertexOffset: s32;
    firstInstance: u32;
}

struct VkDrawIndirectCommand {
    vertexCount: u32;
    instanceCount: u32;
    firstVertex: u32;
    firstInstance: u32;
}

struct VkImageSubresourceRange {
    aspectMask: VkImageAspectFlagBits;
    baseMipLevel: u32;
    levelCount: u32;
    baseArrayLayer: u32;
    layerCount: u32;
}

struct VkImageMemoryBarrier {
    sType := VkStructureType.VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER;
    pNext: void*;
    srcAccessMask: VkAccessFlagBits;
    dstAccessMask: VkAccessFlagBits;
    oldLayout: VkImageLayout;
    newLayout: VkImageLayout;
    srcQueueFamilyIndex: u32;
    dstQueueFamilyIndex: u32;
    image: VkImage*;
    subresourceRange: VkImageSubresourceRange;
}

struct VkMemoryBarrier {
    sType := VkStructureType.VK_STRUCTURE_TYPE_MEMORY_BARRIER;
    pNext: void*;
    srcAccessMask: u32;
    dstAccessMask: u32;
}

struct VkPipelineCacheHeaderVersionOne {
    headerSize: u32;
    headerVersion: VkPipelineCacheHeaderVersion;
    vendorID: u32;
    deviceID: u32;
    pipelineCacheUUID: CArray<u8>[16];
}

interface void* PFN_vkAllocationFunction(void* pUserData, u64 size, u64 alignment, VkSystemAllocationScope allocationScope)

interface PFN_vkFreeFunction(void* pUserData, void* pMemory)

interface PFN_vkInternalAllocationNotification(void* pUserData, u64 size, VkInternalAllocationType allocationType, VkSystemAllocationScope allocationScope)

interface PFN_vkInternalFreeNotification(void* pUserData, u64 size, VkInternalAllocationType allocationType, VkSystemAllocationScope allocationScope)

interface void* PFN_vkReallocationFunction(void* pUserData, void* pOriginal, u64 size, u64 alignment, VkSystemAllocationScope allocationScope)

struct VkAllocationCallbacks {
    pUserData: void*;
    pfnAllocation: PFN_vkAllocationFunction;
    pfnReallocation: PFN_vkReallocationFunction;
    pfnFree: PFN_vkFreeFunction;
    pfnInternalAllocation: PFN_vkInternalAllocationNotification;
    pfnInternalFree: PFN_vkInternalFreeNotification;
}

struct VkApplicationInfo {
    sType := VkStructureType.VK_STRUCTURE_TYPE_APPLICATION_INFO;
    pNext: void*;
    pApplicationName: u8*;
    applicationVersion: u32;
    pEngineName: u8*;
    engineVersion: u32;
    apiVersion: u32;
}

u32 vk_make_api_version(u32 variant, u32 major, u32 minor, u32 patch) {
    return (variant << 29) | (major << 22) | (minor << 12) | patch;
}

u32 vk_api_version_1_0() {
    return vk_make_api_version(0, 1, 0, 0);
}

u32 vk_api_version_variant(u32 version) {
    return version >> 29;
}
u32 vk_api_version_major(u32 version) {
    return (version >> 22) & 0x7F;
}
u32 vk_api_version_minor(u32 version) {
    return (version >> 29) & 0x3FF;
}
u32 vk_api_version_patch(u32 version) {
    return version & 0xFFF;
}

struct VkFormatProperties {
    linearTilingFeatures: VkFormatFeatureFlagBits;
    optimalTilingFeatures: VkFormatFeatureFlagBits;
    bufferFeatures: VkFormatFeatureFlagBits;
}

struct VkImageFormatProperties {
    maxExtent: VkExtent3D;
    maxMipLevels: u32;
    maxArrayLayers: u32;
    sampleCounts: u32;
    maxResourceSize: u64;
}

struct VkInstanceCreateInfo {
    sType := VkStructureType.VK_STRUCTURE_TYPE_INSTANCE_CREATE_INFO;
    pNext: void*;
    flags: u32;
    pApplicationInfo: VkApplicationInfo*;
    enabledLayerCount: u32;
    ppEnabledLayerNames: u8**;
    enabledExtensionCount: u32;
    ppEnabledExtensionNames: u8**;
}

struct VkMemoryHeap {
    size: u64;
    flags: u32;
}

struct VkMemoryType {
    propertyFlags: VkMemoryPropertyFlagBits;
    heapIndex: u32;
}

struct VkPhysicalDeviceFeatures {
    robustBufferAccess: u32;
    fullDrawIndexUint32: u32;
    imageCubeArray: u32;
    independentBlend: u32;
    geometryShader: u32;
    tessellationShader: u32;
    sampleRateShading: u32;
    dualSrcBlend: u32;
    logicOp: u32;
    multiDrawIndirect: u32;
    drawIndirectFirstInstance: u32;
    depthClamp: u32;
    depthBiasClamp: u32;
    fillModeNonSolid: u32;
    depthBounds: u32;
    wideLines: u32;
    largePoints: u32;
    alphaToOne: u32;
    multiViewport: u32;
    samplerAnisotropy: u32;
    textureCompressionETC2: u32;
    textureCompressionASTC_LDR: u32;
    textureCompressionBC: u32;
    occlusionQueryPrecise: u32;
    pipelineStatisticsQuery: u32;
    vertexPipelineStoresAndAtomics: u32;
    fragmentStoresAndAtomics: u32;
    shaderTessellationAndGeometryPointSize: u32;
    shaderImageGatherExtended: u32;
    shaderStorageImageExtendedFormats: u32;
    shaderStorageImageMultisample: u32;
    shaderStorageImageReadWithoutFormat: u32;
    shaderStorageImageWriteWithoutFormat: u32;
    shaderUniformBufferArrayDynamicIndexing: u32;
    shaderSampledImageArrayDynamicIndexing: u32;
    shaderStorageBufferArrayDynamicIndexing: u32;
    shaderStorageImageArrayDynamicIndexing: u32;
    shaderClipDistance: u32;
    shaderCullDistance: u32;
    shaderFloat64: u32;
    shaderInt64: u32;
    shaderInt16: u32;
    shaderResourceResidency: u32;
    shaderResourceMinLod: u32;
    sparseBinding: u32;
    sparseResidencyBuffer: u32;
    sparseResidencyImage2D: u32;
    sparseResidencyImage3D: u32;
    sparseResidency2Samples: u32;
    sparseResidency4Samples: u32;
    sparseResidency8Samples: u32;
    sparseResidency16Samples: u32;
    sparseResidencyAliased: u32;
    variableMultisampleRate: u32;
    inheritedQueries: u32;
}

struct VkPhysicalDeviceLimits {
    maxImageDimension1D: u32;
    maxImageDimension2D: u32;
    maxImageDimension3D: u32;
    maxImageDimensionCube: u32;
    maxImageArrayLayers: u32;
    maxTexelBufferElements: u32;
    maxUniformBufferRange: u32;
    maxStorageBufferRange: u32;
    maxPushConstantsSize: u32;
    maxMemoryAllocationCount: u32;
    maxSamplerAllocationCount: u32;
    bufferImageGranularity: u64;
    sparseAddressSpaceSize: u64;
    maxBoundDescriptorSets: u32;
    maxPerStageDescriptorSamplers: u32;
    maxPerStageDescriptorUniformBuffers: u32;
    maxPerStageDescriptorStorageBuffers: u32;
    maxPerStageDescriptorSampledImages: u32;
    maxPerStageDescriptorStorageImages: u32;
    maxPerStageDescriptorInputAttachments: u32;
    maxPerStageResources: u32;
    maxDescriptorSetSamplers: u32;
    maxDescriptorSetUniformBuffers: u32;
    maxDescriptorSetUniformBuffersDynamic: u32;
    maxDescriptorSetStorageBuffers: u32;
    maxDescriptorSetStorageBuffersDynamic: u32;
    maxDescriptorSetSampledImages: u32;
    maxDescriptorSetStorageImages: u32;
    maxDescriptorSetInputAttachments: u32;
    maxVertexInputAttributes: u32;
    maxVertexInputBindings: u32;
    maxVertexInputAttributeOffset: u32;
    maxVertexInputBindingStride: u32;
    maxVertexOutputComponents: u32;
    maxTessellationGenerationLevel: u32;
    maxTessellationPatchSize: u32;
    maxTessellationControlPerVertexInputComponents: u32;
    maxTessellationControlPerVertexOutputComponents: u32;
    maxTessellationControlPerPatchOutputComponents: u32;
    maxTessellationControlTotalOutputComponents: u32;
    maxTessellationEvaluationInputComponents: u32;
    maxTessellationEvaluationOutputComponents: u32;
    maxGeometryShaderInvocations: u32;
    maxGeometryInputComponents: u32;
    maxGeometryOutputComponents: u32;
    maxGeometryOutputVertices: u32;
    maxGeometryTotalOutputComponents: u32;
    maxFragmentInputComponents: u32;
    maxFragmentOutputAttachments: u32;
    maxFragmentDualSrcAttachments: u32;
    maxFragmentCombinedOutputResources: u32;
    maxComputeSharedMemorySize: u32;
    maxComputeWorkGroupCount: CArray<u32>[3];
    maxComputeWorkGroupInvocations: u32;
    maxComputeWorkGroupSize: CArray<u32>[3];
    subPixelPrecisionBits: u32;
    subTexelPrecisionBits: u32;
    mipmapPrecisionBits: u32;
    maxDrawIndexedIndexValue: u32;
    maxDrawIndirectCount: u32;
    maxSamplerLodBias: float;
    maxSamplerAnisotropy: float;
    maxViewports: u32;
    maxViewportDimensions: CArray<u32>[2];
    viewportBoundsRange: CArray<float>[2];
    viewportSubPixelBits: u32;
    minMemoryMapAlignment: u64;
    minTexelBufferOffsetAlignment: u64;
    minUniformBufferOffsetAlignment: u64;
    minStorageBufferOffsetAlignment: u64;
    minTexelOffset: s32;
    maxTexelOffset: u32;
    minTexelGatherOffset: s32;
    maxTexelGatherOffset: u32;
    minInterpolationOffset: float;
    maxInterpolationOffset: float;
    subPixelInterpolationOffsetBits: u32;
    maxFramebufferWidth: u32;
    maxFramebufferHeight: u32;
    maxFramebufferLayers: u32;
    framebufferColorSampleCounts: VkSampleCountFlagBits;
    framebufferDepthSampleCounts: VkSampleCountFlagBits;
    framebufferStencilSampleCounts: VkSampleCountFlagBits;
    framebufferNoAttachmentsSampleCounts: VkSampleCountFlagBits;
    maxColorAttachments: u32;
    sampledImageColorSampleCounts: VkSampleCountFlagBits;
    sampledImageIntegerSampleCounts: VkSampleCountFlagBits;
    sampledImageDepthSampleCounts: VkSampleCountFlagBits;
    sampledImageStencilSampleCounts: VkSampleCountFlagBits;
    storageImageSampleCounts: VkSampleCountFlagBits;
    maxSampleMaskWords: u32;
    timestampComputeAndGraphics: u32;
    timestampPeriod: float;
    maxClipDistances: u32;
    maxCullDistances: u32;
    maxCombinedClipAndCullDistances: u32;
    discreteQueuePriorities: u32;
    pointSizeRange: CArray<float>[2];
    lineWidthRange: CArray<float>[2];
    pointSizeGranularity: float;
    lineWidthGranularity: float;
    strictLines: u32;
    standardSampleLocations: u32;
    optimalBufferCopyOffsetAlignment: u64;
    optimalBufferCopyRowPitchAlignment: u64;
    nonCoherentAtomSize: u64;
}

struct VkPhysicalDeviceMemoryProperties {
    memoryTypeCount: u32;
    memoryTypes: CArray<VkMemoryType>[32];
    memoryHeapCount: u32;
    memoryHeaps: CArray<VkMemoryHeap>[16];
}

struct VkPhysicalDeviceSparseProperties {
    residencyStandard2DBlockShape: u32;
    residencyStandard2DMultisampleBlockShape: u32;
    residencyStandard3DBlockShape: u32;
    residencyAlignedMipSize: u32;
    residencyNonResidentStrict: u32;
}

struct VkPhysicalDeviceProperties {
    apiVersion: u32;
    driverVersion: u32;
    vendorID: u32;
    deviceID: u32;
    deviceType: VkPhysicalDeviceType;
    deviceName: CArray<u8>[256];
    pipelineCacheUUID: CArray<u8>[16];
    limits: VkPhysicalDeviceLimits;
    sparseProperties: VkPhysicalDeviceSparseProperties;
}

struct VkQueueFamilyProperties {
    queueFlags: VkQueueFlagBits;
    queueCount: u32;
    timestampValidBits: u32;
    minImageTransferGranularity: VkExtent3D;
}

struct VkDeviceQueueCreateInfo {
    sType := VkStructureType.VK_STRUCTURE_TYPE_DEVICE_QUEUE_CREATE_INFO;
    pNext: void*;
    flags: u32;
    queueFamilyIndex: u32;
    queueCount: u32;
    pQueuePriorities: float*;
}

struct VkDeviceCreateInfo {
    sType := VkStructureType.VK_STRUCTURE_TYPE_DEVICE_CREATE_INFO;
    pNext: void*;
    flags: u32;
    queueCreateInfoCount: u32;
    pQueueCreateInfos: VkDeviceQueueCreateInfo*;
    enabledLayerCount: u32;
    ppEnabledLayerNames: u8**;
    enabledExtensionCount: u32;
    ppEnabledExtensionNames: u8**;
    pEnabledFeatures: VkPhysicalDeviceFeatures*;
}

struct VkExtensionProperties {
    extensionName: CArray<u8>[256];
    specVersion: u32;
}

struct VkLayerProperties {
    layerName: CArray<u8>[256];
    specVersion: u32;
    implementationVersion: u32;
    description: CArray<u8>[256];
}

struct VkSubmitInfo {
    sType := VkStructureType.VK_STRUCTURE_TYPE_SUBMIT_INFO;
    pNext: void*;
    waitSemaphoreCount: u32;
    pWaitSemaphores: VkSemaphore**;
    pWaitDstStageMask: VkPipelineStageFlagBits*;
    commandBufferCount: u32;
    pCommandBuffers: VkCommandBuffer**;
    signalSemaphoreCount: u32;
    pSignalSemaphores: VkSemaphore**;
}

struct VkMappedMemoryRange {
    sType := VkStructureType.VK_STRUCTURE_TYPE_MAPPED_MEMORY_RANGE;
    pNext: void*;
    memory: VkDeviceMemory*;
    offset: u64;
    size: u64;
}

struct VkMemoryAllocateInfo {
    sType := VkStructureType.VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_INFO;
    pNext: void*;
    allocationSize: u64;
    memoryTypeIndex: u32;
}

struct VkMemoryRequirements {
    size: u64;
    alignment: u64;
    memoryTypeBits: u32;
}

struct VkSparseMemoryBind {
    resourceOffset: u64;
    size: u64;
    memory: VkDeviceMemory*;
    memoryOffset: u64;
    flags: u32;
}

struct VkSparseBufferMemoryBindInfo {
    buffer: VkBuffer*;
    bindCount: u32;
    pBinds: VkSparseMemoryBind*;
}

struct VkSparseImageOpaqueMemoryBindInfo {
    image: VkImage*;
    bindCount: u32;
    pBinds: VkSparseMemoryBind*;
}

struct VkImageSubresource {
    aspectMask: u32;
    mipLevel: u32;
    arrayLayer: u32;
}

struct VkSparseImageMemoryBind {
    subresource: VkImageSubresource;
    offset: VkOffset3D;
    extent: VkExtent3D;
    memory: VkDeviceMemory*;
    memoryOffset: u64;
    flags: u32;
}

struct VkSparseImageMemoryBindInfo {
    image: VkImage*;
    bindCount: u32;
    pBinds: VkSparseImageMemoryBind*;
}

struct VkBindSparseInfo {
    sType := VkStructureType.VK_STRUCTURE_TYPE_BIND_SPARSE_INFO;
    pNext: void*;
    waitSemaphoreCount: u32;
    pWaitSemaphores: VkSemaphore**;
    bufferBindCount: u32;
    pBufferBinds: VkSparseBufferMemoryBindInfo*;
    imageOpaqueBindCount: u32;
    pImageOpaqueBinds: VkSparseImageOpaqueMemoryBindInfo*;
    imageBindCount: u32;
    pImageBinds: VkSparseImageMemoryBindInfo*;
    signalSemaphoreCount: u32;
    pSignalSemaphores: VkSemaphore**;
}

struct VkSparseImageFormatProperties {
    aspectMask: u32;
    imageGranularity: VkExtent3D;
    flags: u32;
}

struct VkSparseImageMemoryRequirements {
    formatProperties: VkSparseImageFormatProperties;
    imageMipTailFirstLod: u32;
    imageMipTailSize: u64;
    imageMipTailOffset: u64;
    imageMipTailStride: u64;
}

struct VkFenceCreateInfo {
    sType := VkStructureType.VK_STRUCTURE_TYPE_FENCE_CREATE_INFO;
    pNext: void*;
    flags: u32;
}

struct VkSemaphoreCreateInfo {
    sType := VkStructureType.VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO;
    pNext: void*;
    flags: u32;
}

struct VkEventCreateInfo {
    sType := VkStructureType.VK_STRUCTURE_TYPE_EVENT_CREATE_INFO;
    pNext: void*;
    flags: u32;
}

struct VkQueryPoolCreateInfo {
    sType := VkStructureType.VK_STRUCTURE_TYPE_QUERY_POOL_CREATE_INFO;
    pNext: void*;
    flags: u32;
    queryType: VkQueryType;
    queryCount: u32;
    pipelineStatistics: u32;
}

struct VkBufferCreateInfo {
    sType := VkStructureType.VK_STRUCTURE_TYPE_BUFFER_CREATE_INFO;
    pNext: void*;
    flags: u32;
    size: u64;
    usage: VkBufferUsageFlagBits;
    sharingMode: VkSharingMode;
    queueFamilyIndexCount: u32;
    pQueueFamilyIndices: u32*;
}

struct VkBufferViewCreateInfo {
    sType := VkStructureType.VK_STRUCTURE_TYPE_BUFFER_VIEW_CREATE_INFO;
    pNext: void*;
    flags: u32;
    buffer: VkBuffer*;
    format: VkFormat;
    offset: u64;
    range: u64;
}

struct VkImageCreateInfo {
    sType := VkStructureType.VK_STRUCTURE_TYPE_IMAGE_CREATE_INFO;
    pNext: void*;
    flags: u32;
    imageType: VkImageType;
    format: VkFormat;
    extent: VkExtent3D;
    mipLevels: u32;
    arrayLayers: u32;
    samples: VkSampleCountFlagBits;
    tiling: VkImageTiling;
    usage: VkImageUsageFlagBits;
    sharingMode: VkSharingMode;
    queueFamilyIndexCount: u32;
    pQueueFamilyIndices: u32*;
    initialLayout: VkImageLayout;
}

struct VkSubresourceLayout {
    offset: u64;
    size: u64;
    rowPitch: u64;
    arrayPitch: u64;
    depthPitch: u64;
}

struct VkComponentMapping {
    r: VkComponentSwizzle;
    g: VkComponentSwizzle;
    b: VkComponentSwizzle;
    a: VkComponentSwizzle;
}

struct VkImageViewCreateInfo {
    sType := VkStructureType.VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO;
    pNext: void*;
    flags: u32;
    image: VkImage*;
    viewType: VkImageViewType;
    format: VkFormat;
    components: VkComponentMapping;
    subresourceRange: VkImageSubresourceRange;
}

struct VkShaderModuleCreateInfo {
    sType := VkStructureType.VK_STRUCTURE_TYPE_SHADER_MODULE_CREATE_INFO;
    pNext: void*;
    flags: u32;
    codeSize: u64;
    pCode: u32*;
}

struct VkPipelineCacheCreateInfo {
    sType := VkStructureType.VK_STRUCTURE_TYPE_PIPELINE_CACHE_CREATE_INFO;
    pNext: void*;
    flags: u32;
    initialDataSize: u64;
    pInitialData: void*;
}

struct VkSpecializationMapEntry {
    constantID: u32;
    offset: u32;
    size: u64;
}

struct VkSpecializationInfo {
    mapEntryCount: u32;
    pMapEntries: VkSpecializationMapEntry*;
    dataSize: u64;
    pData: void*;
}

struct VkPipelineShaderStageCreateInfo {
    sType := VkStructureType.VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_CREATE_INFO;
    pNext: void*;
    flags: u32;
    stage: VkShaderStageFlagBits;
    module: VkShaderModule*;
    pName: u8*;
    pSpecializationInfo: VkSpecializationInfo*;
}

struct VkComputePipelineCreateInfo {
    sType := VkStructureType.VK_STRUCTURE_TYPE_COMPUTE_PIPELINE_CREATE_INFO;
    pNext: void*;
    flags: u32;
    stage: VkPipelineShaderStageCreateInfo;
    layout: VkPipelineLayout*;
    basePipelineHandle: VkPipeline*;
    basePipelineIndex: s32;
}

struct VkVertexInputBindingDescription {
    binding: u32;
    stride: u32;
    inputRate: VkVertexInputRate;
}

struct VkVertexInputAttributeDescription {
    location: u32;
    binding: u32;
    format: VkFormat;
    offset: u32;
}

struct VkPipelineVertexInputStateCreateInfo {
    sType := VkStructureType.VK_STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_STATE_CREATE_INFO;
    pNext: void*;
    flags: u32;
    vertexBindingDescriptionCount: u32;
    pVertexBindingDescriptions: VkVertexInputBindingDescription*;
    vertexAttributeDescriptionCount: u32;
    pVertexAttributeDescriptions: VkVertexInputAttributeDescription*;
}

struct VkPipelineInputAssemblyStateCreateInfo {
    sType := VkStructureType.VK_STRUCTURE_TYPE_PIPELINE_INPUT_ASSEMBLY_STATE_CREATE_INFO;
    pNext: void*;
    flags: u32;
    topology: VkPrimitiveTopology;
    primitiveRestartEnable: u32;
}

struct VkPipelineTessellationStateCreateInfo {
    sType := VkStructureType.VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_STATE_CREATE_INFO;
    pNext: void*;
    flags: u32;
    patchControlPoints: u32;
}

struct VkViewport {
    x: float;
    y: float;
    width: float;
    height: float;
    minDepth: float;
    maxDepth: float;
}

struct VkPipelineViewportStateCreateInfo {
    sType := VkStructureType.VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_STATE_CREATE_INFO;
    pNext: void*;
    flags: u32;
    viewportCount: u32;
    pViewports: VkViewport*;
    scissorCount: u32;
    pScissors: VkRect2D*;
}

struct VkPipelineRasterizationStateCreateInfo {
    sType := VkStructureType.VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_CREATE_INFO;
    pNext: void*;
    flags: u32;
    depthClampEnable: u32;
    rasterizerDiscardEnable: u32;
    polygonMode: VkPolygonMode;
    cullMode: VkCullModeFlagBits;
    frontFace: VkFrontFace;
    depthBiasEnable: u32;
    depthBiasConstantFactor: float;
    depthBiasClamp: float;
    depthBiasSlopeFactor: float;
    lineWidth: float;
}

struct VkPipelineMultisampleStateCreateInfo {
    sType := VkStructureType.VK_STRUCTURE_TYPE_PIPELINE_MULTISAMPLE_STATE_CREATE_INFO;
    pNext: void*;
    flags: u32;
    rasterizationSamples: VkSampleCountFlagBits;
    sampleShadingEnable: u32;
    minSampleShading: float;
    pSampleMask: u32*;
    alphaToCoverageEnable: u32;
    alphaToOneEnable: u32;
}

struct VkStencilOpState {
    failOp: VkStencilOp;
    passOp: VkStencilOp;
    depthFailOp: VkStencilOp;
    compareOp: VkCompareOp;
    compareMask: u32;
    writeMask: u32;
    reference: u32;
}

struct VkPipelineDepthStencilStateCreateInfo {
    sType := VkStructureType.VK_STRUCTURE_TYPE_PIPELINE_DEPTH_STENCIL_STATE_CREATE_INFO;
    pNext: void*;
    flags: u32;
    depthTestEnable: u32;
    depthWriteEnable: u32;
    depthCompareOp: VkCompareOp;
    depthBoundsTestEnable: u32;
    stencilTestEnable: u32;
    front: VkStencilOpState;
    back: VkStencilOpState;
    minDepthBounds: float;
    maxDepthBounds: float;
}

struct VkPipelineColorBlendAttachmentState {
    blendEnable: u32;
    srcColorBlendFactor: VkBlendFactor;
    dstColorBlendFactor: VkBlendFactor;
    colorBlendOp: VkBlendOp;
    srcAlphaBlendFactor: VkBlendFactor;
    dstAlphaBlendFactor: VkBlendFactor;
    alphaBlendOp: VkBlendOp;
    colorWriteMask: VkColorComponentFlagBits;
}

struct VkPipelineColorBlendStateCreateInfo {
    sType := VkStructureType.VK_STRUCTURE_TYPE_PIPELINE_COLOR_BLEND_STATE_CREATE_INFO;
    pNext: void*;
    flags: u32;
    logicOpEnable: u32;
    logicOp: VkLogicOp;
    attachmentCount: u32;
    pAttachments: VkPipelineColorBlendAttachmentState*;
    blendConstants: CArray<float>[4] = [0.0, 0.0, 0.0, 0.0]
}

struct VkPipelineDynamicStateCreateInfo {
    sType := VkStructureType.VK_STRUCTURE_TYPE_PIPELINE_DYNAMIC_STATE_CREATE_INFO;
    pNext: void*;
    flags: u32;
    dynamicStateCount: u32;
    pDynamicStates: VkDynamicState*;
}

struct VkGraphicsPipelineCreateInfo {
    sType := VkStructureType.VK_STRUCTURE_TYPE_GRAPHICS_PIPELINE_CREATE_INFO;
    pNext: void*;
    flags: u32;
    stageCount: u32;
    pStages: VkPipelineShaderStageCreateInfo*;
    pVertexInputState: VkPipelineVertexInputStateCreateInfo*;
    pInputAssemblyState: VkPipelineInputAssemblyStateCreateInfo*;
    pTessellationState: VkPipelineTessellationStateCreateInfo*;
    pViewportState: VkPipelineViewportStateCreateInfo*;
    pRasterizationState: VkPipelineRasterizationStateCreateInfo*;
    pMultisampleState: VkPipelineMultisampleStateCreateInfo*;
    pDepthStencilState: VkPipelineDepthStencilStateCreateInfo*;
    pColorBlendState: VkPipelineColorBlendStateCreateInfo*;
    pDynamicState: VkPipelineDynamicStateCreateInfo*;
    layout: VkPipelineLayout*;
    renderPass: VkRenderPass*;
    subpass: u32;
    basePipelineHandle: VkPipeline*;
    basePipelineIndex: s32;
}

struct VkPushConstantRange {
    stageFlags: VkShaderStageFlagBits;
    offset: u32;
    size: u32;
}

struct VkPipelineLayoutCreateInfo {
    sType := VkStructureType.VK_STRUCTURE_TYPE_PIPELINE_LAYOUT_CREATE_INFO;
    pNext: void*;
    flags: u32;
    setLayoutCount: u32;
    pSetLayouts: VkDescriptorSetLayout**;
    pushConstantRangeCount: u32;
    pPushConstantRanges: VkPushConstantRange*;
}

struct VkSamplerCreateInfo {
    sType := VkStructureType.VK_STRUCTURE_TYPE_SAMPLER_CREATE_INFO;
    pNext: void*;
    flags: u32;
    magFilter: VkFilter;
    minFilter: VkFilter;
    mipmapMode: VkSamplerMipmapMode;
    addressModeU: VkSamplerAddressMode;
    addressModeV: VkSamplerAddressMode;
    addressModeW: VkSamplerAddressMode;
    mipLodBias: float;
    anisotropyEnable: u32;
    maxAnisotropy: float;
    compareEnable: u32;
    compareOp: VkCompareOp;
    minLod: float;
    maxLod: float;
    borderColor: VkBorderColor;
    unnormalizedCoordinates: u32;
}

struct VkCopyDescriptorSet {
    sType := VkStructureType.VK_STRUCTURE_TYPE_COPY_DESCRIPTOR_SET;
    pNext: void*;
    srcSet: VkDescriptorSet*;
    srcBinding: u32;
    srcArrayElement: u32;
    dstSet: VkDescriptorSet*;
    dstBinding: u32;
    dstArrayElement: u32;
    descriptorCount: u32;
}

struct VkDescriptorBufferInfo {
    buffer: VkBuffer*;
    offset: u64;
    range: u64;
}

struct VkDescriptorImageInfo {
    sampler: VkSampler*;
    imageView: VkImageView*;
    imageLayout: VkImageLayout;
}

struct VkDescriptorPoolSize {
    type: VkDescriptorType;
    descriptorCount: u32;
}

struct VkDescriptorPoolCreateInfo {
    sType := VkStructureType.VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_CREATE_INFO;
    pNext: void*;
    flags: u32;
    maxSets: u32;
    poolSizeCount: u32;
    pPoolSizes: VkDescriptorPoolSize*;
}

struct VkDescriptorSetAllocateInfo {
    sType := VkStructureType.VK_STRUCTURE_TYPE_DESCRIPTOR_SET_ALLOCATE_INFO;
    pNext: void*;
    descriptorPool: VkDescriptorPool*;
    descriptorSetCount: u32;
    pSetLayouts: VkDescriptorSetLayout**;
}

struct VkDescriptorSetLayoutBinding {
    binding: u32;
    descriptorType: VkDescriptorType;
    descriptorCount: u32;
    stageFlags: VkShaderStageFlagBits;
    pImmutableSamplers: VkSampler**;
}

struct VkDescriptorSetLayoutCreateInfo {
    sType := VkStructureType.VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_CREATE_INFO;
    pNext: void*;
    flags: u32;
    bindingCount: u32;
    pBindings: VkDescriptorSetLayoutBinding*;
}

struct VkWriteDescriptorSet {
    sType := VkStructureType.VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET;
    pNext: void*;
    dstSet: VkDescriptorSet*;
    dstBinding: u32;
    dstArrayElement: u32;
    descriptorCount: u32;
    descriptorType: VkDescriptorType;
    pImageInfo: VkDescriptorImageInfo*;
    pBufferInfo: VkDescriptorBufferInfo*;
    pTexelBufferView: VkBufferView**;
}

struct VkAttachmentDescription {
    flags: u32;
    format: VkFormat;
    samples: VkSampleCountFlagBits;
    loadOp: VkAttachmentLoadOp;
    storeOp: VkAttachmentStoreOp;
    stencilLoadOp: VkAttachmentLoadOp;
    stencilStoreOp: VkAttachmentStoreOp;
    initialLayout: VkImageLayout;
    finalLayout: VkImageLayout;
}

struct VkAttachmentReference {
    attachment: u32;
    layout: VkImageLayout;
}

struct VkFramebufferCreateInfo {
    sType := VkStructureType.VK_STRUCTURE_TYPE_FRAMEBUFFER_CREATE_INFO;
    pNext: void*;
    flags: u32;
    renderPass: VkRenderPass*;
    attachmentCount: u32;
    pAttachments: VkImageView**;
    width: u32;
    height: u32;
    layers: u32;
}

struct VkSubpassDescription {
    flags: u32;
    pipelineBindPoint: VkPipelineBindPoint;
    inputAttachmentCount: u32;
    pInputAttachments: VkAttachmentReference*;
    colorAttachmentCount: u32;
    pColorAttachments: VkAttachmentReference*;
    pResolveAttachments: VkAttachmentReference*;
    pDepthStencilAttachment: VkAttachmentReference*;
    preserveAttachmentCount: u32;
    pPreserveAttachments: u32*;
}

struct VkSubpassDependency {
    srcSubpass: u32;
    dstSubpass: u32;
    srcStageMask: VkPipelineStageFlagBits;
    dstStageMask: VkPipelineStageFlagBits;
    srcAccessMask: VkAccessFlagBits;
    dstAccessMask: VkAccessFlagBits;
    dependencyFlags: u32;
}

struct VkRenderPassCreateInfo {
    sType := VkStructureType.VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO;
    pNext: void*;
    flags: u32;
    attachmentCount: u32;
    pAttachments: VkAttachmentDescription*;
    subpassCount: u32;
    pSubpasses: VkSubpassDescription*;
    dependencyCount: u32;
    pDependencies: VkSubpassDependency*;
}

struct VkCommandPoolCreateInfo {
    sType := VkStructureType.VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO;
    pNext: void*;
    flags: VkCommandPoolCreateFlagBits;
    queueFamilyIndex: u32;
}

struct VkCommandBufferAllocateInfo {
    sType := VkStructureType.VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO;
    pNext: void*;
    commandPool: VkCommandPool*;
    level: VkCommandBufferLevel;
    commandBufferCount: u32;
}

struct VkCommandBufferInheritanceInfo {
    sType := VkStructureType.VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_INFO;
    pNext: void*;
    renderPass: VkRenderPass*;
    subpass: u32;
    framebuffer: VkFramebuffer*;
    occlusionQueryEnable: u32;
    queryFlags: u32;
    pipelineStatistics: u32;
}

struct VkCommandBufferBeginInfo {
    sType := VkStructureType.VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO;
    pNext: void*;
    flags: u32;
    pInheritanceInfo: VkCommandBufferInheritanceInfo*;
}

struct VkBufferCopy {
    srcOffset: u64;
    dstOffset: u64;
    size: u64;
}

struct VkImageSubresourceLayers {
    aspectMask: VkImageAspectFlagBits;
    mipLevel: u32;
    baseArrayLayer: u32;
    layerCount: u32;
}

struct VkBufferImageCopy {
    bufferOffset: u64;
    bufferRowLength: u32;
    bufferImageHeight: u32;
    imageSubresource: VkImageSubresourceLayers;
    imageOffset: VkOffset3D;
    imageExtent: VkExtent3D;
}

union VkClearColorValue {
    float32: CArray<float>[4];
    int32: CArray<s32>[4];
    uint32: CArray<u32>[4];
}

struct VkClearDepthStencilValue {
    depth: float;
    stencil: u32;
}

union VkClearValue {
    color: VkClearColorValue;
    depthStencil: VkClearDepthStencilValue;
}

struct VkClearAttachment {
    aspectMask: u32;
    colorAttachment: u32;
    clearValue: VkClearValue;
}

struct VkClearRect {
    rect: VkRect2D;
    baseArrayLayer: u32;
    layerCount: u32;
}

struct VkImageBlit {
    srcSubresource: VkImageSubresourceLayers;
    srcOffsets: CArray<VkOffset3D>[2];
    dstSubresource: VkImageSubresourceLayers;
    dstOffsets: CArray<VkOffset3D>[2];
}

struct VkImageCopy {
    srcSubresource: VkImageSubresourceLayers;
    srcOffset: VkOffset3D;
    dstSubresource: VkImageSubresourceLayers;
    dstOffset: VkOffset3D;
    extent: VkExtent3D;
}

struct VkImageResolve {
    srcSubresource: VkImageSubresourceLayers;
    srcOffset: VkOffset3D;
    dstSubresource: VkImageSubresourceLayers;
    dstOffset: VkOffset3D;
    extent: VkExtent3D;
}

struct VkRenderPassBeginInfo {
    sType := VkStructureType.VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO;
    pNext: void*;
    renderPass: VkRenderPass*;
    framebuffer: VkFramebuffer*;
    renderArea: VkRect2D;
    clearValueCount: u32;
    pClearValues: VkClearValue*;
}

interface VkResult PFN_vkCreateInstance(VkInstanceCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, VkInstance** pInstance)

interface PFN_vkDestroyInstance(VkInstance* instance, VkAllocationCallbacks* pAllocator)

interface VkResult PFN_vkEnumeratePhysicalDevices(VkInstance* instance, u32* pPhysicalDeviceCount, VkPhysicalDevice** pPhysicalDevices)

interface PFN_vkGetPhysicalDeviceFeatures(VkPhysicalDevice* physicalDevice, VkPhysicalDeviceFeatures* pFeatures)

interface PFN_vkGetPhysicalDeviceFormatProperties(VkPhysicalDevice* physicalDevice, VkFormat format, VkFormatProperties* pFormatProperties)

interface VkResult PFN_vkGetPhysicalDeviceImageFormatProperties(VkPhysicalDevice* physicalDevice, VkFormat format, VkImageType type, VkImageTiling tiling, u32 usage, u32 flags, VkImageFormatProperties* pImageFormatProperties)

interface PFN_vkGetPhysicalDeviceProperties(VkPhysicalDevice* physicalDevice, VkPhysicalDeviceProperties* pProperties)

interface PFN_vkGetPhysicalDeviceQueueFamilyProperties(VkPhysicalDevice* physicalDevice, u32* pQueueFamilyPropertyCount, VkQueueFamilyProperties* pQueueFamilyProperties)

interface PFN_vkGetPhysicalDeviceMemoryProperties(VkPhysicalDevice* physicalDevice, VkPhysicalDeviceMemoryProperties* pMemoryProperties)

interface void* PFN_vkGetInstanceProcAddr(VkInstance* instance, u8* pName)

interface void* PFN_vkGetDeviceProcAddr(VkDevice* device, u8* pName)

interface VkResult PFN_vkCreateDevice(VkPhysicalDevice* physicalDevice, VkDeviceCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, VkDevice** pDevice)

interface PFN_vkDestroyDevice(VkDevice* device, VkAllocationCallbacks* pAllocator)

interface VkResult PFN_vkEnumerateInstanceExtensionProperties(u8* pLayerName, u32* pPropertyCount, VkExtensionProperties* pProperties)

interface VkResult PFN_vkEnumerateDeviceExtensionProperties(VkPhysicalDevice* physicalDevice, u8* pLayerName, u32* pPropertyCount, VkExtensionProperties* pProperties)

interface VkResult PFN_vkEnumerateInstanceLayerProperties(u32* pPropertyCount, VkLayerProperties* pProperties)

interface VkResult PFN_vkEnumerateDeviceLayerProperties(VkPhysicalDevice* physicalDevice, u32* pPropertyCount, VkLayerProperties* pProperties)

interface PFN_vkGetDeviceQueue(VkDevice* device, u32 queueFamilyIndex, u32 queueIndex, VkQueue** pQueue)

interface VkResult PFN_vkQueueSubmit(VkQueue* queue, u32 submitCount, VkSubmitInfo* pSubmits, VkFence* fence)

interface VkResult PFN_vkQueueWaitIdle(VkQueue* queue)

interface VkResult PFN_vkDeviceWaitIdle(VkDevice* device)

interface VkResult PFN_vkAllocateMemory(VkDevice* device, VkMemoryAllocateInfo* pAllocateInfo, VkAllocationCallbacks* pAllocator, VkDeviceMemory** pMemory)

interface PFN_vkFreeMemory(VkDevice* device, VkDeviceMemory* memory, VkAllocationCallbacks* pAllocator)

interface VkResult PFN_vkMapMemory(VkDevice* device, VkDeviceMemory* memory, u64 offset, u64 size, u32 flags, void** ppData)

interface PFN_vkUnmapMemory(VkDevice* device, VkDeviceMemory* memory)

interface VkResult PFN_vkFlushMappedMemoryRanges(VkDevice* device, u32 memoryRangeCount, VkMappedMemoryRange* pMemoryRanges)

interface VkResult PFN_vkInvalidateMappedMemoryRanges(VkDevice* device, u32 memoryRangeCount, VkMappedMemoryRange* pMemoryRanges)

interface PFN_vkGetDeviceMemoryCommitment(VkDevice* device, VkDeviceMemory* memory, u64* pCommittedMemoryInBytes)

interface VkResult PFN_vkBindBufferMemory(VkDevice* device, VkBuffer* buffer, VkDeviceMemory* memory, u64 memoryOffset)

interface VkResult PFN_vkBindImageMemory(VkDevice* device, VkImage* image, VkDeviceMemory* memory, u64 memoryOffset)

interface PFN_vkGetBufferMemoryRequirements(VkDevice* device, VkBuffer* buffer, VkMemoryRequirements* pMemoryRequirements)

interface PFN_vkGetImageMemoryRequirements(VkDevice* device, VkImage* image, VkMemoryRequirements* pMemoryRequirements)

interface PFN_vkGetImageSparseMemoryRequirements(VkDevice* device, VkImage* image, u32* pSparseMemoryRequirementCount, VkSparseImageMemoryRequirements* pSparseMemoryRequirements)

interface PFN_vkGetPhysicalDeviceSparseImageFormatProperties(VkPhysicalDevice* physicalDevice, VkFormat format, VkImageType type, VkSampleCountFlagBits samples, u32 usage, VkImageTiling tiling, u32* pPropertyCount, VkSparseImageFormatProperties* pProperties)

interface VkResult PFN_vkQueueBindSparse(VkQueue* queue, u32 bindInfoCount, VkBindSparseInfo* pBindInfo, VkFence* fence)

interface VkResult PFN_vkCreateFence(VkDevice* device, VkFenceCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, VkFence** pFence)

interface PFN_vkDestroyFence(VkDevice* device, VkFence* fence, VkAllocationCallbacks* pAllocator)

interface VkResult PFN_vkResetFences(VkDevice* device, u32 fenceCount, VkFence** pFences)

interface VkResult PFN_vkGetFenceStatus(VkDevice* device, VkFence* fence)

interface VkResult PFN_vkWaitForFences(VkDevice* device, u32 fenceCount, VkFence** pFences, u32 waitAll, u64 timeout)

interface VkResult PFN_vkCreateSemaphore(VkDevice* device, VkSemaphoreCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, VkSemaphore** pSemaphore)

interface PFN_vkDestroySemaphore(VkDevice* device, VkSemaphore* semaphore, VkAllocationCallbacks* pAllocator)

interface VkResult PFN_vkCreateEvent(VkDevice* device, VkEventCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, VkEvent** pEvent)

interface PFN_vkDestroyEvent(VkDevice* device, VkEvent* event, VkAllocationCallbacks* pAllocator)

interface VkResult PFN_vkGetEventStatus(VkDevice* device, VkEvent* event)

interface VkResult PFN_vkSetEvent(VkDevice* device, VkEvent* event)

interface VkResult PFN_vkResetEvent(VkDevice* device, VkEvent* event)

interface VkResult PFN_vkCreateQueryPool(VkDevice* device, VkQueryPoolCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, VkQueryPool** pQueryPool)

interface PFN_vkDestroyQueryPool(VkDevice* device, VkQueryPool* queryPool, VkAllocationCallbacks* pAllocator)

interface VkResult PFN_vkGetQueryPoolResults(VkDevice* device, VkQueryPool* queryPool, u32 firstQuery, u32 queryCount, u64 dataSize, void* pData, u64 stride, u32 flags)

interface VkResult PFN_vkCreateBuffer(VkDevice* device, VkBufferCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, VkBuffer** pBuffer)

interface PFN_vkDestroyBuffer(VkDevice* device, VkBuffer* buffer, VkAllocationCallbacks* pAllocator)

interface VkResult PFN_vkCreateBufferView(VkDevice* device, VkBufferViewCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, VkBufferView** pView)

interface PFN_vkDestroyBufferView(VkDevice* device, VkBufferView* bufferView, VkAllocationCallbacks* pAllocator)

interface VkResult PFN_vkCreateImage(VkDevice* device, VkImageCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, VkImage** pImage)

interface PFN_vkDestroyImage(VkDevice* device, VkImage* image, VkAllocationCallbacks* pAllocator)

interface PFN_vkGetImageSubresourceLayout(VkDevice* device, VkImage* image, VkImageSubresource* pSubresource, VkSubresourceLayout* pLayout)

interface VkResult PFN_vkCreateImageView(VkDevice* device, VkImageViewCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, VkImageView** pView)

interface PFN_vkDestroyImageView(VkDevice* device, VkImageView* imageView, VkAllocationCallbacks* pAllocator)

interface VkResult PFN_vkCreateShaderModule(VkDevice* device, VkShaderModuleCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, VkShaderModule** pShaderModule)

interface PFN_vkDestroyShaderModule(VkDevice* device, VkShaderModule* shaderModule, VkAllocationCallbacks* pAllocator)

interface VkResult PFN_vkCreatePipelineCache(VkDevice* device, VkPipelineCacheCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, VkPipelineCache** pPipelineCache)

interface PFN_vkDestroyPipelineCache(VkDevice* device, VkPipelineCache* pipelineCache, VkAllocationCallbacks* pAllocator)

interface VkResult PFN_vkGetPipelineCacheData(VkDevice* device, VkPipelineCache* pipelineCache, u64* pDataSize, void* pData)

interface VkResult PFN_vkMergePipelineCaches(VkDevice* device, VkPipelineCache* dstCache, u32 srcCacheCount, VkPipelineCache** pSrcCaches)

interface VkResult PFN_vkCreateGraphicsPipelines(VkDevice* device, VkPipelineCache* pipelineCache, u32 createInfoCount, VkGraphicsPipelineCreateInfo* pCreateInfos, VkAllocationCallbacks* pAllocator, VkPipeline** pPipelines)

interface VkResult PFN_vkCreateComputePipelines(VkDevice* device, VkPipelineCache* pipelineCache, u32 createInfoCount, VkComputePipelineCreateInfo* pCreateInfos, VkAllocationCallbacks* pAllocator, VkPipeline** pPipelines)

interface PFN_vkDestroyPipeline(VkDevice* device, VkPipeline* pipeline, VkAllocationCallbacks* pAllocator)

interface VkResult PFN_vkCreatePipelineLayout(VkDevice* device, VkPipelineLayoutCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, VkPipelineLayout** pPipelineLayout)

interface PFN_vkDestroyPipelineLayout(VkDevice* device, VkPipelineLayout* pipelineLayout, VkAllocationCallbacks* pAllocator)

interface VkResult PFN_vkCreateSampler(VkDevice* device, VkSamplerCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, VkSampler** pSampler)

interface PFN_vkDestroySampler(VkDevice* device, VkSampler* sampler, VkAllocationCallbacks* pAllocator)

interface VkResult PFN_vkCreateDescriptorSetLayout(VkDevice* device, VkDescriptorSetLayoutCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, VkDescriptorSetLayout** pSetLayout)

interface PFN_vkDestroyDescriptorSetLayout(VkDevice* device, VkDescriptorSetLayout* descriptorSetLayout, VkAllocationCallbacks* pAllocator)

interface VkResult PFN_vkCreateDescriptorPool(VkDevice* device, VkDescriptorPoolCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, VkDescriptorPool** pDescriptorPool)

interface PFN_vkDestroyDescriptorPool(VkDevice* device, VkDescriptorPool* descriptorPool, VkAllocationCallbacks* pAllocator)

interface VkResult PFN_vkResetDescriptorPool(VkDevice* device, VkDescriptorPool* descriptorPool, u32 flags)

interface VkResult PFN_vkAllocateDescriptorSets(VkDevice* device, VkDescriptorSetAllocateInfo* pAllocateInfo, VkDescriptorSet** pDescriptorSets)

interface VkResult PFN_vkFreeDescriptorSets(VkDevice* device, VkDescriptorPool* descriptorPool, u32 descriptorSetCount, VkDescriptorSet** pDescriptorSets)

interface PFN_vkUpdateDescriptorSets(VkDevice* device, u32 descriptorWriteCount, VkWriteDescriptorSet* pDescriptorWrites, u32 descriptorCopyCount, VkCopyDescriptorSet* pDescriptorCopies)

interface VkResult PFN_vkCreateFramebuffer(VkDevice* device, VkFramebufferCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, VkFramebuffer** pFramebuffer)

interface PFN_vkDestroyFramebuffer(VkDevice* device, VkFramebuffer* framebuffer, VkAllocationCallbacks* pAllocator)

interface VkResult PFN_vkCreateRenderPass(VkDevice* device, VkRenderPassCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, VkRenderPass** pRenderPass)

interface PFN_vkDestroyRenderPass(VkDevice* device, VkRenderPass* renderPass, VkAllocationCallbacks* pAllocator)

interface PFN_vkGetRenderAreaGranularity(VkDevice* device, VkRenderPass* renderPass, VkExtent2D* pGranularity)

interface VkResult PFN_vkCreateCommandPool(VkDevice* device, VkCommandPoolCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, VkCommandPool** pCommandPool)

interface PFN_vkDestroyCommandPool(VkDevice* device, VkCommandPool* commandPool, VkAllocationCallbacks* pAllocator)

interface VkResult PFN_vkResetCommandPool(VkDevice* device, VkCommandPool* commandPool, u32 flags)

interface VkResult PFN_vkAllocateCommandBuffers(VkDevice* device, VkCommandBufferAllocateInfo* pAllocateInfo, VkCommandBuffer** pCommandBuffers)

interface PFN_vkFreeCommandBuffers(VkDevice* device, VkCommandPool* commandPool, u32 commandBufferCount, VkCommandBuffer** pCommandBuffers)

interface VkResult PFN_vkBeginCommandBuffer(VkCommandBuffer* commandBuffer, VkCommandBufferBeginInfo* pBeginInfo)

interface VkResult PFN_vkEndCommandBuffer(VkCommandBuffer* commandBuffer)

interface VkResult PFN_vkResetCommandBuffer(VkCommandBuffer* commandBuffer, u32 flags)

interface PFN_vkCmdBindPipeline(VkCommandBuffer* commandBuffer, VkPipelineBindPoint pipelineBindPoint, VkPipeline* pipeline)

interface PFN_vkCmdSetViewport(VkCommandBuffer* commandBuffer, u32 firstViewport, u32 viewportCount, VkViewport* pViewports)

interface PFN_vkCmdSetScissor(VkCommandBuffer* commandBuffer, u32 firstScissor, u32 scissorCount, VkRect2D* pScissors)

interface PFN_vkCmdSetLineWidth(VkCommandBuffer* commandBuffer, float lineWidth)

interface PFN_vkCmdSetDepthBias(VkCommandBuffer* commandBuffer, float depthBiasConstantFactor, float depthBiasClamp, float depthBiasSlopeFactor)

interface PFN_vkCmdSetBlendConstants(VkCommandBuffer* commandBuffer, CArray<float>[4] blendConstants)

interface PFN_vkCmdSetDepthBounds(VkCommandBuffer* commandBuffer, float minDepthBounds, float maxDepthBounds)

interface PFN_vkCmdSetStencilCompareMask(VkCommandBuffer* commandBuffer, u32 faceMask, u32 compareMask)

interface PFN_vkCmdSetStencilWriteMask(VkCommandBuffer* commandBuffer, u32 faceMask, u32 writeMask)

interface PFN_vkCmdSetStencilReference(VkCommandBuffer* commandBuffer, u32 faceMask, u32 reference)

interface PFN_vkCmdBindDescriptorSets(VkCommandBuffer* commandBuffer, VkPipelineBindPoint pipelineBindPoint, VkPipelineLayout* layout, u32 firstSet, u32 descriptorSetCount, VkDescriptorSet** pDescriptorSets, u32 dynamicOffsetCount, u32* pDynamicOffsets)

interface PFN_vkCmdBindIndexBuffer(VkCommandBuffer* commandBuffer, VkBuffer* buffer, u64 offset, VkIndexType indexType)

interface PFN_vkCmdBindVertexBuffers(VkCommandBuffer* commandBuffer, u32 firstBinding, u32 bindingCount, VkBuffer** pBuffers, u64* pOffsets)

interface PFN_vkCmdDraw(VkCommandBuffer* commandBuffer, u32 vertexCount, u32 instanceCount, u32 firstVertex, u32 firstInstance)

interface PFN_vkCmdDrawIndexed(VkCommandBuffer* commandBuffer, u32 indexCount, u32 instanceCount, u32 firstIndex, s32 vertexOffset, u32 firstInstance)

interface PFN_vkCmdDrawIndirect(VkCommandBuffer* commandBuffer, VkBuffer* buffer, u64 offset, u32 drawCount, u32 stride)

interface PFN_vkCmdDrawIndexedIndirect(VkCommandBuffer* commandBuffer, VkBuffer* buffer, u64 offset, u32 drawCount, u32 stride)

interface PFN_vkCmdDispatch(VkCommandBuffer* commandBuffer, u32 groupCountX, u32 groupCountY, u32 groupCountZ)

interface PFN_vkCmdDispatchIndirect(VkCommandBuffer* commandBuffer, VkBuffer* buffer, u64 offset)

interface PFN_vkCmdCopyBuffer(VkCommandBuffer* commandBuffer, VkBuffer* srcBuffer, VkBuffer* dstBuffer, u32 regionCount, VkBufferCopy* pRegions)

interface PFN_vkCmdCopyImage(VkCommandBuffer* commandBuffer, VkImage* srcImage, VkImageLayout srcImageLayout, VkImage* dstImage, VkImageLayout dstImageLayout, u32 regionCount, VkImageCopy* pRegions)

interface PFN_vkCmdBlitImage(VkCommandBuffer* commandBuffer, VkImage* srcImage, VkImageLayout srcImageLayout, VkImage* dstImage, VkImageLayout dstImageLayout, u32 regionCount, VkImageBlit* pRegions, VkFilter filter)

interface PFN_vkCmdCopyBufferToImage(VkCommandBuffer* commandBuffer, VkBuffer* srcBuffer, VkImage* dstImage, VkImageLayout dstImageLayout, u32 regionCount, VkBufferImageCopy* pRegions)

interface PFN_vkCmdCopyImageToBuffer(VkCommandBuffer* commandBuffer, VkImage* srcImage, VkImageLayout srcImageLayout, VkBuffer* dstBuffer, u32 regionCount, VkBufferImageCopy* pRegions)

interface PFN_vkCmdUpdateBuffer(VkCommandBuffer* commandBuffer, VkBuffer* dstBuffer, u64 dstOffset, u64 dataSize, void* pData)

interface PFN_vkCmdFillBuffer(VkCommandBuffer* commandBuffer, VkBuffer* dstBuffer, u64 dstOffset, u64 size, u32 data)

interface PFN_vkCmdClearColorImage(VkCommandBuffer* commandBuffer, VkImage* image, VkImageLayout imageLayout, VkClearColorValue* pColor, u32 rangeCount, VkImageSubresourceRange* pRanges)

interface PFN_vkCmdClearDepthStencilImage(VkCommandBuffer* commandBuffer, VkImage* image, VkImageLayout imageLayout, VkClearDepthStencilValue* pDepthStencil, u32 rangeCount, VkImageSubresourceRange* pRanges)

interface PFN_vkCmdClearAttachments(VkCommandBuffer* commandBuffer, u32 attachmentCount, VkClearAttachment* pAttachments, u32 rectCount, VkClearRect* pRects)

interface PFN_vkCmdResolveImage(VkCommandBuffer* commandBuffer, VkImage* srcImage, VkImageLayout srcImageLayout, VkImage* dstImage, VkImageLayout dstImageLayout, u32 regionCount, VkImageResolve* pRegions)

interface PFN_vkCmdSetEvent(VkCommandBuffer* commandBuffer, VkEvent* event, u32 stageMask)

interface PFN_vkCmdResetEvent(VkCommandBuffer* commandBuffer, VkEvent* event, u32 stageMask)

interface PFN_vkCmdWaitEvents(VkCommandBuffer* commandBuffer, u32 eventCount, VkEvent** pEvents, u32 srcStageMask, u32 dstStageMask, u32 memoryBarrierCount, VkMemoryBarrier* pMemoryBarriers, u32 bufferMemoryBarrierCount, VkBufferMemoryBarrier* pBufferMemoryBarriers, u32 imageMemoryBarrierCount, VkImageMemoryBarrier* pImageMemoryBarriers)

interface PFN_vkCmdPipelineBarrier(VkCommandBuffer* commandBuffer, VkPipelineStageFlagBits srcStageMask, VkPipelineStageFlagBits dstStageMask, u32 dependencyFlags, u32 memoryBarrierCount, VkMemoryBarrier* pMemoryBarriers, u32 bufferMemoryBarrierCount, VkBufferMemoryBarrier* pBufferMemoryBarriers, u32 imageMemoryBarrierCount, VkImageMemoryBarrier* pImageMemoryBarriers)

interface PFN_vkCmdBeginQuery(VkCommandBuffer* commandBuffer, VkQueryPool* queryPool, u32 query, u32 flags)

interface PFN_vkCmdEndQuery(VkCommandBuffer* commandBuffer, VkQueryPool* queryPool, u32 query)

interface PFN_vkCmdResetQueryPool(VkCommandBuffer* commandBuffer, VkQueryPool* queryPool, u32 firstQuery, u32 queryCount)

interface PFN_vkCmdWriteTimestamp(VkCommandBuffer* commandBuffer, VkPipelineStageFlagBits pipelineStage, VkQueryPool* queryPool, u32 query)

interface PFN_vkCmdCopyQueryPoolResults(VkCommandBuffer* commandBuffer, VkQueryPool* queryPool, u32 firstQuery, u32 queryCount, VkBuffer* dstBuffer, u64 dstOffset, u64 stride, u32 flags)

interface PFN_vkCmdPushConstants(VkCommandBuffer* commandBuffer, VkPipelineLayout* layout, VkShaderStageFlagBits stageFlags, u32 offset, u32 size, void* pValues)

interface PFN_vkCmdBeginRenderPass(VkCommandBuffer* commandBuffer, VkRenderPassBeginInfo* pRenderPassBegin, VkSubpassContents contents)

interface PFN_vkCmdNextSubpass(VkCommandBuffer* commandBuffer, VkSubpassContents contents)

interface PFN_vkCmdEndRenderPass(VkCommandBuffer* commandBuffer)

interface PFN_vkCmdExecuteCommands(VkCommandBuffer* commandBuffer, u32 commandBufferCount, VkCommandBuffer** pCommandBuffers)

VkResult vkCreateInstance(VkInstanceCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, VkInstance** pInstance) #extern vulkan

vkDestroyInstance(VkInstance* instance, VkAllocationCallbacks* pAllocator) #extern vulkan

VkResult vkEnumeratePhysicalDevices(VkInstance* instance, u32* pPhysicalDeviceCount, VkPhysicalDevice** pPhysicalDevices) #extern vulkan

vkGetPhysicalDeviceFeatures(VkPhysicalDevice* physicalDevice, VkPhysicalDeviceFeatures* pFeatures) #extern vulkan

vkGetPhysicalDeviceFormatProperties(VkPhysicalDevice* physicalDevice, VkFormat format, VkFormatProperties* pFormatProperties) #extern vulkan

VkResult vkGetPhysicalDeviceImageFormatProperties(VkPhysicalDevice* physicalDevice, VkFormat format, VkImageType type, VkImageTiling tiling, u32 usage, u32 flags, VkImageFormatProperties* pImageFormatProperties) #extern vulkan

vkGetPhysicalDeviceProperties(VkPhysicalDevice* physicalDevice, VkPhysicalDeviceProperties* pProperties) #extern vulkan

vkGetPhysicalDeviceQueueFamilyProperties(VkPhysicalDevice* physicalDevice, u32* pQueueFamilyPropertyCount, VkQueueFamilyProperties* pQueueFamilyProperties) #extern vulkan

vkGetPhysicalDeviceMemoryProperties(VkPhysicalDevice* physicalDevice, VkPhysicalDeviceMemoryProperties* pMemoryProperties) #extern vulkan

void* vkGetInstanceProcAddr(VkInstance* instance, u8* pName) #extern vulkan

void* vkGetDeviceProcAddr(VkDevice* device, u8* pName) #extern vulkan

VkResult vkCreateDevice(VkPhysicalDevice* physicalDevice, VkDeviceCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, VkDevice** pDevice) #extern vulkan

vkDestroyDevice(VkDevice* device, VkAllocationCallbacks* pAllocator) #extern vulkan

VkResult vkEnumerateInstanceExtensionProperties(u8* pLayerName, u32* pPropertyCount, VkExtensionProperties* pProperties) #extern vulkan

VkResult vkEnumerateDeviceExtensionProperties(VkPhysicalDevice* physicalDevice, u8* pLayerName, u32* pPropertyCount, VkExtensionProperties* pProperties) #extern vulkan

VkResult vkEnumerateInstanceLayerProperties(u32* pPropertyCount, VkLayerProperties* pProperties) #extern vulkan

VkResult vkEnumerateDeviceLayerProperties(VkPhysicalDevice* physicalDevice, u32* pPropertyCount, VkLayerProperties* pProperties) #extern vulkan

vkGetDeviceQueue(VkDevice* device, u32 queueFamilyIndex, u32 queueIndex, VkQueue** pQueue) #extern vulkan

VkResult vkQueueSubmit(VkQueue* queue, u32 submitCount, VkSubmitInfo* pSubmits, VkFence* fence) #extern vulkan

VkResult vkQueueWaitIdle(VkQueue* queue) #extern vulkan

VkResult vkDeviceWaitIdle(VkDevice* device) #extern vulkan

VkResult vkAllocateMemory(VkDevice* device, VkMemoryAllocateInfo* pAllocateInfo, VkAllocationCallbacks* pAllocator, VkDeviceMemory** pMemory) #extern vulkan

vkFreeMemory(VkDevice* device, VkDeviceMemory* memory, VkAllocationCallbacks* pAllocator) #extern vulkan

VkResult vkMapMemory(VkDevice* device, VkDeviceMemory* memory, u64 offset, u64 size, u32 flags, void** ppData) #extern vulkan

vkUnmapMemory(VkDevice* device, VkDeviceMemory* memory) #extern vulkan

VkResult vkFlushMappedMemoryRanges(VkDevice* device, u32 memoryRangeCount, VkMappedMemoryRange* pMemoryRanges) #extern vulkan

VkResult vkInvalidateMappedMemoryRanges(VkDevice* device, u32 memoryRangeCount, VkMappedMemoryRange* pMemoryRanges) #extern vulkan

vkGetDeviceMemoryCommitment(VkDevice* device, VkDeviceMemory* memory, u64* pCommittedMemoryInBytes) #extern vulkan

VkResult vkBindBufferMemory(VkDevice* device, VkBuffer* buffer, VkDeviceMemory* memory, u64 memoryOffset) #extern vulkan

VkResult vkBindImageMemory(VkDevice* device, VkImage* image, VkDeviceMemory* memory, u64 memoryOffset) #extern vulkan

vkGetBufferMemoryRequirements(VkDevice* device, VkBuffer* buffer, VkMemoryRequirements* pMemoryRequirements) #extern vulkan

vkGetImageMemoryRequirements(VkDevice* device, VkImage* image, VkMemoryRequirements* pMemoryRequirements) #extern vulkan

vkGetImageSparseMemoryRequirements(VkDevice* device, VkImage* image, u32* pSparseMemoryRequirementCount, VkSparseImageMemoryRequirements* pSparseMemoryRequirements) #extern vulkan

vkGetPhysicalDeviceSparseImageFormatProperties(VkPhysicalDevice* physicalDevice, VkFormat format, VkImageType type, VkSampleCountFlagBits samples, u32 usage, VkImageTiling tiling, u32* pPropertyCount, VkSparseImageFormatProperties* pProperties) #extern vulkan

VkResult vkQueueBindSparse(VkQueue* queue, u32 bindInfoCount, VkBindSparseInfo* pBindInfo, VkFence* fence) #extern vulkan

VkResult vkCreateFence(VkDevice* device, VkFenceCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, VkFence** pFence) #extern vulkan

vkDestroyFence(VkDevice* device, VkFence* fence, VkAllocationCallbacks* pAllocator) #extern vulkan

VkResult vkResetFences(VkDevice* device, u32 fenceCount, VkFence** pFences) #extern vulkan

VkResult vkGetFenceStatus(VkDevice* device, VkFence* fence) #extern vulkan

VkResult vkWaitForFences(VkDevice* device, u32 fenceCount, VkFence** pFences, u32 waitAll, u64 timeout) #extern vulkan

VkResult vkCreateSemaphore(VkDevice* device, VkSemaphoreCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, VkSemaphore** pSemaphore) #extern vulkan

vkDestroySemaphore(VkDevice* device, VkSemaphore* semaphore, VkAllocationCallbacks* pAllocator) #extern vulkan

VkResult vkCreateEvent(VkDevice* device, VkEventCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, VkEvent** pEvent) #extern vulkan

vkDestroyEvent(VkDevice* device, VkEvent* event, VkAllocationCallbacks* pAllocator) #extern vulkan

VkResult vkGetEventStatus(VkDevice* device, VkEvent* event) #extern vulkan

VkResult vkSetEvent(VkDevice* device, VkEvent* event) #extern vulkan

VkResult vkResetEvent(VkDevice* device, VkEvent* event) #extern vulkan

VkResult vkCreateQueryPool(VkDevice* device, VkQueryPoolCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, VkQueryPool** pQueryPool) #extern vulkan

vkDestroyQueryPool(VkDevice* device, VkQueryPool* queryPool, VkAllocationCallbacks* pAllocator) #extern vulkan

VkResult vkGetQueryPoolResults(VkDevice* device, VkQueryPool* queryPool, u32 firstQuery, u32 queryCount, u64 dataSize, void* pData, u64 stride, u32 flags) #extern vulkan

VkResult vkCreateBuffer(VkDevice* device, VkBufferCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, VkBuffer** pBuffer) #extern vulkan

vkDestroyBuffer(VkDevice* device, VkBuffer* buffer, VkAllocationCallbacks* pAllocator) #extern vulkan

VkResult vkCreateBufferView(VkDevice* device, VkBufferViewCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, VkBufferView** pView) #extern vulkan

vkDestroyBufferView(VkDevice* device, VkBufferView* bufferView, VkAllocationCallbacks* pAllocator) #extern vulkan

VkResult vkCreateImage(VkDevice* device, VkImageCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, VkImage** pImage) #extern vulkan

vkDestroyImage(VkDevice* device, VkImage* image, VkAllocationCallbacks* pAllocator) #extern vulkan

vkGetImageSubresourceLayout(VkDevice* device, VkImage* image, VkImageSubresource* pSubresource, VkSubresourceLayout* pLayout) #extern vulkan

VkResult vkCreateImageView(VkDevice* device, VkImageViewCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, VkImageView** pView) #extern vulkan

vkDestroyImageView(VkDevice* device, VkImageView* imageView, VkAllocationCallbacks* pAllocator) #extern vulkan

VkResult vkCreateShaderModule(VkDevice* device, VkShaderModuleCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, VkShaderModule** pShaderModule) #extern vulkan

vkDestroyShaderModule(VkDevice* device, VkShaderModule* shaderModule, VkAllocationCallbacks* pAllocator) #extern vulkan

VkResult vkCreatePipelineCache(VkDevice* device, VkPipelineCacheCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, VkPipelineCache** pPipelineCache) #extern vulkan

vkDestroyPipelineCache(VkDevice* device, VkPipelineCache* pipelineCache, VkAllocationCallbacks* pAllocator) #extern vulkan

VkResult vkGetPipelineCacheData(VkDevice* device, VkPipelineCache* pipelineCache, u64* pDataSize, void* pData) #extern vulkan

VkResult vkMergePipelineCaches(VkDevice* device, VkPipelineCache* dstCache, u32 srcCacheCount, VkPipelineCache** pSrcCaches) #extern vulkan

VkResult vkCreateGraphicsPipelines(VkDevice* device, VkPipelineCache* pipelineCache, u32 createInfoCount, VkGraphicsPipelineCreateInfo* pCreateInfos, VkAllocationCallbacks* pAllocator, VkPipeline** pPipelines) #extern vulkan

VkResult vkCreateComputePipelines(VkDevice* device, VkPipelineCache* pipelineCache, u32 createInfoCount, VkComputePipelineCreateInfo* pCreateInfos, VkAllocationCallbacks* pAllocator, VkPipeline** pPipelines) #extern vulkan

vkDestroyPipeline(VkDevice* device, VkPipeline* pipeline, VkAllocationCallbacks* pAllocator) #extern vulkan

VkResult vkCreatePipelineLayout(VkDevice* device, VkPipelineLayoutCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, VkPipelineLayout** pPipelineLayout) #extern vulkan

vkDestroyPipelineLayout(VkDevice* device, VkPipelineLayout* pipelineLayout, VkAllocationCallbacks* pAllocator) #extern vulkan

VkResult vkCreateSampler(VkDevice* device, VkSamplerCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, VkSampler** pSampler) #extern vulkan

vkDestroySampler(VkDevice* device, VkSampler* sampler, VkAllocationCallbacks* pAllocator) #extern vulkan

VkResult vkCreateDescriptorSetLayout(VkDevice* device, VkDescriptorSetLayoutCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, VkDescriptorSetLayout** pSetLayout) #extern vulkan

vkDestroyDescriptorSetLayout(VkDevice* device, VkDescriptorSetLayout* descriptorSetLayout, VkAllocationCallbacks* pAllocator) #extern vulkan

VkResult vkCreateDescriptorPool(VkDevice* device, VkDescriptorPoolCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, VkDescriptorPool** pDescriptorPool) #extern vulkan

vkDestroyDescriptorPool(VkDevice* device, VkDescriptorPool* descriptorPool, VkAllocationCallbacks* pAllocator) #extern vulkan

VkResult vkResetDescriptorPool(VkDevice* device, VkDescriptorPool* descriptorPool, u32 flags) #extern vulkan

VkResult vkAllocateDescriptorSets(VkDevice* device, VkDescriptorSetAllocateInfo* pAllocateInfo, VkDescriptorSet** pDescriptorSets) #extern vulkan

VkResult vkFreeDescriptorSets(VkDevice* device, VkDescriptorPool* descriptorPool, u32 descriptorSetCount, VkDescriptorSet** pDescriptorSets) #extern vulkan

vkUpdateDescriptorSets(VkDevice* device, u32 descriptorWriteCount, VkWriteDescriptorSet* pDescriptorWrites, u32 descriptorCopyCount, VkCopyDescriptorSet* pDescriptorCopies) #extern vulkan

VkResult vkCreateFramebuffer(VkDevice* device, VkFramebufferCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, VkFramebuffer** pFramebuffer) #extern vulkan

vkDestroyFramebuffer(VkDevice* device, VkFramebuffer* framebuffer, VkAllocationCallbacks* pAllocator) #extern vulkan

VkResult vkCreateRenderPass(VkDevice* device, VkRenderPassCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, VkRenderPass** pRenderPass) #extern vulkan

vkDestroyRenderPass(VkDevice* device, VkRenderPass* renderPass, VkAllocationCallbacks* pAllocator) #extern vulkan

vkGetRenderAreaGranularity(VkDevice* device, VkRenderPass* renderPass, VkExtent2D* pGranularity) #extern vulkan

VkResult vkCreateCommandPool(VkDevice* device, VkCommandPoolCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, VkCommandPool** pCommandPool) #extern vulkan

vkDestroyCommandPool(VkDevice* device, VkCommandPool* commandPool, VkAllocationCallbacks* pAllocator) #extern vulkan

VkResult vkResetCommandPool(VkDevice* device, VkCommandPool* commandPool, u32 flags) #extern vulkan

VkResult vkAllocateCommandBuffers(VkDevice* device, VkCommandBufferAllocateInfo* pAllocateInfo, VkCommandBuffer** pCommandBuffers) #extern vulkan

vkFreeCommandBuffers(VkDevice* device, VkCommandPool* commandPool, u32 commandBufferCount, VkCommandBuffer** pCommandBuffers) #extern vulkan

VkResult vkBeginCommandBuffer(VkCommandBuffer* commandBuffer, VkCommandBufferBeginInfo* pBeginInfo) #extern vulkan

VkResult vkEndCommandBuffer(VkCommandBuffer* commandBuffer) #extern vulkan

VkResult vkResetCommandBuffer(VkCommandBuffer* commandBuffer, u32 flags) #extern vulkan

vkCmdBindPipeline(VkCommandBuffer* commandBuffer, VkPipelineBindPoint pipelineBindPoint, VkPipeline* pipeline) #extern vulkan

vkCmdSetViewport(VkCommandBuffer* commandBuffer, u32 firstViewport, u32 viewportCount, VkViewport* pViewports) #extern vulkan

vkCmdSetScissor(VkCommandBuffer* commandBuffer, u32 firstScissor, u32 scissorCount, VkRect2D* pScissors) #extern vulkan

vkCmdSetLineWidth(VkCommandBuffer* commandBuffer, float lineWidth) #extern vulkan

vkCmdSetDepthBias(VkCommandBuffer* commandBuffer, float depthBiasConstantFactor, float depthBiasClamp, float depthBiasSlopeFactor) #extern vulkan

vkCmdSetBlendConstants(VkCommandBuffer* commandBuffer, CArray<float>[4] blendConstants) #extern vulkan

vkCmdSetDepthBounds(VkCommandBuffer* commandBuffer, float minDepthBounds, float maxDepthBounds) #extern vulkan

vkCmdSetStencilCompareMask(VkCommandBuffer* commandBuffer, u32 faceMask, u32 compareMask) #extern vulkan

vkCmdSetStencilWriteMask(VkCommandBuffer* commandBuffer, u32 faceMask, u32 writeMask) #extern vulkan

vkCmdSetStencilReference(VkCommandBuffer* commandBuffer, u32 faceMask, u32 reference) #extern vulkan

vkCmdBindDescriptorSets(VkCommandBuffer* commandBuffer, VkPipelineBindPoint pipelineBindPoint, VkPipelineLayout* layout, u32 firstSet, u32 descriptorSetCount, VkDescriptorSet** pDescriptorSets, u32 dynamicOffsetCount, u32* pDynamicOffsets) #extern vulkan

vkCmdBindIndexBuffer(VkCommandBuffer* commandBuffer, VkBuffer* buffer, u64 offset, VkIndexType indexType) #extern vulkan

vkCmdBindVertexBuffers(VkCommandBuffer* commandBuffer, u32 firstBinding, u32 bindingCount, VkBuffer** pBuffers, u64* pOffsets) #extern vulkan

vkCmdDraw(VkCommandBuffer* commandBuffer, u32 vertexCount, u32 instanceCount, u32 firstVertex, u32 firstInstance) #extern vulkan

vkCmdDrawIndexed(VkCommandBuffer* commandBuffer, u32 indexCount, u32 instanceCount, u32 firstIndex, s32 vertexOffset, u32 firstInstance) #extern vulkan

vkCmdDrawIndirect(VkCommandBuffer* commandBuffer, VkBuffer* buffer, u64 offset, u32 drawCount, u32 stride) #extern vulkan

vkCmdDrawIndexedIndirect(VkCommandBuffer* commandBuffer, VkBuffer* buffer, u64 offset, u32 drawCount, u32 stride) #extern vulkan

vkCmdDispatch(VkCommandBuffer* commandBuffer, u32 groupCountX, u32 groupCountY, u32 groupCountZ) #extern vulkan

vkCmdDispatchIndirect(VkCommandBuffer* commandBuffer, VkBuffer* buffer, u64 offset) #extern vulkan

vkCmdCopyBuffer(VkCommandBuffer* commandBuffer, VkBuffer* srcBuffer, VkBuffer* dstBuffer, u32 regionCount, VkBufferCopy* pRegions) #extern vulkan

vkCmdCopyImage(VkCommandBuffer* commandBuffer, VkImage* srcImage, VkImageLayout srcImageLayout, VkImage* dstImage, VkImageLayout dstImageLayout, u32 regionCount, VkImageCopy* pRegions) #extern vulkan

vkCmdBlitImage(VkCommandBuffer* commandBuffer, VkImage* srcImage, VkImageLayout srcImageLayout, VkImage* dstImage, VkImageLayout dstImageLayout, u32 regionCount, VkImageBlit* pRegions, VkFilter filter) #extern vulkan

vkCmdCopyBufferToImage(VkCommandBuffer* commandBuffer, VkBuffer* srcBuffer, VkImage* dstImage, VkImageLayout dstImageLayout, u32 regionCount, VkBufferImageCopy* pRegions) #extern vulkan

vkCmdCopyImageToBuffer(VkCommandBuffer* commandBuffer, VkImage* srcImage, VkImageLayout srcImageLayout, VkBuffer* dstBuffer, u32 regionCount, VkBufferImageCopy* pRegions) #extern vulkan

vkCmdUpdateBuffer(VkCommandBuffer* commandBuffer, VkBuffer* dstBuffer, u64 dstOffset, u64 dataSize, void* pData) #extern vulkan

vkCmdFillBuffer(VkCommandBuffer* commandBuffer, VkBuffer* dstBuffer, u64 dstOffset, u64 size, u32 data) #extern vulkan

vkCmdClearColorImage(VkCommandBuffer* commandBuffer, VkImage* image, VkImageLayout imageLayout, VkClearColorValue* pColor, u32 rangeCount, VkImageSubresourceRange* pRanges) #extern vulkan

vkCmdClearDepthStencilImage(VkCommandBuffer* commandBuffer, VkImage* image, VkImageLayout imageLayout, VkClearDepthStencilValue* pDepthStencil, u32 rangeCount, VkImageSubresourceRange* pRanges) #extern vulkan

vkCmdClearAttachments(VkCommandBuffer* commandBuffer, u32 attachmentCount, VkClearAttachment* pAttachments, u32 rectCount, VkClearRect* pRects) #extern vulkan

vkCmdResolveImage(VkCommandBuffer* commandBuffer, VkImage* srcImage, VkImageLayout srcImageLayout, VkImage* dstImage, VkImageLayout dstImageLayout, u32 regionCount, VkImageResolve* pRegions) #extern vulkan

vkCmdSetEvent(VkCommandBuffer* commandBuffer, VkEvent* event, u32 stageMask) #extern vulkan

vkCmdResetEvent(VkCommandBuffer* commandBuffer, VkEvent* event, u32 stageMask) #extern vulkan

vkCmdWaitEvents(VkCommandBuffer* commandBuffer, u32 eventCount, VkEvent** pEvents, u32 srcStageMask, u32 dstStageMask, u32 memoryBarrierCount, VkMemoryBarrier* pMemoryBarriers, u32 bufferMemoryBarrierCount, VkBufferMemoryBarrier* pBufferMemoryBarriers, u32 imageMemoryBarrierCount, VkImageMemoryBarrier* pImageMemoryBarriers) #extern vulkan

vkCmdPipelineBarrier(VkCommandBuffer* commandBuffer, VkPipelineStageFlagBits srcStageMask, VkPipelineStageFlagBits dstStageMask, u32 dependencyFlags, u32 memoryBarrierCount, VkMemoryBarrier* pMemoryBarriers, u32 bufferMemoryBarrierCount, VkBufferMemoryBarrier* pBufferMemoryBarriers, u32 imageMemoryBarrierCount, VkImageMemoryBarrier* pImageMemoryBarriers) #extern vulkan

vkCmdBeginQuery(VkCommandBuffer* commandBuffer, VkQueryPool* queryPool, u32 query, u32 flags) #extern vulkan

vkCmdEndQuery(VkCommandBuffer* commandBuffer, VkQueryPool* queryPool, u32 query) #extern vulkan

vkCmdResetQueryPool(VkCommandBuffer* commandBuffer, VkQueryPool* queryPool, u32 firstQuery, u32 queryCount) #extern vulkan

vkCmdWriteTimestamp(VkCommandBuffer* commandBuffer, VkPipelineStageFlagBits pipelineStage, VkQueryPool* queryPool, u32 query) #extern vulkan

vkCmdCopyQueryPoolResults(VkCommandBuffer* commandBuffer, VkQueryPool* queryPool, u32 firstQuery, u32 queryCount, VkBuffer* dstBuffer, u64 dstOffset, u64 stride, u32 flags) #extern vulkan

vkCmdPushConstants(VkCommandBuffer* commandBuffer, VkPipelineLayout* layout, VkShaderStageFlagBits stageFlags, u32 offset, u32 size, void* pValues) #extern vulkan

vkCmdBeginRenderPass(VkCommandBuffer* commandBuffer, VkRenderPassBeginInfo* pRenderPassBegin, VkSubpassContents contents) #extern vulkan

vkCmdNextSubpass(VkCommandBuffer* commandBuffer, VkSubpassContents contents) #extern vulkan

vkCmdEndRenderPass(VkCommandBuffer* commandBuffer) #extern vulkan

vkCmdExecuteCommands(VkCommandBuffer* commandBuffer, u32 commandBufferCount, VkCommandBuffer** pCommandBuffers) #extern vulkan

struct VkSamplerYcbcrConversion {}
struct VkDescriptorUpdateTemplate {}
enum VkPointClippingBehavior {
    VK_POINT_CLIPPING_BEHAVIOR_ALL_CLIP_PLANES = 0;
    VK_POINT_CLIPPING_BEHAVIOR_USER_CLIP_PLANES_ONLY = 1;
    VK_POINT_CLIPPING_BEHAVIOR_ALL_CLIP_PLANES_KHR = VK_POINT_CLIPPING_BEHAVIOR_ALL_CLIP_PLANES;
    VK_POINT_CLIPPING_BEHAVIOR_USER_CLIP_PLANES_ONLY_KHR = VK_POINT_CLIPPING_BEHAVIOR_USER_CLIP_PLANES_ONLY;
    VK_POINT_CLIPPING_BEHAVIOR_MAX_ENUM = 0x7FFFFFFF;
}

enum VkTessellationDomainOrigin {
    VK_TESSELLATION_DOMAIN_ORIGIN_UPPER_LEFT = 0;
    VK_TESSELLATION_DOMAIN_ORIGIN_LOWER_LEFT = 1;
    VK_TESSELLATION_DOMAIN_ORIGIN_UPPER_LEFT_KHR = VK_TESSELLATION_DOMAIN_ORIGIN_UPPER_LEFT;
    VK_TESSELLATION_DOMAIN_ORIGIN_LOWER_LEFT_KHR = VK_TESSELLATION_DOMAIN_ORIGIN_LOWER_LEFT;
    VK_TESSELLATION_DOMAIN_ORIGIN_MAX_ENUM = 0x7FFFFFFF;
}

enum VkSamplerYcbcrModelConversion {
    VK_SAMPLER_YCBCR_MODEL_CONVERSION_RGB_IDENTITY = 0;
    VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_IDENTITY = 1;
    VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_709 = 2;
    VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_601 = 3;
    VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_2020 = 4;
    VK_SAMPLER_YCBCR_MODEL_CONVERSION_RGB_IDENTITY_KHR = VK_SAMPLER_YCBCR_MODEL_CONVERSION_RGB_IDENTITY;
    VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_IDENTITY_KHR = VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_IDENTITY;
    VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_709_KHR = VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_709;
    VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_601_KHR = VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_601;
    VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_2020_KHR = VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_2020;
    VK_SAMPLER_YCBCR_MODEL_CONVERSION_MAX_ENUM = 0x7FFFFFFF;
}

enum VkSamplerYcbcrRange {
    VK_SAMPLER_YCBCR_RANGE_ITU_FULL = 0;
    VK_SAMPLER_YCBCR_RANGE_ITU_NARROW = 1;
    VK_SAMPLER_YCBCR_RANGE_ITU_FULL_KHR = VK_SAMPLER_YCBCR_RANGE_ITU_FULL;
    VK_SAMPLER_YCBCR_RANGE_ITU_NARROW_KHR = VK_SAMPLER_YCBCR_RANGE_ITU_NARROW;
    VK_SAMPLER_YCBCR_RANGE_MAX_ENUM = 0x7FFFFFFF;
}

enum VkChromaLocation {
    VK_CHROMA_LOCATION_COSITED_EVEN = 0;
    VK_CHROMA_LOCATION_MIDPOINT = 1;
    VK_CHROMA_LOCATION_COSITED_EVEN_KHR = VK_CHROMA_LOCATION_COSITED_EVEN;
    VK_CHROMA_LOCATION_MIDPOINT_KHR = VK_CHROMA_LOCATION_MIDPOINT;
    VK_CHROMA_LOCATION_MAX_ENUM = 0x7FFFFFFF;
}

enum VkDescriptorUpdateTemplateType {
    VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_DESCRIPTOR_SET = 0;
    VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_PUSH_DESCRIPTORS_KHR = 1;
    VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_DESCRIPTOR_SET_KHR = VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_DESCRIPTOR_SET;
    VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_MAX_ENUM = 0x7FFFFFFF;
}

enum VkSubgroupFeatureFlagBits {
    VK_SUBGROUP_FEATURE_BASIC_BIT = 0x00000001;
    VK_SUBGROUP_FEATURE_VOTE_BIT = 0x00000002;
    VK_SUBGROUP_FEATURE_ARITHMETIC_BIT = 0x00000004;
    VK_SUBGROUP_FEATURE_BALLOT_BIT = 0x00000008;
    VK_SUBGROUP_FEATURE_SHUFFLE_BIT = 0x00000010;
    VK_SUBGROUP_FEATURE_SHUFFLE_RELATIVE_BIT = 0x00000020;
    VK_SUBGROUP_FEATURE_CLUSTERED_BIT = 0x00000040;
    VK_SUBGROUP_FEATURE_QUAD_BIT = 0x00000080;
    VK_SUBGROUP_FEATURE_PARTITIONED_BIT_NV = 0x00000100;
    VK_SUBGROUP_FEATURE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF;
}

enum VkPeerMemoryFeatureFlagBits {
    VK_PEER_MEMORY_FEATURE_COPY_SRC_BIT = 0x00000001;
    VK_PEER_MEMORY_FEATURE_COPY_DST_BIT = 0x00000002;
    VK_PEER_MEMORY_FEATURE_GENERIC_SRC_BIT = 0x00000004;
    VK_PEER_MEMORY_FEATURE_GENERIC_DST_BIT = 0x00000008;
    VK_PEER_MEMORY_FEATURE_COPY_SRC_BIT_KHR = VK_PEER_MEMORY_FEATURE_COPY_SRC_BIT;
    VK_PEER_MEMORY_FEATURE_COPY_DST_BIT_KHR = VK_PEER_MEMORY_FEATURE_COPY_DST_BIT;
    VK_PEER_MEMORY_FEATURE_GENERIC_SRC_BIT_KHR = VK_PEER_MEMORY_FEATURE_GENERIC_SRC_BIT;
    VK_PEER_MEMORY_FEATURE_GENERIC_DST_BIT_KHR = VK_PEER_MEMORY_FEATURE_GENERIC_DST_BIT;
    VK_PEER_MEMORY_FEATURE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF;
}

enum VkMemoryAllocateFlagBits {
    VK_MEMORY_ALLOCATE_DEVICE_MASK_BIT = 0x00000001;
    VK_MEMORY_ALLOCATE_DEVICE_ADDRESS_BIT = 0x00000002;
    VK_MEMORY_ALLOCATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT = 0x00000004;
    VK_MEMORY_ALLOCATE_DEVICE_MASK_BIT_KHR = VK_MEMORY_ALLOCATE_DEVICE_MASK_BIT;
    VK_MEMORY_ALLOCATE_DEVICE_ADDRESS_BIT_KHR = VK_MEMORY_ALLOCATE_DEVICE_ADDRESS_BIT;
    VK_MEMORY_ALLOCATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT_KHR = VK_MEMORY_ALLOCATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT;
    VK_MEMORY_ALLOCATE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF;
}

enum VkExternalMemoryHandleTypeFlagBits {
    VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_FD_BIT = 0x00000001;
    VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_BIT = 0x00000002;
    VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT = 0x00000004;
    VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_BIT = 0x00000008;
    VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_KMT_BIT = 0x00000010;
    VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_HEAP_BIT = 0x00000020;
    VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_RESOURCE_BIT = 0x00000040;
    VK_EXTERNAL_MEMORY_HANDLE_TYPE_DMA_BUF_BIT_EXT = 0x00000200;
    VK_EXTERNAL_MEMORY_HANDLE_TYPE_ANDROID_HARDWARE_BUFFER_BIT_ANDROID = 0x00000400;
    VK_EXTERNAL_MEMORY_HANDLE_TYPE_HOST_ALLOCATION_BIT_EXT = 0x00000080;
    VK_EXTERNAL_MEMORY_HANDLE_TYPE_HOST_MAPPED_FOREIGN_MEMORY_BIT_EXT = 0x00000100;
    VK_EXTERNAL_MEMORY_HANDLE_TYPE_ZIRCON_VMO_BIT_FUCHSIA = 0x00000800;
    VK_EXTERNAL_MEMORY_HANDLE_TYPE_RDMA_ADDRESS_BIT_NV = 0x00001000;
    VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_FD_BIT_KHR = VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_FD_BIT;
    VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_BIT_KHR = VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_BIT;
    VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT_KHR = VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT;
    VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_BIT_KHR = VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_BIT;
    VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_KMT_BIT_KHR = VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_KMT_BIT;
    VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_HEAP_BIT_KHR = VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_HEAP_BIT;
    VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_RESOURCE_BIT_KHR = VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_RESOURCE_BIT;
    VK_EXTERNAL_MEMORY_HANDLE_TYPE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF;
}

enum VkExternalMemoryFeatureFlagBits {
    VK_EXTERNAL_MEMORY_FEATURE_DEDICATED_ONLY_BIT = 0x00000001;
    VK_EXTERNAL_MEMORY_FEATURE_EXPORTABLE_BIT = 0x00000002;
    VK_EXTERNAL_MEMORY_FEATURE_IMPORTABLE_BIT = 0x00000004;
    VK_EXTERNAL_MEMORY_FEATURE_DEDICATED_ONLY_BIT_KHR = VK_EXTERNAL_MEMORY_FEATURE_DEDICATED_ONLY_BIT;
    VK_EXTERNAL_MEMORY_FEATURE_EXPORTABLE_BIT_KHR = VK_EXTERNAL_MEMORY_FEATURE_EXPORTABLE_BIT;
    VK_EXTERNAL_MEMORY_FEATURE_IMPORTABLE_BIT_KHR = VK_EXTERNAL_MEMORY_FEATURE_IMPORTABLE_BIT;
    VK_EXTERNAL_MEMORY_FEATURE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF;
}

enum VkExternalFenceHandleTypeFlagBits {
    VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_FD_BIT = 0x00000001;
    VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_BIT = 0x00000002;
    VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT = 0x00000004;
    VK_EXTERNAL_FENCE_HANDLE_TYPE_SYNC_FD_BIT = 0x00000008;
    VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_FD_BIT_KHR = VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_FD_BIT;
    VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_BIT_KHR = VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_BIT;
    VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT_KHR = VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT;
    VK_EXTERNAL_FENCE_HANDLE_TYPE_SYNC_FD_BIT_KHR = VK_EXTERNAL_FENCE_HANDLE_TYPE_SYNC_FD_BIT;
    VK_EXTERNAL_FENCE_HANDLE_TYPE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF;
}

enum VkExternalFenceFeatureFlagBits {
    VK_EXTERNAL_FENCE_FEATURE_EXPORTABLE_BIT = 0x00000001;
    VK_EXTERNAL_FENCE_FEATURE_IMPORTABLE_BIT = 0x00000002;
    VK_EXTERNAL_FENCE_FEATURE_EXPORTABLE_BIT_KHR = VK_EXTERNAL_FENCE_FEATURE_EXPORTABLE_BIT;
    VK_EXTERNAL_FENCE_FEATURE_IMPORTABLE_BIT_KHR = VK_EXTERNAL_FENCE_FEATURE_IMPORTABLE_BIT;
    VK_EXTERNAL_FENCE_FEATURE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF;
}

enum VkFenceImportFlagBits {
    VK_FENCE_IMPORT_TEMPORARY_BIT = 0x00000001;
    VK_FENCE_IMPORT_TEMPORARY_BIT_KHR = VK_FENCE_IMPORT_TEMPORARY_BIT;
    VK_FENCE_IMPORT_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF;
}

enum VkSemaphoreImportFlagBits {
    VK_SEMAPHORE_IMPORT_TEMPORARY_BIT = 0x00000001;
    VK_SEMAPHORE_IMPORT_TEMPORARY_BIT_KHR = VK_SEMAPHORE_IMPORT_TEMPORARY_BIT;
    VK_SEMAPHORE_IMPORT_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF;
}

enum VkExternalSemaphoreHandleTypeFlagBits {
    VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_FD_BIT = 0x00000001;
    VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_BIT = 0x00000002;
    VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT = 0x00000004;
    VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_D3D12_FENCE_BIT = 0x00000008;
    VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_SYNC_FD_BIT = 0x00000010;
    VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_ZIRCON_EVENT_BIT_FUCHSIA = 0x00000080;
    VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_D3D11_FENCE_BIT = VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_D3D12_FENCE_BIT;
    VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_FD_BIT_KHR = VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_FD_BIT;
    VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_BIT_KHR = VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_BIT;
    VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT_KHR = VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT;
    VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_D3D12_FENCE_BIT_KHR = VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_D3D12_FENCE_BIT;
    VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_SYNC_FD_BIT_KHR = VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_SYNC_FD_BIT;
    VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF;
}

enum VkExternalSemaphoreFeatureFlagBits {
    VK_EXTERNAL_SEMAPHORE_FEATURE_EXPORTABLE_BIT = 0x00000001;
    VK_EXTERNAL_SEMAPHORE_FEATURE_IMPORTABLE_BIT = 0x00000002;
    VK_EXTERNAL_SEMAPHORE_FEATURE_EXPORTABLE_BIT_KHR = VK_EXTERNAL_SEMAPHORE_FEATURE_EXPORTABLE_BIT;
    VK_EXTERNAL_SEMAPHORE_FEATURE_IMPORTABLE_BIT_KHR = VK_EXTERNAL_SEMAPHORE_FEATURE_IMPORTABLE_BIT;
    VK_EXTERNAL_SEMAPHORE_FEATURE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF;
}

struct VkPhysicalDeviceSubgroupProperties {
    sType := VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_PROPERTIES;
    pNext: void*;
    subgroupSize: u32;
    supportedStages: u32;
    supportedOperations: u32;
    quadOperationsInAllStages: u32;
}

struct VkBindBufferMemoryInfo {
    sType := VkStructureType.VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_INFO;
    pNext: void*;
    buffer: VkBuffer*;
    memory: VkDeviceMemory*;
    memoryOffset: u64;
}

struct VkBindImageMemoryInfo {
    sType := VkStructureType.VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_INFO;
    pNext: void*;
    image: VkImage*;
    memory: VkDeviceMemory*;
    memoryOffset: u64;
}

struct VkPhysicalDevice16BitStorageFeatures {
    sType := VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_16BIT_STORAGE_FEATURES;
    pNext: void*;
    storageBuffer16BitAccess: u32;
    uniformAndStorageBuffer16BitAccess: u32;
    storagePushConstant16: u32;
    storageInputOutput16: u32;
}

struct VkMemoryDedicatedRequirements {
    sType := VkStructureType.VK_STRUCTURE_TYPE_MEMORY_DEDICATED_REQUIREMENTS;
    pNext: void*;
    prefersDedicatedAllocation: u32;
    requiresDedicatedAllocation: u32;
}

struct VkMemoryDedicatedAllocateInfo {
    sType := VkStructureType.VK_STRUCTURE_TYPE_MEMORY_DEDICATED_ALLOCATE_INFO;
    pNext: void*;
    image: VkImage*;
    buffer: VkBuffer*;
}

struct VkMemoryAllocateFlagsInfo {
    sType := VkStructureType.VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_FLAGS_INFO;
    pNext: void*;
    flags: u32;
    deviceMask: u32;
}

struct VkDeviceGroupRenderPassBeginInfo {
    sType := VkStructureType.VK_STRUCTURE_TYPE_DEVICE_GROUP_RENDER_PASS_BEGIN_INFO;
    pNext: void*;
    deviceMask: u32;
    deviceRenderAreaCount: u32;
    pDeviceRenderAreas: VkRect2D*;
}

struct VkDeviceGroupCommandBufferBeginInfo {
    sType := VkStructureType.VK_STRUCTURE_TYPE_DEVICE_GROUP_COMMAND_BUFFER_BEGIN_INFO;
    pNext: void*;
    deviceMask: u32;
}

struct VkDeviceGroupSubmitInfo {
    sType := VkStructureType.VK_STRUCTURE_TYPE_DEVICE_GROUP_SUBMIT_INFO;
    pNext: void*;
    waitSemaphoreCount: u32;
    pWaitSemaphoreDeviceIndices: u32*;
    commandBufferCount: u32;
    pCommandBufferDeviceMasks: u32*;
    signalSemaphoreCount: u32;
    pSignalSemaphoreDeviceIndices: u32*;
}

struct VkDeviceGroupBindSparseInfo {
    sType := VkStructureType.VK_STRUCTURE_TYPE_DEVICE_GROUP_BIND_SPARSE_INFO;
    pNext: void*;
    resourceDeviceIndex: u32;
    memoryDeviceIndex: u32;
}

struct VkBindBufferMemoryDeviceGroupInfo {
    sType := VkStructureType.VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_DEVICE_GROUP_INFO;
    pNext: void*;
    deviceIndexCount: u32;
    pDeviceIndices: u32*;
}

struct VkBindImageMemoryDeviceGroupInfo {
    sType := VkStructureType.VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_DEVICE_GROUP_INFO;
    pNext: void*;
    deviceIndexCount: u32;
    pDeviceIndices: u32*;
    splitInstanceBindRegionCount: u32;
    pSplitInstanceBindRegions: VkRect2D*;
}

struct VkPhysicalDeviceGroupProperties {
    sType := VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GROUP_PROPERTIES;
    pNext: void*;
    physicalDeviceCount: u32;
    physicalDevices: CArray<VkPhysicalDevice*>[32];
    subsetAllocation: u32;
}

struct VkDeviceGroupDeviceCreateInfo {
    sType := VkStructureType.VK_STRUCTURE_TYPE_DEVICE_GROUP_DEVICE_CREATE_INFO;
    pNext: void*;
    physicalDeviceCount: u32;
    pPhysicalDevices: VkPhysicalDevice**;
}

struct VkBufferMemoryRequirementsInfo2 {
    sType := VkStructureType.VK_STRUCTURE_TYPE_BUFFER_MEMORY_REQUIREMENTS_INFO_2;
    pNext: void*;
    buffer: VkBuffer*;
}

struct VkImageMemoryRequirementsInfo2 {
    sType := VkStructureType.VK_STRUCTURE_TYPE_IMAGE_MEMORY_REQUIREMENTS_INFO_2;
    pNext: void*;
    image: VkImage*;
}

struct VkImageSparseMemoryRequirementsInfo2 {
    sType := VkStructureType.VK_STRUCTURE_TYPE_IMAGE_SPARSE_MEMORY_REQUIREMENTS_INFO_2;
    pNext: void*;
    image: VkImage*;
}

struct VkMemoryRequirements2 {
    sType := VkStructureType.VK_STRUCTURE_TYPE_MEMORY_REQUIREMENTS_2;
    pNext: void*;
    memoryRequirements: VkMemoryRequirements;
}

struct VkSparseImageMemoryRequirements2 {
    sType := VkStructureType.VK_STRUCTURE_TYPE_SPARSE_IMAGE_MEMORY_REQUIREMENTS_2;
    pNext: void*;
    memoryRequirements: VkSparseImageMemoryRequirements;
}

struct VkPhysicalDeviceFeatures2 {
    sType := VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FEATURES_2;
    pNext: void*;
    features: VkPhysicalDeviceFeatures;
}

struct VkPhysicalDeviceProperties2 {
    sType := VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROPERTIES_2;
    pNext: void*;
    properties: VkPhysicalDeviceProperties;
}

struct VkFormatProperties2 {
    sType := VkStructureType.VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_2;
    pNext: void*;
    formatProperties: VkFormatProperties;
}

struct VkImageFormatProperties2 {
    sType := VkStructureType.VK_STRUCTURE_TYPE_IMAGE_FORMAT_PROPERTIES_2;
    pNext: void*;
    imageFormatProperties: VkImageFormatProperties;
}

struct VkPhysicalDeviceImageFormatInfo2 {
    sType := VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_FORMAT_INFO_2;
    pNext: void*;
    format: VkFormat;
    type: VkImageType;
    tiling: VkImageTiling;
    usage: u32;
    flags: u32;
}

struct VkQueueFamilyProperties2 {
    sType := VkStructureType.VK_STRUCTURE_TYPE_QUEUE_FAMILY_PROPERTIES_2;
    pNext: void*;
    queueFamilyProperties: VkQueueFamilyProperties;
}

struct VkPhysicalDeviceMemoryProperties2 {
    sType := VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_PROPERTIES_2;
    pNext: void*;
    memoryProperties: VkPhysicalDeviceMemoryProperties;
}

struct VkSparseImageFormatProperties2 {
    sType := VkStructureType.VK_STRUCTURE_TYPE_SPARSE_IMAGE_FORMAT_PROPERTIES_2;
    pNext: void*;
    properties: VkSparseImageFormatProperties;
}

struct VkPhysicalDeviceSparseImageFormatInfo2 {
    sType := VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SPARSE_IMAGE_FORMAT_INFO_2;
    pNext: void*;
    format: VkFormat;
    type: VkImageType;
    samples: VkSampleCountFlagBits;
    usage: u32;
    tiling: VkImageTiling;
}

struct VkPhysicalDevicePointClippingProperties {
    sType := VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_POINT_CLIPPING_PROPERTIES;
    pNext: void*;
    pointClippingBehavior: VkPointClippingBehavior;
}

struct VkInputAttachmentAspectReference {
    subpass: u32;
    inputAttachmentIndex: u32;
    aspectMask: u32;
}

struct VkRenderPassInputAttachmentAspectCreateInfo {
    sType := VkStructureType.VK_STRUCTURE_TYPE_RENDER_PASS_INPUT_ATTACHMENT_ASPECT_CREATE_INFO;
    pNext: void*;
    aspectReferenceCount: u32;
    pAspectReferences: VkInputAttachmentAspectReference*;
}

struct VkImageViewUsageCreateInfo {
    sType := VkStructureType.VK_STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO;
    pNext: void*;
    usage: u32;
}

struct VkPipelineTessellationDomainOriginStateCreateInfo {
    sType := VkStructureType.VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_DOMAIN_ORIGIN_STATE_CREATE_INFO;
    pNext: void*;
    domainOrigin: VkTessellationDomainOrigin;
}

struct VkRenderPassMultiviewCreateInfo {
    sType := VkStructureType.VK_STRUCTURE_TYPE_RENDER_PASS_MULTIVIEW_CREATE_INFO;
    pNext: void*;
    subpassCount: u32;
    pViewMasks: u32*;
    dependencyCount: u32;
    pViewOffsets: s32*;
    correlationMaskCount: u32;
    pCorrelationMasks: u32*;
}

struct VkPhysicalDeviceMultiviewFeatures {
    sType := VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_FEATURES;
    pNext: void*;
    multiview: u32;
    multiviewGeometryShader: u32;
    multiviewTessellationShader: u32;
}

struct VkPhysicalDeviceMultiviewProperties {
    sType := VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PROPERTIES;
    pNext: void*;
    maxMultiviewViewCount: u32;
    maxMultiviewInstanceIndex: u32;
}

struct VkPhysicalDeviceVariablePointersFeatures {
    sType := VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTERS_FEATURES;
    pNext: void*;
    variablePointersStorageBuffer: u32;
    variablePointers: u32;
}

struct VkPhysicalDeviceProtectedMemoryFeatures {
    sType := VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROTECTED_MEMORY_FEATURES;
    pNext: void*;
    protectedMemory: u32;
}

struct VkPhysicalDeviceProtectedMemoryProperties {
    sType := VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROTECTED_MEMORY_PROPERTIES;
    pNext: void*;
    protectedNoFault: u32;
}

struct VkDeviceQueueInfo2 {
    sType := VkStructureType.VK_STRUCTURE_TYPE_DEVICE_QUEUE_INFO_2;
    pNext: void*;
    flags: u32;
    queueFamilyIndex: u32;
    queueIndex: u32;
}

struct VkProtectedSubmitInfo {
    sType := VkStructureType.VK_STRUCTURE_TYPE_PROTECTED_SUBMIT_INFO;
    pNext: void*;
    protectedSubmit: u32;
}

struct VkSamplerYcbcrConversionCreateInfo {
    sType := VkStructureType.VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_CREATE_INFO;
    pNext: void*;
    format: VkFormat;
    ycbcrModel: VkSamplerYcbcrModelConversion;
    ycbcrRange: VkSamplerYcbcrRange;
    components: VkComponentMapping;
    xChromaOffset: VkChromaLocation;
    yChromaOffset: VkChromaLocation;
    chromaFilter: VkFilter;
    forceExplicitReconstruction: u32;
}

struct VkSamplerYcbcrConversionInfo {
    sType := VkStructureType.VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_INFO;
    pNext: void*;
    conversion: VkSamplerYcbcrConversion*;
}

struct VkBindImagePlaneMemoryInfo {
    sType := VkStructureType.VK_STRUCTURE_TYPE_BIND_IMAGE_PLANE_MEMORY_INFO;
    pNext: void*;
    planeAspect: VkImageAspectFlagBits;
}

struct VkImagePlaneMemoryRequirementsInfo {
    sType := VkStructureType.VK_STRUCTURE_TYPE_IMAGE_PLANE_MEMORY_REQUIREMENTS_INFO;
    pNext: void*;
    planeAspect: VkImageAspectFlagBits;
}

struct VkPhysicalDeviceSamplerYcbcrConversionFeatures {
    sType := VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_YCBCR_CONVERSION_FEATURES;
    pNext: void*;
    samplerYcbcrConversion: u32;
}

struct VkSamplerYcbcrConversionImageFormatProperties {
    sType := VkStructureType.VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_IMAGE_FORMAT_PROPERTIES;
    pNext: void*;
    combinedImageSamplerDescriptorCount: u32;
}

struct VkDescriptorUpdateTemplateEntry {
    dstBinding: u32;
    dstArrayElement: u32;
    descriptorCount: u32;
    descriptorType: VkDescriptorType;
    offset: u64;
    stride: u64;
}

struct VkDescriptorUpdateTemplateCreateInfo {
    sType := VkStructureType.VK_STRUCTURE_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_CREATE_INFO;
    pNext: void*;
    flags: u32;
    descriptorUpdateEntryCount: u32;
    pDescriptorUpdateEntries: VkDescriptorUpdateTemplateEntry*;
    templateType: VkDescriptorUpdateTemplateType;
    descriptorSetLayout: VkDescriptorSetLayout*;
    pipelineBindPoint: VkPipelineBindPoint;
    pipelineLayout: VkPipelineLayout*;
    set: u32;
}

struct VkExternalMemoryProperties {
    externalMemoryFeatures: u32;
    exportFromImportedHandleTypes: u32;
    compatibleHandleTypes: u32;
}

struct VkPhysicalDeviceExternalImageFormatInfo {
    sType := VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_IMAGE_FORMAT_INFO;
    pNext: void*;
    handleType: VkExternalMemoryHandleTypeFlagBits;
}

struct VkExternalImageFormatProperties {
    sType := VkStructureType.VK_STRUCTURE_TYPE_EXTERNAL_IMAGE_FORMAT_PROPERTIES;
    pNext: void*;
    externalMemoryProperties: VkExternalMemoryProperties;
}

struct VkPhysicalDeviceExternalBufferInfo {
    sType := VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_BUFFER_INFO;
    pNext: void*;
    flags: u32;
    usage: u32;
    handleType: VkExternalMemoryHandleTypeFlagBits;
}

struct VkExternalBufferProperties {
    sType := VkStructureType.VK_STRUCTURE_TYPE_EXTERNAL_BUFFER_PROPERTIES;
    pNext: void*;
    externalMemoryProperties: VkExternalMemoryProperties;
}

struct VkPhysicalDeviceIDProperties {
    sType := VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ID_PROPERTIES;
    pNext: void*;
    deviceUUID: CArray<u8>[16];
    driverUUID: CArray<u8>[16];
    deviceLUID: CArray<u8>[8];
    deviceNodeMask: u32;
    deviceLUIDValid: u32;
}

struct VkExternalMemoryImageCreateInfo {
    sType := VkStructureType.VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO;
    pNext: void*;
    handleTypes: u32;
}

struct VkExternalMemoryBufferCreateInfo {
    sType := VkStructureType.VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_BUFFER_CREATE_INFO;
    pNext: void*;
    handleTypes: u32;
}

struct VkExportMemoryAllocateInfo {
    sType := VkStructureType.VK_STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO;
    pNext: void*;
    handleTypes: u32;
}

struct VkPhysicalDeviceExternalFenceInfo {
    sType := VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_FENCE_INFO;
    pNext: void*;
    handleType: VkExternalFenceHandleTypeFlagBits;
}

struct VkExternalFenceProperties {
    sType := VkStructureType.VK_STRUCTURE_TYPE_EXTERNAL_FENCE_PROPERTIES;
    pNext: void*;
    exportFromImportedHandleTypes: u32;
    compatibleHandleTypes: u32;
    externalFenceFeatures: u32;
}

struct VkExportFenceCreateInfo {
    sType := VkStructureType.VK_STRUCTURE_TYPE_EXPORT_FENCE_CREATE_INFO;
    pNext: void*;
    handleTypes: u32;
}

struct VkExportSemaphoreCreateInfo {
    sType := VkStructureType.VK_STRUCTURE_TYPE_EXPORT_SEMAPHORE_CREATE_INFO;
    pNext: void*;
    handleTypes: u32;
}

struct VkPhysicalDeviceExternalSemaphoreInfo {
    sType := VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_SEMAPHORE_INFO;
    pNext: void*;
    handleType: VkExternalSemaphoreHandleTypeFlagBits;
}

struct VkExternalSemaphoreProperties {
    sType := VkStructureType.VK_STRUCTURE_TYPE_EXTERNAL_SEMAPHORE_PROPERTIES;
    pNext: void*;
    exportFromImportedHandleTypes: u32;
    compatibleHandleTypes: u32;
    externalSemaphoreFeatures: u32;
}

struct VkPhysicalDeviceMaintenance3Properties {
    sType := VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_3_PROPERTIES;
    pNext: void*;
    maxPerSetDescriptors: u32;
    maxMemoryAllocationSize: u64;
}

struct VkDescriptorSetLayoutSupport {
    sType := VkStructureType.VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_SUPPORT;
    pNext: void*;
    supported: u32;
}

struct VkPhysicalDeviceShaderDrawParametersFeatures {
    sType := VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DRAW_PARAMETERS_FEATURES;
    pNext: void*;
    shaderDrawParameters: u32;
}

interface VkResult PFN_vkEnumerateInstanceVersion(u32* pApiVersion)

interface VkResult PFN_vkBindBufferMemory2(VkDevice* device, u32 bindInfoCount, VkBindBufferMemoryInfo* pBindInfos)

interface VkResult PFN_vkBindImageMemory2(VkDevice* device, u32 bindInfoCount, VkBindImageMemoryInfo* pBindInfos)

interface PFN_vkGetDeviceGroupPeerMemoryFeatures(VkDevice* device, u32 heapIndex, u32 localDeviceIndex, u32 remoteDeviceIndex, u32* pPeerMemoryFeatures)

interface PFN_vkCmdSetDeviceMask(VkCommandBuffer* commandBuffer, u32 deviceMask)

interface PFN_vkCmdDispatchBase(VkCommandBuffer* commandBuffer, u32 baseGroupX, u32 baseGroupY, u32 baseGroupZ, u32 groupCountX, u32 groupCountY, u32 groupCountZ)

interface VkResult PFN_vkEnumeratePhysicalDeviceGroups(VkInstance* instance, u32* pPhysicalDeviceGroupCount, VkPhysicalDeviceGroupProperties* pPhysicalDeviceGroupProperties)

interface PFN_vkGetImageMemoryRequirements2(VkDevice* device, VkImageMemoryRequirementsInfo2* pInfo, VkMemoryRequirements2* pMemoryRequirements)

interface PFN_vkGetBufferMemoryRequirements2(VkDevice* device, VkBufferMemoryRequirementsInfo2* pInfo, VkMemoryRequirements2* pMemoryRequirements)

interface PFN_vkGetImageSparseMemoryRequirements2(VkDevice* device, VkImageSparseMemoryRequirementsInfo2* pInfo, u32* pSparseMemoryRequirementCount, VkSparseImageMemoryRequirements2* pSparseMemoryRequirements)

interface PFN_vkGetPhysicalDeviceFeatures2(VkPhysicalDevice* physicalDevice, VkPhysicalDeviceFeatures2* pFeatures)

interface PFN_vkGetPhysicalDeviceProperties2(VkPhysicalDevice* physicalDevice, VkPhysicalDeviceProperties2* pProperties)

interface PFN_vkGetPhysicalDeviceFormatProperties2(VkPhysicalDevice* physicalDevice, VkFormat format, VkFormatProperties2* pFormatProperties)

interface VkResult PFN_vkGetPhysicalDeviceImageFormatProperties2(VkPhysicalDevice* physicalDevice, VkPhysicalDeviceImageFormatInfo2* pImageFormatInfo, VkImageFormatProperties2* pImageFormatProperties)

interface PFN_vkGetPhysicalDeviceQueueFamilyProperties2(VkPhysicalDevice* physicalDevice, u32* pQueueFamilyPropertyCount, VkQueueFamilyProperties2* pQueueFamilyProperties)

interface PFN_vkGetPhysicalDeviceMemoryProperties2(VkPhysicalDevice* physicalDevice, VkPhysicalDeviceMemoryProperties2* pMemoryProperties)

interface PFN_vkGetPhysicalDeviceSparseImageFormatProperties2(VkPhysicalDevice* physicalDevice, VkPhysicalDeviceSparseImageFormatInfo2* pFormatInfo, u32* pPropertyCount, VkSparseImageFormatProperties2* pProperties)

interface PFN_vkTrimCommandPool(VkDevice* device, VkCommandPool* commandPool, u32 flags)

interface PFN_vkGetDeviceQueue2(VkDevice* device, VkDeviceQueueInfo2* pQueueInfo, VkQueue** pQueue)

interface VkResult PFN_vkCreateSamplerYcbcrConversion(VkDevice* device, VkSamplerYcbcrConversionCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, VkSamplerYcbcrConversion** pYcbcrConversion)

interface PFN_vkDestroySamplerYcbcrConversion(VkDevice* device, VkSamplerYcbcrConversion* ycbcrConversion, VkAllocationCallbacks* pAllocator)

interface VkResult PFN_vkCreateDescriptorUpdateTemplate(VkDevice* device, VkDescriptorUpdateTemplateCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, VkDescriptorUpdateTemplate** pDescriptorUpdateTemplate)

interface PFN_vkDestroyDescriptorUpdateTemplate(VkDevice* device, VkDescriptorUpdateTemplate* descriptorUpdateTemplate, VkAllocationCallbacks* pAllocator)

interface PFN_vkUpdateDescriptorSetWithTemplate(VkDevice* device, VkDescriptorSet* descriptorSet, VkDescriptorUpdateTemplate* descriptorUpdateTemplate, void* pData)

interface PFN_vkGetPhysicalDeviceExternalBufferProperties(VkPhysicalDevice* physicalDevice, VkPhysicalDeviceExternalBufferInfo* pExternalBufferInfo, VkExternalBufferProperties* pExternalBufferProperties)

interface PFN_vkGetPhysicalDeviceExternalFenceProperties(VkPhysicalDevice* physicalDevice, VkPhysicalDeviceExternalFenceInfo* pExternalFenceInfo, VkExternalFenceProperties* pExternalFenceProperties)

interface PFN_vkGetPhysicalDeviceExternalSemaphoreProperties(VkPhysicalDevice* physicalDevice, VkPhysicalDeviceExternalSemaphoreInfo* pExternalSemaphoreInfo, VkExternalSemaphoreProperties* pExternalSemaphoreProperties)

interface PFN_vkGetDescriptorSetLayoutSupport(VkDevice* device, VkDescriptorSetLayoutCreateInfo* pCreateInfo, VkDescriptorSetLayoutSupport* pSupport)

VkResult vkEnumerateInstanceVersion(u32* pApiVersion) #extern vulkan

VkResult vkBindBufferMemory2(VkDevice* device, u32 bindInfoCount, VkBindBufferMemoryInfo* pBindInfos) #extern vulkan

VkResult vkBindImageMemory2(VkDevice* device, u32 bindInfoCount, VkBindImageMemoryInfo* pBindInfos) #extern vulkan

vkGetDeviceGroupPeerMemoryFeatures(VkDevice* device, u32 heapIndex, u32 localDeviceIndex, u32 remoteDeviceIndex, u32* pPeerMemoryFeatures) #extern vulkan

vkCmdSetDeviceMask(VkCommandBuffer* commandBuffer, u32 deviceMask) #extern vulkan

vkCmdDispatchBase(VkCommandBuffer* commandBuffer, u32 baseGroupX, u32 baseGroupY, u32 baseGroupZ, u32 groupCountX, u32 groupCountY, u32 groupCountZ) #extern vulkan

VkResult vkEnumeratePhysicalDeviceGroups(VkInstance* instance, u32* pPhysicalDeviceGroupCount, VkPhysicalDeviceGroupProperties* pPhysicalDeviceGroupProperties) #extern vulkan

vkGetImageMemoryRequirements2(VkDevice* device, VkImageMemoryRequirementsInfo2* pInfo, VkMemoryRequirements2* pMemoryRequirements) #extern vulkan

vkGetBufferMemoryRequirements2(VkDevice* device, VkBufferMemoryRequirementsInfo2* pInfo, VkMemoryRequirements2* pMemoryRequirements) #extern vulkan

vkGetImageSparseMemoryRequirements2(VkDevice* device, VkImageSparseMemoryRequirementsInfo2* pInfo, u32* pSparseMemoryRequirementCount, VkSparseImageMemoryRequirements2* pSparseMemoryRequirements) #extern vulkan

vkGetPhysicalDeviceFeatures2(VkPhysicalDevice* physicalDevice, VkPhysicalDeviceFeatures2* pFeatures) #extern vulkan

vkGetPhysicalDeviceProperties2(VkPhysicalDevice* physicalDevice, VkPhysicalDeviceProperties2* pProperties) #extern vulkan

vkGetPhysicalDeviceFormatProperties2(VkPhysicalDevice* physicalDevice, VkFormat format, VkFormatProperties2* pFormatProperties) #extern vulkan

VkResult vkGetPhysicalDeviceImageFormatProperties2(VkPhysicalDevice* physicalDevice, VkPhysicalDeviceImageFormatInfo2* pImageFormatInfo, VkImageFormatProperties2* pImageFormatProperties) #extern vulkan

vkGetPhysicalDeviceQueueFamilyProperties2(VkPhysicalDevice* physicalDevice, u32* pQueueFamilyPropertyCount, VkQueueFamilyProperties2* pQueueFamilyProperties) #extern vulkan

vkGetPhysicalDeviceMemoryProperties2(VkPhysicalDevice* physicalDevice, VkPhysicalDeviceMemoryProperties2* pMemoryProperties) #extern vulkan

vkGetPhysicalDeviceSparseImageFormatProperties2(VkPhysicalDevice* physicalDevice, VkPhysicalDeviceSparseImageFormatInfo2* pFormatInfo, u32* pPropertyCount, VkSparseImageFormatProperties2* pProperties) #extern vulkan

vkTrimCommandPool(VkDevice* device, VkCommandPool* commandPool, u32 flags) #extern vulkan

vkGetDeviceQueue2(VkDevice* device, VkDeviceQueueInfo2* pQueueInfo, VkQueue** pQueue) #extern vulkan

VkResult vkCreateSamplerYcbcrConversion(VkDevice* device, VkSamplerYcbcrConversionCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, VkSamplerYcbcrConversion** pYcbcrConversion) #extern vulkan

vkDestroySamplerYcbcrConversion(VkDevice* device, VkSamplerYcbcrConversion* ycbcrConversion, VkAllocationCallbacks* pAllocator) #extern vulkan

VkResult vkCreateDescriptorUpdateTemplate(VkDevice* device, VkDescriptorUpdateTemplateCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, VkDescriptorUpdateTemplate** pDescriptorUpdateTemplate) #extern vulkan

vkDestroyDescriptorUpdateTemplate(VkDevice* device, VkDescriptorUpdateTemplate* descriptorUpdateTemplate, VkAllocationCallbacks* pAllocator) #extern vulkan

vkUpdateDescriptorSetWithTemplate(VkDevice* device, VkDescriptorSet* descriptorSet, VkDescriptorUpdateTemplate* descriptorUpdateTemplate, void* pData) #extern vulkan

vkGetPhysicalDeviceExternalBufferProperties(VkPhysicalDevice* physicalDevice, VkPhysicalDeviceExternalBufferInfo* pExternalBufferInfo, VkExternalBufferProperties* pExternalBufferProperties) #extern vulkan

vkGetPhysicalDeviceExternalFenceProperties(VkPhysicalDevice* physicalDevice, VkPhysicalDeviceExternalFenceInfo* pExternalFenceInfo, VkExternalFenceProperties* pExternalFenceProperties) #extern vulkan

vkGetPhysicalDeviceExternalSemaphoreProperties(VkPhysicalDevice* physicalDevice, VkPhysicalDeviceExternalSemaphoreInfo* pExternalSemaphoreInfo, VkExternalSemaphoreProperties* pExternalSemaphoreProperties) #extern vulkan

vkGetDescriptorSetLayoutSupport(VkDevice* device, VkDescriptorSetLayoutCreateInfo* pCreateInfo, VkDescriptorSetLayoutSupport* pSupport) #extern vulkan

enum VkDriverId {
    VK_DRIVER_ID_AMD_PROPRIETARY = 1;
    VK_DRIVER_ID_AMD_OPEN_SOURCE = 2;
    VK_DRIVER_ID_MESA_RADV = 3;
    VK_DRIVER_ID_NVIDIA_PROPRIETARY = 4;
    VK_DRIVER_ID_INTEL_PROPRIETARY_WINDOWS = 5;
    VK_DRIVER_ID_INTEL_OPEN_SOURCE_MESA = 6;
    VK_DRIVER_ID_IMAGINATION_PROPRIETARY = 7;
    VK_DRIVER_ID_QUALCOMM_PROPRIETARY = 8;
    VK_DRIVER_ID_ARM_PROPRIETARY = 9;
    VK_DRIVER_ID_GOOGLE_SWIFTSHADER = 10;
    VK_DRIVER_ID_GGP_PROPRIETARY = 11;
    VK_DRIVER_ID_BROADCOM_PROPRIETARY = 12;
    VK_DRIVER_ID_MESA_LLVMPIPE = 13;
    VK_DRIVER_ID_MOLTENVK = 14;
    VK_DRIVER_ID_COREAVI_PROPRIETARY = 15;
    VK_DRIVER_ID_JUICE_PROPRIETARY = 16;
    VK_DRIVER_ID_VERISILICON_PROPRIETARY = 17;
    VK_DRIVER_ID_MESA_TURNIP = 18;
    VK_DRIVER_ID_MESA_V3DV = 19;
    VK_DRIVER_ID_MESA_PANVK = 20;
    VK_DRIVER_ID_AMD_PROPRIETARY_KHR = VK_DRIVER_ID_AMD_PROPRIETARY;
    VK_DRIVER_ID_AMD_OPEN_SOURCE_KHR = VK_DRIVER_ID_AMD_OPEN_SOURCE;
    VK_DRIVER_ID_MESA_RADV_KHR = VK_DRIVER_ID_MESA_RADV;
    VK_DRIVER_ID_NVIDIA_PROPRIETARY_KHR = VK_DRIVER_ID_NVIDIA_PROPRIETARY;
    VK_DRIVER_ID_INTEL_PROPRIETARY_WINDOWS_KHR = VK_DRIVER_ID_INTEL_PROPRIETARY_WINDOWS;
    VK_DRIVER_ID_INTEL_OPEN_SOURCE_MESA_KHR = VK_DRIVER_ID_INTEL_OPEN_SOURCE_MESA;
    VK_DRIVER_ID_IMAGINATION_PROPRIETARY_KHR = VK_DRIVER_ID_IMAGINATION_PROPRIETARY;
    VK_DRIVER_ID_QUALCOMM_PROPRIETARY_KHR = VK_DRIVER_ID_QUALCOMM_PROPRIETARY;
    VK_DRIVER_ID_ARM_PROPRIETARY_KHR = VK_DRIVER_ID_ARM_PROPRIETARY;
    VK_DRIVER_ID_GOOGLE_SWIFTSHADER_KHR = VK_DRIVER_ID_GOOGLE_SWIFTSHADER;
    VK_DRIVER_ID_GGP_PROPRIETARY_KHR = VK_DRIVER_ID_GGP_PROPRIETARY;
    VK_DRIVER_ID_BROADCOM_PROPRIETARY_KHR = VK_DRIVER_ID_BROADCOM_PROPRIETARY;
    VK_DRIVER_ID_MAX_ENUM = 0x7FFFFFFF;
}

enum VkShaderFloatControlsIndependence {
    VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_32_BIT_ONLY = 0;
    VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_ALL = 1;
    VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_NONE = 2;
    VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_32_BIT_ONLY_KHR = VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_32_BIT_ONLY;
    VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_ALL_KHR = VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_ALL;
    VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_NONE_KHR = VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_NONE;
    VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_MAX_ENUM = 0x7FFFFFFF;
}

enum VkSamplerReductionMode {
    VK_SAMPLER_REDUCTION_MODE_WEIGHTED_AVERAGE = 0;
    VK_SAMPLER_REDUCTION_MODE_MIN = 1;
    VK_SAMPLER_REDUCTION_MODE_MAX = 2;
    VK_SAMPLER_REDUCTION_MODE_WEIGHTED_AVERAGE_EXT = VK_SAMPLER_REDUCTION_MODE_WEIGHTED_AVERAGE;
    VK_SAMPLER_REDUCTION_MODE_MIN_EXT = VK_SAMPLER_REDUCTION_MODE_MIN;
    VK_SAMPLER_REDUCTION_MODE_MAX_EXT = VK_SAMPLER_REDUCTION_MODE_MAX;
    VK_SAMPLER_REDUCTION_MODE_MAX_ENUM = 0x7FFFFFFF;
}

enum VkSemaphoreType {
    VK_SEMAPHORE_TYPE_BINARY = 0;
    VK_SEMAPHORE_TYPE_TIMELINE = 1;
    VK_SEMAPHORE_TYPE_BINARY_KHR = VK_SEMAPHORE_TYPE_BINARY;
    VK_SEMAPHORE_TYPE_TIMELINE_KHR = VK_SEMAPHORE_TYPE_TIMELINE;
    VK_SEMAPHORE_TYPE_MAX_ENUM = 0x7FFFFFFF;
}

enum VkResolveModeFlagBits {
    VK_RESOLVE_MODE_NONE = 0;
    VK_RESOLVE_MODE_SAMPLE_ZERO_BIT = 0x00000001;
    VK_RESOLVE_MODE_AVERAGE_BIT = 0x00000002;
    VK_RESOLVE_MODE_MIN_BIT = 0x00000004;
    VK_RESOLVE_MODE_MAX_BIT = 0x00000008;
    VK_RESOLVE_MODE_NONE_KHR = VK_RESOLVE_MODE_NONE;
    VK_RESOLVE_MODE_SAMPLE_ZERO_BIT_KHR = VK_RESOLVE_MODE_SAMPLE_ZERO_BIT;
    VK_RESOLVE_MODE_AVERAGE_BIT_KHR = VK_RESOLVE_MODE_AVERAGE_BIT;
    VK_RESOLVE_MODE_MIN_BIT_KHR = VK_RESOLVE_MODE_MIN_BIT;
    VK_RESOLVE_MODE_MAX_BIT_KHR = VK_RESOLVE_MODE_MAX_BIT;
    VK_RESOLVE_MODE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF;
}

enum VkDescriptorBindingFlagBits {
    VK_DESCRIPTOR_BINDING_UPDATE_AFTER_BIND_BIT = 0x00000001;
    VK_DESCRIPTOR_BINDING_UPDATE_UNUSED_WHILE_PENDING_BIT = 0x00000002;
    VK_DESCRIPTOR_BINDING_PARTIALLY_BOUND_BIT = 0x00000004;
    VK_DESCRIPTOR_BINDING_VARIABLE_DESCRIPTOR_COUNT_BIT = 0x00000008;
    VK_DESCRIPTOR_BINDING_UPDATE_AFTER_BIND_BIT_EXT = VK_DESCRIPTOR_BINDING_UPDATE_AFTER_BIND_BIT;
    VK_DESCRIPTOR_BINDING_UPDATE_UNUSED_WHILE_PENDING_BIT_EXT = VK_DESCRIPTOR_BINDING_UPDATE_UNUSED_WHILE_PENDING_BIT;
    VK_DESCRIPTOR_BINDING_PARTIALLY_BOUND_BIT_EXT = VK_DESCRIPTOR_BINDING_PARTIALLY_BOUND_BIT;
    VK_DESCRIPTOR_BINDING_VARIABLE_DESCRIPTOR_COUNT_BIT_EXT = VK_DESCRIPTOR_BINDING_VARIABLE_DESCRIPTOR_COUNT_BIT;
    VK_DESCRIPTOR_BINDING_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF;
}

enum VkSemaphoreWaitFlagBits {
    VK_SEMAPHORE_WAIT_ANY_BIT = 0x00000001;
    VK_SEMAPHORE_WAIT_ANY_BIT_KHR = VK_SEMAPHORE_WAIT_ANY_BIT;
    VK_SEMAPHORE_WAIT_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF;
}

struct VkPhysicalDeviceVulkan11Features {
    sType := VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_1_FEATURES;
    pNext: void*;
    storageBuffer16BitAccess: u32;
    uniformAndStorageBuffer16BitAccess: u32;
    storagePushConstant16: u32;
    storageInputOutput16: u32;
    multiview: u32;
    multiviewGeometryShader: u32;
    multiviewTessellationShader: u32;
    variablePointersStorageBuffer: u32;
    variablePointers: u32;
    protectedMemory: u32;
    samplerYcbcrConversion: u32;
    shaderDrawParameters: u32;
}

struct VkPhysicalDeviceVulkan11Properties {
    sType := VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_1_PROPERTIES;
    pNext: void*;
    deviceUUID: CArray<u8>[16];
    driverUUID: CArray<u8>[16];
    deviceLUID: CArray<u8>[8];
    deviceNodeMask: u32;
    deviceLUIDValid: u32;
    subgroupSize: u32;
    subgroupSupportedStages: u32;
    subgroupSupportedOperations: u32;
    subgroupQuadOperationsInAllStages: u32;
    pointClippingBehavior: VkPointClippingBehavior;
    maxMultiviewViewCount: u32;
    maxMultiviewInstanceIndex: u32;
    protectedNoFault: u32;
    maxPerSetDescriptors: u32;
    maxMemoryAllocationSize: u64;
}

struct VkPhysicalDeviceVulkan12Features {
    sType := VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_2_FEATURES;
    pNext: void*;
    samplerMirrorClampToEdge: u32;
    drawIndirectCount: u32;
    storageBuffer8BitAccess: u32;
    uniformAndStorageBuffer8BitAccess: u32;
    storagePushConstant8: u32;
    shaderBufferInt64Atomics: u32;
    shaderSharedInt64Atomics: u32;
    shaderFloat16: u32;
    shaderInt8: u32;
    descriptorIndexing: u32;
    shaderInputAttachmentArrayDynamicIndexing: u32;
    shaderUniformTexelBufferArrayDynamicIndexing: u32;
    shaderStorageTexelBufferArrayDynamicIndexing: u32;
    shaderUniformBufferArrayNonUniformIndexing: u32;
    shaderSampledImageArrayNonUniformIndexing: u32;
    shaderStorageBufferArrayNonUniformIndexing: u32;
    shaderStorageImageArrayNonUniformIndexing: u32;
    shaderInputAttachmentArrayNonUniformIndexing: u32;
    shaderUniformTexelBufferArrayNonUniformIndexing: u32;
    shaderStorageTexelBufferArrayNonUniformIndexing: u32;
    descriptorBindingUniformBufferUpdateAfterBind: u32;
    descriptorBindingSampledImageUpdateAfterBind: u32;
    descriptorBindingStorageImageUpdateAfterBind: u32;
    descriptorBindingStorageBufferUpdateAfterBind: u32;
    descriptorBindingUniformTexelBufferUpdateAfterBind: u32;
    descriptorBindingStorageTexelBufferUpdateAfterBind: u32;
    descriptorBindingUpdateUnusedWhilePending: u32;
    descriptorBindingPartiallyBound: u32;
    descriptorBindingVariableDescriptorCount: u32;
    runtimeDescriptorArray: u32;
    samplerFilterMinmax: u32;
    scalarBlockLayout: u32;
    imagelessFramebuffer: u32;
    uniformBufferStandardLayout: u32;
    shaderSubgroupExtendedTypes: u32;
    separateDepthStencilLayouts: u32;
    hostQueryReset: u32;
    timelineSemaphore: u32;
    bufferDeviceAddress: u32;
    bufferDeviceAddressCaptureReplay: u32;
    bufferDeviceAddressMultiDevice: u32;
    vulkanMemoryModel: u32;
    vulkanMemoryModelDeviceScope: u32;
    vulkanMemoryModelAvailabilityVisibilityChains: u32;
    shaderOutputViewportIndex: u32;
    shaderOutputLayer: u32;
    subgroupBroadcastDynamicId: u32;
}

struct VkConformanceVersion {
    major: u8;
    minor: u8;
    subminor: u8;
    patch: u8;
}

struct VkPhysicalDeviceVulkan12Properties {
    sType := VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_2_PROPERTIES;
    pNext: void*;
    driverID: VkDriverId;
    driverName: CArray<u8>[256];
    driverInfo: CArray<u8>[256];
    conformanceVersion: VkConformanceVersion;
    denormBehaviorIndependence: VkShaderFloatControlsIndependence;
    roundingModeIndependence: VkShaderFloatControlsIndependence;
    shaderSignedZeroInfNanPreserveFloat16: u32;
    shaderSignedZeroInfNanPreserveFloat32: u32;
    shaderSignedZeroInfNanPreserveFloat64: u32;
    shaderDenormPreserveFloat16: u32;
    shaderDenormPreserveFloat32: u32;
    shaderDenormPreserveFloat64: u32;
    shaderDenormFlushToZeroFloat16: u32;
    shaderDenormFlushToZeroFloat32: u32;
    shaderDenormFlushToZeroFloat64: u32;
    shaderRoundingModeRTEFloat16: u32;
    shaderRoundingModeRTEFloat32: u32;
    shaderRoundingModeRTEFloat64: u32;
    shaderRoundingModeRTZFloat16: u32;
    shaderRoundingModeRTZFloat32: u32;
    shaderRoundingModeRTZFloat64: u32;
    maxUpdateAfterBindDescriptorsInAllPools: u32;
    shaderUniformBufferArrayNonUniformIndexingNative: u32;
    shaderSampledImageArrayNonUniformIndexingNative: u32;
    shaderStorageBufferArrayNonUniformIndexingNative: u32;
    shaderStorageImageArrayNonUniformIndexingNative: u32;
    shaderInputAttachmentArrayNonUniformIndexingNative: u32;
    robustBufferAccessUpdateAfterBind: u32;
    quadDivergentImplicitLod: u32;
    maxPerStageDescriptorUpdateAfterBindSamplers: u32;
    maxPerStageDescriptorUpdateAfterBindUniformBuffers: u32;
    maxPerStageDescriptorUpdateAfterBindStorageBuffers: u32;
    maxPerStageDescriptorUpdateAfterBindSampledImages: u32;
    maxPerStageDescriptorUpdateAfterBindStorageImages: u32;
    maxPerStageDescriptorUpdateAfterBindInputAttachments: u32;
    maxPerStageUpdateAfterBindResources: u32;
    maxDescriptorSetUpdateAfterBindSamplers: u32;
    maxDescriptorSetUpdateAfterBindUniformBuffers: u32;
    maxDescriptorSetUpdateAfterBindUniformBuffersDynamic: u32;
    maxDescriptorSetUpdateAfterBindStorageBuffers: u32;
    maxDescriptorSetUpdateAfterBindStorageBuffersDynamic: u32;
    maxDescriptorSetUpdateAfterBindSampledImages: u32;
    maxDescriptorSetUpdateAfterBindStorageImages: u32;
    maxDescriptorSetUpdateAfterBindInputAttachments: u32;
    supportedDepthResolveModes: u32;
    supportedStencilResolveModes: u32;
    independentResolveNone: u32;
    independentResolve: u32;
    filterMinmaxSingleComponentFormats: u32;
    filterMinmaxImageComponentMapping: u32;
    maxTimelineSemaphoreValueDifference: u64;
    framebufferIntegerColorSampleCounts: u32;
}

struct VkImageFormatListCreateInfo {
    sType := VkStructureType.VK_STRUCTURE_TYPE_IMAGE_FORMAT_LIST_CREATE_INFO;
    pNext: void*;
    viewFormatCount: u32;
    pViewFormats: VkFormat*;
}

struct VkAttachmentDescription2 {
    sType := VkStructureType.VK_STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_2;
    pNext: void*;
    flags: u32;
    format: VkFormat;
    samples: VkSampleCountFlagBits;
    loadOp: VkAttachmentLoadOp;
    storeOp: VkAttachmentStoreOp;
    stencilLoadOp: VkAttachmentLoadOp;
    stencilStoreOp: VkAttachmentStoreOp;
    initialLayout: VkImageLayout;
    finalLayout: VkImageLayout;
}

struct VkAttachmentReference2 {
    sType := VkStructureType.VK_STRUCTURE_TYPE_ATTACHMENT_REFERENCE_2;
    pNext: void*;
    attachment: u32;
    layout: VkImageLayout;
    aspectMask: u32;
}

struct VkSubpassDescription2 {
    sType := VkStructureType.VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_2;
    pNext: void*;
    flags: u32;
    pipelineBindPoint: VkPipelineBindPoint;
    viewMask: u32;
    inputAttachmentCount: u32;
    pInputAttachments: VkAttachmentReference2*;
    colorAttachmentCount: u32;
    pColorAttachments: VkAttachmentReference2*;
    pResolveAttachments: VkAttachmentReference2*;
    pDepthStencilAttachment: VkAttachmentReference2*;
    preserveAttachmentCount: u32;
    pPreserveAttachments: u32*;
}

struct VkSubpassDependency2 {
    sType := VkStructureType.VK_STRUCTURE_TYPE_SUBPASS_DEPENDENCY_2;
    pNext: void*;
    srcSubpass: u32;
    dstSubpass: u32;
    srcStageMask: u32;
    dstStageMask: u32;
    srcAccessMask: u32;
    dstAccessMask: u32;
    dependencyFlags: u32;
    viewOffset: s32;
}

struct VkRenderPassCreateInfo2 {
    sType := VkStructureType.VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO_2;
    pNext: void*;
    flags: u32;
    attachmentCount: u32;
    pAttachments: VkAttachmentDescription2*;
    subpassCount: u32;
    pSubpasses: VkSubpassDescription2*;
    dependencyCount: u32;
    pDependencies: VkSubpassDependency2*;
    correlatedViewMaskCount: u32;
    pCorrelatedViewMasks: u32*;
}

struct VkSubpassBeginInfo {
    sType := VkStructureType.VK_STRUCTURE_TYPE_SUBPASS_BEGIN_INFO;
    pNext: void*;
    contents: VkSubpassContents;
}

struct VkSubpassEndInfo {
    sType := VkStructureType.VK_STRUCTURE_TYPE_SUBPASS_END_INFO;
    pNext: void*;
}

struct VkPhysicalDevice8BitStorageFeatures {
    sType := VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_8BIT_STORAGE_FEATURES;
    pNext: void*;
    storageBuffer8BitAccess: u32;
    uniformAndStorageBuffer8BitAccess: u32;
    storagePushConstant8: u32;
}

struct VkPhysicalDeviceDriverProperties {
    sType := VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DRIVER_PROPERTIES;
    pNext: void*;
    driverID: VkDriverId;
    driverName: CArray<u8>[256];
    driverInfo: CArray<u8>[256];
    conformanceVersion: VkConformanceVersion;
}

struct VkPhysicalDeviceShaderAtomicInt64Features {
    sType := VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_INT64_FEATURES;
    pNext: void*;
    shaderBufferInt64Atomics: u32;
    shaderSharedInt64Atomics: u32;
}

struct VkPhysicalDeviceShaderFloat16Int8Features {
    sType := VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_FLOAT16_INT8_FEATURES;
    pNext: void*;
    shaderFloat16: u32;
    shaderInt8: u32;
}

struct VkPhysicalDeviceFloatControlsProperties {
    sType := VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FLOAT_CONTROLS_PROPERTIES;
    pNext: void*;
    denormBehaviorIndependence: VkShaderFloatControlsIndependence;
    roundingModeIndependence: VkShaderFloatControlsIndependence;
    shaderSignedZeroInfNanPreserveFloat16: u32;
    shaderSignedZeroInfNanPreserveFloat32: u32;
    shaderSignedZeroInfNanPreserveFloat64: u32;
    shaderDenormPreserveFloat16: u32;
    shaderDenormPreserveFloat32: u32;
    shaderDenormPreserveFloat64: u32;
    shaderDenormFlushToZeroFloat16: u32;
    shaderDenormFlushToZeroFloat32: u32;
    shaderDenormFlushToZeroFloat64: u32;
    shaderRoundingModeRTEFloat16: u32;
    shaderRoundingModeRTEFloat32: u32;
    shaderRoundingModeRTEFloat64: u32;
    shaderRoundingModeRTZFloat16: u32;
    shaderRoundingModeRTZFloat32: u32;
    shaderRoundingModeRTZFloat64: u32;
}

struct VkDescriptorSetLayoutBindingFlagsCreateInfo {
    sType := VkStructureType.VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_BINDING_FLAGS_CREATE_INFO;
    pNext: void*;
    bindingCount: u32;
    pBindingFlags: u32*;
}

struct VkPhysicalDeviceDescriptorIndexingFeatures {
    sType := VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_FEATURES;
    pNext: void*;
    shaderInputAttachmentArrayDynamicIndexing: u32;
    shaderUniformTexelBufferArrayDynamicIndexing: u32;
    shaderStorageTexelBufferArrayDynamicIndexing: u32;
    shaderUniformBufferArrayNonUniformIndexing: u32;
    shaderSampledImageArrayNonUniformIndexing: u32;
    shaderStorageBufferArrayNonUniformIndexing: u32;
    shaderStorageImageArrayNonUniformIndexing: u32;
    shaderInputAttachmentArrayNonUniformIndexing: u32;
    shaderUniformTexelBufferArrayNonUniformIndexing: u32;
    shaderStorageTexelBufferArrayNonUniformIndexing: u32;
    descriptorBindingUniformBufferUpdateAfterBind: u32;
    descriptorBindingSampledImageUpdateAfterBind: u32;
    descriptorBindingStorageImageUpdateAfterBind: u32;
    descriptorBindingStorageBufferUpdateAfterBind: u32;
    descriptorBindingUniformTexelBufferUpdateAfterBind: u32;
    descriptorBindingStorageTexelBufferUpdateAfterBind: u32;
    descriptorBindingUpdateUnusedWhilePending: u32;
    descriptorBindingPartiallyBound: u32;
    descriptorBindingVariableDescriptorCount: u32;
    runtimeDescriptorArray: u32;
}

struct VkPhysicalDeviceDescriptorIndexingProperties {
    sType := VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_PROPERTIES;
    pNext: void*;
    maxUpdateAfterBindDescriptorsInAllPools: u32;
    shaderUniformBufferArrayNonUniformIndexingNative: u32;
    shaderSampledImageArrayNonUniformIndexingNative: u32;
    shaderStorageBufferArrayNonUniformIndexingNative: u32;
    shaderStorageImageArrayNonUniformIndexingNative: u32;
    shaderInputAttachmentArrayNonUniformIndexingNative: u32;
    robustBufferAccessUpdateAfterBind: u32;
    quadDivergentImplicitLod: u32;
    maxPerStageDescriptorUpdateAfterBindSamplers: u32;
    maxPerStageDescriptorUpdateAfterBindUniformBuffers: u32;
    maxPerStageDescriptorUpdateAfterBindStorageBuffers: u32;
    maxPerStageDescriptorUpdateAfterBindSampledImages: u32;
    maxPerStageDescriptorUpdateAfterBindStorageImages: u32;
    maxPerStageDescriptorUpdateAfterBindInputAttachments: u32;
    maxPerStageUpdateAfterBindResources: u32;
    maxDescriptorSetUpdateAfterBindSamplers: u32;
    maxDescriptorSetUpdateAfterBindUniformBuffers: u32;
    maxDescriptorSetUpdateAfterBindUniformBuffersDynamic: u32;
    maxDescriptorSetUpdateAfterBindStorageBuffers: u32;
    maxDescriptorSetUpdateAfterBindStorageBuffersDynamic: u32;
    maxDescriptorSetUpdateAfterBindSampledImages: u32;
    maxDescriptorSetUpdateAfterBindStorageImages: u32;
    maxDescriptorSetUpdateAfterBindInputAttachments: u32;
}

struct VkDescriptorSetVariableDescriptorCountAllocateInfo {
    sType := VkStructureType.VK_STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_ALLOCATE_INFO;
    pNext: void*;
    descriptorSetCount: u32;
    pDescriptorCounts: u32*;
}

struct VkDescriptorSetVariableDescriptorCountLayoutSupport {
    sType := VkStructureType.VK_STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_LAYOUT_SUPPORT;
    pNext: void*;
    maxVariableDescriptorCount: u32;
}

struct VkSubpassDescriptionDepthStencilResolve {
    sType := VkStructureType.VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_DEPTH_STENCIL_RESOLVE;
    pNext: void*;
    depthResolveMode: VkResolveModeFlagBits;
    stencilResolveMode: VkResolveModeFlagBits;
    pDepthStencilResolveAttachment: VkAttachmentReference2*;
}

struct VkPhysicalDeviceDepthStencilResolveProperties {
    sType := VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_STENCIL_RESOLVE_PROPERTIES;
    pNext: void*;
    supportedDepthResolveModes: u32;
    supportedStencilResolveModes: u32;
    independentResolveNone: u32;
    independentResolve: u32;
}

struct VkPhysicalDeviceScalarBlockLayoutFeatures {
    sType := VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SCALAR_BLOCK_LAYOUT_FEATURES;
    pNext: void*;
    scalarBlockLayout: u32;
}

struct VkImageStencilUsageCreateInfo {
    sType := VkStructureType.VK_STRUCTURE_TYPE_IMAGE_STENCIL_USAGE_CREATE_INFO;
    pNext: void*;
    stencilUsage: u32;
}

struct VkSamplerReductionModeCreateInfo {
    sType := VkStructureType.VK_STRUCTURE_TYPE_SAMPLER_REDUCTION_MODE_CREATE_INFO;
    pNext: void*;
    reductionMode: VkSamplerReductionMode;
}

struct VkPhysicalDeviceSamplerFilterMinmaxProperties {
    sType := VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_FILTER_MINMAX_PROPERTIES;
    pNext: void*;
    filterMinmaxSingleComponentFormats: u32;
    filterMinmaxImageComponentMapping: u32;
}

struct VkPhysicalDeviceVulkanMemoryModelFeatures {
    sType := VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_MEMORY_MODEL_FEATURES;
    pNext: void*;
    vulkanMemoryModel: u32;
    vulkanMemoryModelDeviceScope: u32;
    vulkanMemoryModelAvailabilityVisibilityChains: u32;
}

struct VkPhysicalDeviceImagelessFramebufferFeatures {
    sType := VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGELESS_FRAMEBUFFER_FEATURES;
    pNext: void*;
    imagelessFramebuffer: u32;
}

struct VkFramebufferAttachmentImageInfo {
    sType := VkStructureType.VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENT_IMAGE_INFO;
    pNext: void*;
    flags: u32;
    usage: u32;
    width: u32;
    height: u32;
    layerCount: u32;
    viewFormatCount: u32;
    pViewFormats: VkFormat*;
}

struct VkFramebufferAttachmentsCreateInfo {
    sType := VkStructureType.VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENTS_CREATE_INFO;
    pNext: void*;
    attachmentImageInfoCount: u32;
    pAttachmentImageInfos: VkFramebufferAttachmentImageInfo*;
}

struct VkRenderPassAttachmentBeginInfo {
    sType := VkStructureType.VK_STRUCTURE_TYPE_RENDER_PASS_ATTACHMENT_BEGIN_INFO;
    pNext: void*;
    attachmentCount: u32;
    pAttachments: VkImageView**;
}

struct VkPhysicalDeviceUniformBufferStandardLayoutFeatures {
    sType := VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_UNIFORM_BUFFER_STANDARD_LAYOUT_FEATURES;
    pNext: void*;
    uniformBufferStandardLayout: u32;
}

struct VkPhysicalDeviceShaderSubgroupExtendedTypesFeatures {
    sType := VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SUBGROUP_EXTENDED_TYPES_FEATURES;
    pNext: void*;
    shaderSubgroupExtendedTypes: u32;
}

struct VkPhysicalDeviceSeparateDepthStencilLayoutsFeatures {
    sType := VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SEPARATE_DEPTH_STENCIL_LAYOUTS_FEATURES;
    pNext: void*;
    separateDepthStencilLayouts: u32;
}

struct VkAttachmentReferenceStencilLayout {
    sType := VkStructureType.VK_STRUCTURE_TYPE_ATTACHMENT_REFERENCE_STENCIL_LAYOUT;
    pNext: void*;
    stencilLayout: VkImageLayout;
}

struct VkAttachmentDescriptionStencilLayout {
    sType := VkStructureType.VK_STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_STENCIL_LAYOUT;
    pNext: void*;
    stencilInitialLayout: VkImageLayout;
    stencilFinalLayout: VkImageLayout;
}

struct VkPhysicalDeviceHostQueryResetFeatures {
    sType := VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_HOST_QUERY_RESET_FEATURES;
    pNext: void*;
    hostQueryReset: u32;
}

struct VkPhysicalDeviceTimelineSemaphoreFeatures {
    sType := VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_FEATURES;
    pNext: void*;
    timelineSemaphore: u32;
}

struct VkPhysicalDeviceTimelineSemaphoreProperties {
    sType := VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_PROPERTIES;
    pNext: void*;
    maxTimelineSemaphoreValueDifference: u64;
}

struct VkSemaphoreTypeCreateInfo {
    sType := VkStructureType.VK_STRUCTURE_TYPE_SEMAPHORE_TYPE_CREATE_INFO;
    pNext: void*;
    semaphoreType: VkSemaphoreType;
    initialValue: u64;
}

struct VkTimelineSemaphoreSubmitInfo {
    sType := VkStructureType.VK_STRUCTURE_TYPE_TIMELINE_SEMAPHORE_SUBMIT_INFO;
    pNext: void*;
    waitSemaphoreValueCount: u32;
    pWaitSemaphoreValues: u64*;
    signalSemaphoreValueCount: u32;
    pSignalSemaphoreValues: u64*;
}

struct VkSemaphoreWaitInfo {
    sType := VkStructureType.VK_STRUCTURE_TYPE_SEMAPHORE_WAIT_INFO;
    pNext: void*;
    flags: u32;
    semaphoreCount: u32;
    pSemaphores: VkSemaphore**;
    pValues: u64*;
}

struct VkSemaphoreSignalInfo {
    sType := VkStructureType.VK_STRUCTURE_TYPE_SEMAPHORE_SIGNAL_INFO;
    pNext: void*;
    semaphore: VkSemaphore*;
    value: u64;
}

struct VkPhysicalDeviceBufferDeviceAddressFeatures {
    sType := VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_DEVICE_ADDRESS_FEATURES;
    pNext: void*;
    bufferDeviceAddress: u32;
    bufferDeviceAddressCaptureReplay: u32;
    bufferDeviceAddressMultiDevice: u32;
}

struct VkBufferDeviceAddressInfo {
    sType := VkStructureType.VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_INFO;
    pNext: void*;
    buffer: VkBuffer*;
}

struct VkBufferOpaqueCaptureAddressCreateInfo {
    sType := VkStructureType.VK_STRUCTURE_TYPE_BUFFER_OPAQUE_CAPTURE_ADDRESS_CREATE_INFO;
    pNext: void*;
    opaqueCaptureAddress: u64;
}

struct VkMemoryOpaqueCaptureAddressAllocateInfo {
    sType := VkStructureType.VK_STRUCTURE_TYPE_MEMORY_OPAQUE_CAPTURE_ADDRESS_ALLOCATE_INFO;
    pNext: void*;
    opaqueCaptureAddress: u64;
}

struct VkDeviceMemoryOpaqueCaptureAddressInfo {
    sType := VkStructureType.VK_STRUCTURE_TYPE_DEVICE_MEMORY_OPAQUE_CAPTURE_ADDRESS_INFO;
    pNext: void*;
    memory: VkDeviceMemory*;
}

interface PFN_vkCmdDrawIndirectCount(VkCommandBuffer* commandBuffer, VkBuffer* buffer, u64 offset, VkBuffer* countBuffer, u64 countBufferOffset, u32 maxDrawCount, u32 stride)

interface PFN_vkCmdDrawIndexedIndirectCount(VkCommandBuffer* commandBuffer, VkBuffer* buffer, u64 offset, VkBuffer* countBuffer, u64 countBufferOffset, u32 maxDrawCount, u32 stride)

interface VkResult PFN_vkCreateRenderPass2(VkDevice* device, VkRenderPassCreateInfo2* pCreateInfo, VkAllocationCallbacks* pAllocator, VkRenderPass** pRenderPass)

interface PFN_vkCmdBeginRenderPass2(VkCommandBuffer* commandBuffer, VkRenderPassBeginInfo* pRenderPassBegin, VkSubpassBeginInfo* pSubpassBeginInfo)

interface PFN_vkCmdNextSubpass2(VkCommandBuffer* commandBuffer, VkSubpassBeginInfo* pSubpassBeginInfo, VkSubpassEndInfo* pSubpassEndInfo)

interface PFN_vkCmdEndRenderPass2(VkCommandBuffer* commandBuffer, VkSubpassEndInfo* pSubpassEndInfo)

interface PFN_vkResetQueryPool(VkDevice* device, VkQueryPool* queryPool, u32 firstQuery, u32 queryCount)

interface VkResult PFN_vkGetSemaphoreCounterValue(VkDevice* device, VkSemaphore* semaphore, u64* pValue)

interface VkResult PFN_vkWaitSemaphores(VkDevice* device, VkSemaphoreWaitInfo* pWaitInfo, u64 timeout)

interface VkResult PFN_vkSignalSemaphore(VkDevice* device, VkSemaphoreSignalInfo* pSignalInfo)

interface u64 PFN_vkGetBufferDeviceAddress(VkDevice* device, VkBufferDeviceAddressInfo* pInfo)

interface u64 PFN_vkGetBufferOpaqueCaptureAddress(VkDevice* device, VkBufferDeviceAddressInfo* pInfo)

interface u64 PFN_vkGetDeviceMemoryOpaqueCaptureAddress(VkDevice* device, VkDeviceMemoryOpaqueCaptureAddressInfo* pInfo)

vkCmdDrawIndirectCount(VkCommandBuffer* commandBuffer, VkBuffer* buffer, u64 offset, VkBuffer* countBuffer, u64 countBufferOffset, u32 maxDrawCount, u32 stride) #extern vulkan

vkCmdDrawIndexedIndirectCount(VkCommandBuffer* commandBuffer, VkBuffer* buffer, u64 offset, VkBuffer* countBuffer, u64 countBufferOffset, u32 maxDrawCount, u32 stride) #extern vulkan

VkResult vkCreateRenderPass2(VkDevice* device, VkRenderPassCreateInfo2* pCreateInfo, VkAllocationCallbacks* pAllocator, VkRenderPass** pRenderPass) #extern vulkan

vkCmdBeginRenderPass2(VkCommandBuffer* commandBuffer, VkRenderPassBeginInfo* pRenderPassBegin, VkSubpassBeginInfo* pSubpassBeginInfo) #extern vulkan

vkCmdNextSubpass2(VkCommandBuffer* commandBuffer, VkSubpassBeginInfo* pSubpassBeginInfo, VkSubpassEndInfo* pSubpassEndInfo) #extern vulkan

vkCmdEndRenderPass2(VkCommandBuffer* commandBuffer, VkSubpassEndInfo* pSubpassEndInfo) #extern vulkan

vkResetQueryPool(VkDevice* device, VkQueryPool* queryPool, u32 firstQuery, u32 queryCount) #extern vulkan

VkResult vkGetSemaphoreCounterValue(VkDevice* device, VkSemaphore* semaphore, u64* pValue) #extern vulkan

VkResult vkWaitSemaphores(VkDevice* device, VkSemaphoreWaitInfo* pWaitInfo, u64 timeout) #extern vulkan

VkResult vkSignalSemaphore(VkDevice* device, VkSemaphoreSignalInfo* pSignalInfo) #extern vulkan

u64 vkGetBufferDeviceAddress(VkDevice* device, VkBufferDeviceAddressInfo* pInfo) #extern vulkan

u64 vkGetBufferOpaqueCaptureAddress(VkDevice* device, VkBufferDeviceAddressInfo* pInfo) #extern vulkan

u64 vkGetDeviceMemoryOpaqueCaptureAddress(VkDevice* device, VkDeviceMemoryOpaqueCaptureAddressInfo* pInfo) #extern vulkan

struct VkSurfaceKHR {}

VK_KHR_SURFACE_EXTENSION_NAME := "VK_KHR_surface";

enum VkPresentModeKHR {
    VK_PRESENT_MODE_IMMEDIATE_KHR = 0;
    VK_PRESENT_MODE_MAILBOX_KHR = 1;
    VK_PRESENT_MODE_FIFO_KHR = 2;
    VK_PRESENT_MODE_FIFO_RELAXED_KHR = 3;
    VK_PRESENT_MODE_SHARED_DEMAND_REFRESH_KHR = 1000111000;
    VK_PRESENT_MODE_SHARED_CONTINUOUS_REFRESH_KHR = 1000111001;
    VK_PRESENT_MODE_MAX_ENUM_KHR = 0x7FFFFFFF;
}

enum VkColorSpaceKHR {
    VK_COLOR_SPACE_SRGB_NONLINEAR_KHR = 0;
    VK_COLOR_SPACE_DISPLAY_P3_NONLINEAR_EXT = 1000104001;
    VK_COLOR_SPACE_EXTENDED_SRGB_LINEAR_EXT = 1000104002;
    VK_COLOR_SPACE_DISPLAY_P3_LINEAR_EXT = 1000104003;
    VK_COLOR_SPACE_DCI_P3_NONLINEAR_EXT = 1000104004;
    VK_COLOR_SPACE_BT709_LINEAR_EXT = 1000104005;
    VK_COLOR_SPACE_BT709_NONLINEAR_EXT = 1000104006;
    VK_COLOR_SPACE_BT2020_LINEAR_EXT = 1000104007;
    VK_COLOR_SPACE_HDR10_ST2084_EXT = 1000104008;
    VK_COLOR_SPACE_DOLBYVISION_EXT = 1000104009;
    VK_COLOR_SPACE_HDR10_HLG_EXT = 1000104010;
    VK_COLOR_SPACE_ADOBERGB_LINEAR_EXT = 1000104011;
    VK_COLOR_SPACE_ADOBERGB_NONLINEAR_EXT = 1000104012;
    VK_COLOR_SPACE_PASS_THROUGH_EXT = 1000104013;
    VK_COLOR_SPACE_EXTENDED_SRGB_NONLINEAR_EXT = 1000104014;
    VK_COLOR_SPACE_DISPLAY_NATIVE_AMD = 1000213000;
    VK_COLORSPACE_SRGB_NONLINEAR_KHR = VK_COLOR_SPACE_SRGB_NONLINEAR_KHR;
    VK_COLOR_SPACE_DCI_P3_LINEAR_EXT = VK_COLOR_SPACE_DISPLAY_P3_LINEAR_EXT;
    VK_COLOR_SPACE_MAX_ENUM_KHR = 0x7FFFFFFF;
}

enum VkSurfaceTransformFlagBitsKHR {
    VK_SURFACE_TRANSFORM_IDENTITY_BIT_KHR = 0x00000001;
    VK_SURFACE_TRANSFORM_ROTATE_90_BIT_KHR = 0x00000002;
    VK_SURFACE_TRANSFORM_ROTATE_180_BIT_KHR = 0x00000004;
    VK_SURFACE_TRANSFORM_ROTATE_270_BIT_KHR = 0x00000008;
    VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_BIT_KHR = 0x00000010;
    VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_90_BIT_KHR = 0x00000020;
    VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_180_BIT_KHR = 0x00000040;
    VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_270_BIT_KHR = 0x00000080;
    VK_SURFACE_TRANSFORM_INHERIT_BIT_KHR = 0x00000100;
    VK_SURFACE_TRANSFORM_FLAG_BITS_MAX_ENUM_KHR = 0x7FFFFFFF;
}

enum VkCompositeAlphaFlagBitsKHR {
    VK_COMPOSITE_ALPHA_OPAQUE_BIT_KHR = 0x00000001;
    VK_COMPOSITE_ALPHA_PRE_MULTIPLIED_BIT_KHR = 0x00000002;
    VK_COMPOSITE_ALPHA_POST_MULTIPLIED_BIT_KHR = 0x00000004;
    VK_COMPOSITE_ALPHA_INHERIT_BIT_KHR = 0x00000008;
    VK_COMPOSITE_ALPHA_FLAG_BITS_MAX_ENUM_KHR = 0x7FFFFFFF;
}

struct VkSurfaceCapabilitiesKHR {
    minImageCount: u32;
    maxImageCount: u32;
    currentExtent: VkExtent2D;
    minImageExtent: VkExtent2D;
    maxImageExtent: VkExtent2D;
    maxImageArrayLayers: u32;
    supportedTransforms: u32;
    currentTransform: VkSurfaceTransformFlagBitsKHR;
    supportedCompositeAlpha: u32;
    supportedUsageFlags: u32;
}

struct VkSurfaceFormatKHR {
    format: VkFormat;
    colorSpace: VkColorSpaceKHR;
}

interface PFN_vkDestroySurfaceKHR(VkInstance* instance, VkSurfaceKHR* surface, VkAllocationCallbacks* pAllocator)

interface VkResult PFN_vkGetPhysicalDeviceSurfaceSupportKHR(VkPhysicalDevice* physicalDevice, u32 queueFamilyIndex, VkSurfaceKHR* surface, u32* pSupported)

interface VkResult PFN_vkGetPhysicalDeviceSurfaceCapabilitiesKHR(VkPhysicalDevice* physicalDevice, VkSurfaceKHR* surface, VkSurfaceCapabilitiesKHR* pSurfaceCapabilities)

interface VkResult PFN_vkGetPhysicalDeviceSurfaceFormatsKHR(VkPhysicalDevice* physicalDevice, VkSurfaceKHR* surface, u32* pSurfaceFormatCount, VkSurfaceFormatKHR* pSurfaceFormats)

interface VkResult PFN_vkGetPhysicalDeviceSurfacePresentModesKHR(VkPhysicalDevice* physicalDevice, VkSurfaceKHR* surface, u32* pPresentModeCount, VkPresentModeKHR* pPresentModes)

vkDestroySurfaceKHR(VkInstance* instance, VkSurfaceKHR* surface, VkAllocationCallbacks* pAllocator) #extern vulkan

VkResult vkGetPhysicalDeviceSurfaceSupportKHR(VkPhysicalDevice* physicalDevice, u32 queueFamilyIndex, VkSurfaceKHR* surface, u32* pSupported) #extern vulkan

VkResult vkGetPhysicalDeviceSurfaceCapabilitiesKHR(VkPhysicalDevice* physicalDevice, VkSurfaceKHR* surface, VkSurfaceCapabilitiesKHR* pSurfaceCapabilities) #extern vulkan

VkResult vkGetPhysicalDeviceSurfaceFormatsKHR(VkPhysicalDevice* physicalDevice, VkSurfaceKHR* surface, u32* pSurfaceFormatCount, VkSurfaceFormatKHR* pSurfaceFormats) #extern vulkan

VkResult vkGetPhysicalDeviceSurfacePresentModesKHR(VkPhysicalDevice* physicalDevice, VkSurfaceKHR* surface, u32* pPresentModeCount, VkPresentModeKHR* pPresentModes) #extern vulkan

struct VkSwapchainKHR {}

VK_KHR_SWAPCHAIN_EXTENSION_NAME := "VK_KHR_swapchain";

enum VkSwapchainCreateFlagBitsKHR {
    VK_SWAPCHAIN_CREATE_SPLIT_INSTANCE_BIND_REGIONS_BIT_KHR = 0x00000001;
    VK_SWAPCHAIN_CREATE_PROTECTED_BIT_KHR = 0x00000002;
    VK_SWAPCHAIN_CREATE_MUTABLE_FORMAT_BIT_KHR = 0x00000004;
    VK_SWAPCHAIN_CREATE_FLAG_BITS_MAX_ENUM_KHR = 0x7FFFFFFF;
}

enum VkDeviceGroupPresentModeFlagBitsKHR {
    VK_DEVICE_GROUP_PRESENT_MODE_LOCAL_BIT_KHR = 0x00000001;
    VK_DEVICE_GROUP_PRESENT_MODE_REMOTE_BIT_KHR = 0x00000002;
    VK_DEVICE_GROUP_PRESENT_MODE_SUM_BIT_KHR = 0x00000004;
    VK_DEVICE_GROUP_PRESENT_MODE_LOCAL_MULTI_DEVICE_BIT_KHR = 0x00000008;
    VK_DEVICE_GROUP_PRESENT_MODE_FLAG_BITS_MAX_ENUM_KHR = 0x7FFFFFFF;
}

struct VkSwapchainCreateInfoKHR {
    sType := VkStructureType.VK_STRUCTURE_TYPE_SWAPCHAIN_CREATE_INFO_KHR;
    pNext: void*;
    flags: u32;
    surface: VkSurfaceKHR*;
    minImageCount: u32;
    imageFormat: VkFormat;
    imageColorSpace: VkColorSpaceKHR;
    imageExtent: VkExtent2D;
    imageArrayLayers: u32;
    imageUsage: VkImageUsageFlagBits;
    imageSharingMode: VkSharingMode;
    queueFamilyIndexCount: u32;
    pQueueFamilyIndices: u32*;
    preTransform: VkSurfaceTransformFlagBitsKHR;
    compositeAlpha: VkCompositeAlphaFlagBitsKHR;
    presentMode: VkPresentModeKHR;
    clipped: u32;
    oldSwapchain: VkSwapchainKHR*;
}

struct VkPresentInfoKHR {
    sType := VkStructureType.VK_STRUCTURE_TYPE_PRESENT_INFO_KHR;
    pNext: void*;
    waitSemaphoreCount: u32;
    pWaitSemaphores: VkSemaphore**;
    swapchainCount: u32;
    pSwapchains: VkSwapchainKHR**;
    pImageIndices: u32*;
    pResults: VkResult*;
}

struct VkImageSwapchainCreateInfoKHR {
    sType := VkStructureType.VK_STRUCTURE_TYPE_IMAGE_SWAPCHAIN_CREATE_INFO_KHR;
    pNext: void*;
    swapchain: VkSwapchainKHR*;
}

struct VkBindImageMemorySwapchainInfoKHR {
    sType := VkStructureType.VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_SWAPCHAIN_INFO_KHR;
    pNext: void*;
    swapchain: VkSwapchainKHR*;
    imageIndex: u32;
}

struct VkAcquireNextImageInfoKHR {
    sType := VkStructureType.VK_STRUCTURE_TYPE_ACQUIRE_NEXT_IMAGE_INFO_KHR;
    pNext: void*;
    swapchain: VkSwapchainKHR*;
    timeout: u64;
    semaphore: VkSemaphore*;
    fence: VkFence*;
    deviceMask: u32;
}

struct VkDeviceGroupPresentCapabilitiesKHR {
    sType := VkStructureType.VK_STRUCTURE_TYPE_DEVICE_GROUP_PRESENT_CAPABILITIES_KHR;
    pNext: void*;
    presentMask: CArray<u32>[32];
    modes: u32;
}

struct VkDeviceGroupPresentInfoKHR {
    sType := VkStructureType.VK_STRUCTURE_TYPE_DEVICE_GROUP_PRESENT_INFO_KHR;
    pNext: void*;
    swapchainCount: u32;
    pDeviceMasks: u32*;
    mode: VkDeviceGroupPresentModeFlagBitsKHR;
}

struct VkDeviceGroupSwapchainCreateInfoKHR {
    sType := VkStructureType.VK_STRUCTURE_TYPE_DEVICE_GROUP_SWAPCHAIN_CREATE_INFO_KHR;
    pNext: void*;
    modes: u32;
}

interface VkResult PFN_vkCreateSwapchainKHR(VkDevice* device, VkSwapchainCreateInfoKHR* pCreateInfo, VkAllocationCallbacks* pAllocator, VkSwapchainKHR** pSwapchain)

interface PFN_vkDestroySwapchainKHR(VkDevice* device, VkSwapchainKHR* swapchain, VkAllocationCallbacks* pAllocator)

interface VkResult PFN_vkGetSwapchainImagesKHR(VkDevice* device, VkSwapchainKHR* swapchain, u32* pSwapchainImageCount, VkImage** pSwapchainImages)

interface VkResult PFN_vkAcquireNextImageKHR(VkDevice* device, VkSwapchainKHR* swapchain, u64 timeout, VkSemaphore* semaphore, VkFence* fence, u32* pImageIndex)

interface VkResult PFN_vkQueuePresentKHR(VkQueue* queue, VkPresentInfoKHR* pPresentInfo)

interface VkResult PFN_vkGetDeviceGroupPresentCapabilitiesKHR(VkDevice* device, VkDeviceGroupPresentCapabilitiesKHR* pDeviceGroupPresentCapabilities)

interface VkResult PFN_vkGetDeviceGroupSurfacePresentModesKHR(VkDevice* device, VkSurfaceKHR* surface, u32* pModes)

interface VkResult PFN_vkGetPhysicalDevicePresentRectanglesKHR(VkPhysicalDevice* physicalDevice, VkSurfaceKHR* surface, u32* pRectCount, VkRect2D* pRects)

interface VkResult PFN_vkAcquireNextImage2KHR(VkDevice* device, VkAcquireNextImageInfoKHR* pAcquireInfo, u32* pImageIndex)

VkResult vkCreateSwapchainKHR(VkDevice* device, VkSwapchainCreateInfoKHR* pCreateInfo, VkAllocationCallbacks* pAllocator, VkSwapchainKHR** pSwapchain) #extern vulkan

vkDestroySwapchainKHR(VkDevice* device, VkSwapchainKHR* swapchain, VkAllocationCallbacks* pAllocator) #extern vulkan

VkResult vkGetSwapchainImagesKHR(VkDevice* device, VkSwapchainKHR* swapchain, u32* pSwapchainImageCount, VkImage** pSwapchainImages) #extern vulkan

VkResult vkAcquireNextImageKHR(VkDevice* device, VkSwapchainKHR* swapchain, u64 timeout, VkSemaphore* semaphore, VkFence* fence, u32* pImageIndex) #extern vulkan

VkResult vkQueuePresentKHR(VkQueue* queue, VkPresentInfoKHR* pPresentInfo) #extern vulkan

VkResult vkGetDeviceGroupPresentCapabilitiesKHR(VkDevice* device, VkDeviceGroupPresentCapabilitiesKHR* pDeviceGroupPresentCapabilities) #extern vulkan

VkResult vkGetDeviceGroupSurfacePresentModesKHR(VkDevice* device, VkSurfaceKHR* surface, u32* pModes) #extern vulkan

VkResult vkGetPhysicalDevicePresentRectanglesKHR(VkPhysicalDevice* physicalDevice, VkSurfaceKHR* surface, u32* pRectCount, VkRect2D* pRects) #extern vulkan

VkResult vkAcquireNextImage2KHR(VkDevice* device, VkAcquireNextImageInfoKHR* pAcquireInfo, u32* pImageIndex) #extern vulkan

struct VkDisplayKHR {}
struct VkDisplayModeKHR {}
enum VkDisplayPlaneAlphaFlagBitsKHR {
    VK_DISPLAY_PLANE_ALPHA_OPAQUE_BIT_KHR = 0x00000001;
    VK_DISPLAY_PLANE_ALPHA_GLOBAL_BIT_KHR = 0x00000002;
    VK_DISPLAY_PLANE_ALPHA_PER_PIXEL_BIT_KHR = 0x00000004;
    VK_DISPLAY_PLANE_ALPHA_PER_PIXEL_PREMULTIPLIED_BIT_KHR = 0x00000008;
    VK_DISPLAY_PLANE_ALPHA_FLAG_BITS_MAX_ENUM_KHR = 0x7FFFFFFF;
}

struct VkDisplayModeParametersKHR {
    visibleRegion: VkExtent2D;
    refreshRate: u32;
}

struct VkDisplayModeCreateInfoKHR {
    sType := VkStructureType.VK_STRUCTURE_TYPE_DISPLAY_MODE_CREATE_INFO_KHR;
    pNext: void*;
    flags: u32;
    parameters: VkDisplayModeParametersKHR;
}

struct VkDisplayModePropertiesKHR {
    displayMode: VkDisplayModeKHR*;
    parameters: VkDisplayModeParametersKHR;
}

struct VkDisplayPlaneCapabilitiesKHR {
    supportedAlpha: u32;
    minSrcPosition: VkOffset2D;
    maxSrcPosition: VkOffset2D;
    minSrcExtent: VkExtent2D;
    maxSrcExtent: VkExtent2D;
    minDstPosition: VkOffset2D;
    maxDstPosition: VkOffset2D;
    minDstExtent: VkExtent2D;
    maxDstExtent: VkExtent2D;
}

struct VkDisplayPlanePropertiesKHR {
    currentDisplay: VkDisplayKHR*;
    currentStackIndex: u32;
}

struct VkDisplayPropertiesKHR {
    display: VkDisplayKHR*;
    displayName: u8*;
    physicalDimensions: VkExtent2D;
    physicalResolution: VkExtent2D;
    supportedTransforms: u32;
    planeReorderPossible: u32;
    persistentContent: u32;
}

struct VkDisplaySurfaceCreateInfoKHR {
    sType := VkStructureType.VK_STRUCTURE_TYPE_DISPLAY_SURFACE_CREATE_INFO_KHR;
    pNext: void*;
    flags: u32;
    displayMode: VkDisplayModeKHR*;
    planeIndex: u32;
    planeStackIndex: u32;
    transform: VkSurfaceTransformFlagBitsKHR;
    globalAlpha: float;
    alphaMode: VkDisplayPlaneAlphaFlagBitsKHR;
    imageExtent: VkExtent2D;
}

interface VkResult PFN_vkGetPhysicalDeviceDisplayPropertiesKHR(VkPhysicalDevice* physicalDevice, u32* pPropertyCount, VkDisplayPropertiesKHR* pProperties)

interface VkResult PFN_vkGetPhysicalDeviceDisplayPlanePropertiesKHR(VkPhysicalDevice* physicalDevice, u32* pPropertyCount, VkDisplayPlanePropertiesKHR* pProperties)

interface VkResult PFN_vkGetDisplayPlaneSupportedDisplaysKHR(VkPhysicalDevice* physicalDevice, u32 planeIndex, u32* pDisplayCount, VkDisplayKHR** pDisplays)

interface VkResult PFN_vkGetDisplayModePropertiesKHR(VkPhysicalDevice* physicalDevice, VkDisplayKHR* display, u32* pPropertyCount, VkDisplayModePropertiesKHR* pProperties)

interface VkResult PFN_vkCreateDisplayModeKHR(VkPhysicalDevice* physicalDevice, VkDisplayKHR* display, VkDisplayModeCreateInfoKHR* pCreateInfo, VkAllocationCallbacks* pAllocator, VkDisplayModeKHR** pMode)

interface VkResult PFN_vkGetDisplayPlaneCapabilitiesKHR(VkPhysicalDevice* physicalDevice, VkDisplayModeKHR* mode, u32 planeIndex, VkDisplayPlaneCapabilitiesKHR* pCapabilities)

interface VkResult PFN_vkCreateDisplayPlaneSurfaceKHR(VkInstance* instance, VkDisplaySurfaceCreateInfoKHR* pCreateInfo, VkAllocationCallbacks* pAllocator, VkSurfaceKHR** pSurface)

VkResult vkGetPhysicalDeviceDisplayPropertiesKHR(VkPhysicalDevice* physicalDevice, u32* pPropertyCount, VkDisplayPropertiesKHR* pProperties) #extern vulkan

VkResult vkGetPhysicalDeviceDisplayPlanePropertiesKHR(VkPhysicalDevice* physicalDevice, u32* pPropertyCount, VkDisplayPlanePropertiesKHR* pProperties) #extern vulkan

VkResult vkGetDisplayPlaneSupportedDisplaysKHR(VkPhysicalDevice* physicalDevice, u32 planeIndex, u32* pDisplayCount, VkDisplayKHR** pDisplays) #extern vulkan

VkResult vkGetDisplayModePropertiesKHR(VkPhysicalDevice* physicalDevice, VkDisplayKHR* display, u32* pPropertyCount, VkDisplayModePropertiesKHR* pProperties) #extern vulkan

VkResult vkCreateDisplayModeKHR(VkPhysicalDevice* physicalDevice, VkDisplayKHR* display, VkDisplayModeCreateInfoKHR* pCreateInfo, VkAllocationCallbacks* pAllocator, VkDisplayModeKHR** pMode) #extern vulkan

VkResult vkGetDisplayPlaneCapabilitiesKHR(VkPhysicalDevice* physicalDevice, VkDisplayModeKHR* mode, u32 planeIndex, VkDisplayPlaneCapabilitiesKHR* pCapabilities) #extern vulkan

VkResult vkCreateDisplayPlaneSurfaceKHR(VkInstance* instance, VkDisplaySurfaceCreateInfoKHR* pCreateInfo, VkAllocationCallbacks* pAllocator, VkSurfaceKHR** pSurface) #extern vulkan

struct VkDisplayPresentInfoKHR {
    sType := VkStructureType.VK_STRUCTURE_TYPE_DISPLAY_PRESENT_INFO_KHR;
    pNext: void*;
    srcRect: VkRect2D;
    dstRect: VkRect2D;
    persistent: u32;
}

interface VkResult PFN_vkCreateSharedSwapchainsKHR(VkDevice* device, u32 swapchainCount, VkSwapchainCreateInfoKHR* pCreateInfos, VkAllocationCallbacks* pAllocator, VkSwapchainKHR** pSwapchains)

VkResult vkCreateSharedSwapchainsKHR(VkDevice* device, u32 swapchainCount, VkSwapchainCreateInfoKHR* pCreateInfos, VkAllocationCallbacks* pAllocator, VkSwapchainKHR** pSwapchains) #extern vulkan

interface PFN_vkGetPhysicalDeviceFeatures2KHR(VkPhysicalDevice* physicalDevice, VkPhysicalDeviceFeatures2* pFeatures)

interface PFN_vkGetPhysicalDeviceProperties2KHR(VkPhysicalDevice* physicalDevice, VkPhysicalDeviceProperties2* pProperties)

interface PFN_vkGetPhysicalDeviceFormatProperties2KHR(VkPhysicalDevice* physicalDevice, VkFormat format, VkFormatProperties2* pFormatProperties)

interface VkResult PFN_vkGetPhysicalDeviceImageFormatProperties2KHR(VkPhysicalDevice* physicalDevice, VkPhysicalDeviceImageFormatInfo2* pImageFormatInfo, VkImageFormatProperties2* pImageFormatProperties)

interface PFN_vkGetPhysicalDeviceQueueFamilyProperties2KHR(VkPhysicalDevice* physicalDevice, u32* pQueueFamilyPropertyCount, VkQueueFamilyProperties2* pQueueFamilyProperties)

interface PFN_vkGetPhysicalDeviceMemoryProperties2KHR(VkPhysicalDevice* physicalDevice, VkPhysicalDeviceMemoryProperties2* pMemoryProperties)

interface PFN_vkGetPhysicalDeviceSparseImageFormatProperties2KHR(VkPhysicalDevice* physicalDevice, VkPhysicalDeviceSparseImageFormatInfo2* pFormatInfo, u32* pPropertyCount, VkSparseImageFormatProperties2* pProperties)

vkGetPhysicalDeviceFeatures2KHR(VkPhysicalDevice* physicalDevice, VkPhysicalDeviceFeatures2* pFeatures) #extern vulkan

vkGetPhysicalDeviceProperties2KHR(VkPhysicalDevice* physicalDevice, VkPhysicalDeviceProperties2* pProperties) #extern vulkan

vkGetPhysicalDeviceFormatProperties2KHR(VkPhysicalDevice* physicalDevice, VkFormat format, VkFormatProperties2* pFormatProperties) #extern vulkan

VkResult vkGetPhysicalDeviceImageFormatProperties2KHR(VkPhysicalDevice* physicalDevice, VkPhysicalDeviceImageFormatInfo2* pImageFormatInfo, VkImageFormatProperties2* pImageFormatProperties) #extern vulkan

vkGetPhysicalDeviceQueueFamilyProperties2KHR(VkPhysicalDevice* physicalDevice, u32* pQueueFamilyPropertyCount, VkQueueFamilyProperties2* pQueueFamilyProperties) #extern vulkan

vkGetPhysicalDeviceMemoryProperties2KHR(VkPhysicalDevice* physicalDevice, VkPhysicalDeviceMemoryProperties2* pMemoryProperties) #extern vulkan

vkGetPhysicalDeviceSparseImageFormatProperties2KHR(VkPhysicalDevice* physicalDevice, VkPhysicalDeviceSparseImageFormatInfo2* pFormatInfo, u32* pPropertyCount, VkSparseImageFormatProperties2* pProperties) #extern vulkan

interface PFN_vkGetDeviceGroupPeerMemoryFeaturesKHR(VkDevice* device, u32 heapIndex, u32 localDeviceIndex, u32 remoteDeviceIndex, u32* pPeerMemoryFeatures)

interface PFN_vkCmdSetDeviceMaskKHR(VkCommandBuffer* commandBuffer, u32 deviceMask)

interface PFN_vkCmdDispatchBaseKHR(VkCommandBuffer* commandBuffer, u32 baseGroupX, u32 baseGroupY, u32 baseGroupZ, u32 groupCountX, u32 groupCountY, u32 groupCountZ)

vkGetDeviceGroupPeerMemoryFeaturesKHR(VkDevice* device, u32 heapIndex, u32 localDeviceIndex, u32 remoteDeviceIndex, u32* pPeerMemoryFeatures) #extern vulkan

vkCmdSetDeviceMaskKHR(VkCommandBuffer* commandBuffer, u32 deviceMask) #extern vulkan

vkCmdDispatchBaseKHR(VkCommandBuffer* commandBuffer, u32 baseGroupX, u32 baseGroupY, u32 baseGroupZ, u32 groupCountX, u32 groupCountY, u32 groupCountZ) #extern vulkan

interface PFN_vkTrimCommandPoolKHR(VkDevice* device, VkCommandPool* commandPool, u32 flags)

vkTrimCommandPoolKHR(VkDevice* device, VkCommandPool* commandPool, u32 flags) #extern vulkan

interface VkResult PFN_vkEnumeratePhysicalDeviceGroupsKHR(VkInstance* instance, u32* pPhysicalDeviceGroupCount, VkPhysicalDeviceGroupProperties* pPhysicalDeviceGroupProperties)

VkResult vkEnumeratePhysicalDeviceGroupsKHR(VkInstance* instance, u32* pPhysicalDeviceGroupCount, VkPhysicalDeviceGroupProperties* pPhysicalDeviceGroupProperties) #extern vulkan

interface PFN_vkGetPhysicalDeviceExternalBufferPropertiesKHR(VkPhysicalDevice* physicalDevice, VkPhysicalDeviceExternalBufferInfo* pExternalBufferInfo, VkExternalBufferProperties* pExternalBufferProperties)

vkGetPhysicalDeviceExternalBufferPropertiesKHR(VkPhysicalDevice* physicalDevice, VkPhysicalDeviceExternalBufferInfo* pExternalBufferInfo, VkExternalBufferProperties* pExternalBufferProperties) #extern vulkan

struct VkImportMemoryFdInfoKHR {
    sType := VkStructureType.VK_STRUCTURE_TYPE_IMPORT_MEMORY_FD_INFO_KHR;
    pNext: void*;
    handleType: VkExternalMemoryHandleTypeFlagBits;
    fd: s32;
}

struct VkMemoryFdPropertiesKHR {
    sType := VkStructureType.VK_STRUCTURE_TYPE_MEMORY_FD_PROPERTIES_KHR;
    pNext: void*;
    memoryTypeBits: u32;
}

struct VkMemoryGetFdInfoKHR {
    sType := VkStructureType.VK_STRUCTURE_TYPE_MEMORY_GET_FD_INFO_KHR;
    pNext: void*;
    memory: VkDeviceMemory*;
    handleType: VkExternalMemoryHandleTypeFlagBits;
}

interface VkResult PFN_vkGetMemoryFdKHR(VkDevice* device, VkMemoryGetFdInfoKHR* pGetFdInfo, s32* pFd)

interface VkResult PFN_vkGetMemoryFdPropertiesKHR(VkDevice* device, VkExternalMemoryHandleTypeFlagBits handleType, s32 fd, VkMemoryFdPropertiesKHR* pMemoryFdProperties)

VkResult vkGetMemoryFdKHR(VkDevice* device, VkMemoryGetFdInfoKHR* pGetFdInfo, s32* pFd) #extern vulkan

VkResult vkGetMemoryFdPropertiesKHR(VkDevice* device, VkExternalMemoryHandleTypeFlagBits handleType, s32 fd, VkMemoryFdPropertiesKHR* pMemoryFdProperties) #extern vulkan

interface PFN_vkGetPhysicalDeviceExternalSemaphorePropertiesKHR(VkPhysicalDevice* physicalDevice, VkPhysicalDeviceExternalSemaphoreInfo* pExternalSemaphoreInfo, VkExternalSemaphoreProperties* pExternalSemaphoreProperties)

vkGetPhysicalDeviceExternalSemaphorePropertiesKHR(VkPhysicalDevice* physicalDevice, VkPhysicalDeviceExternalSemaphoreInfo* pExternalSemaphoreInfo, VkExternalSemaphoreProperties* pExternalSemaphoreProperties) #extern vulkan

struct VkImportSemaphoreFdInfoKHR {
    sType := VkStructureType.VK_STRUCTURE_TYPE_IMPORT_SEMAPHORE_FD_INFO_KHR;
    pNext: void*;
    semaphore: VkSemaphore*;
    flags: u32;
    handleType: VkExternalSemaphoreHandleTypeFlagBits;
    fd: s32;
}

struct VkSemaphoreGetFdInfoKHR {
    sType := VkStructureType.VK_STRUCTURE_TYPE_SEMAPHORE_GET_FD_INFO_KHR;
    pNext: void*;
    semaphore: VkSemaphore*;
    handleType: VkExternalSemaphoreHandleTypeFlagBits;
}

interface VkResult PFN_vkImportSemaphoreFdKHR(VkDevice* device, VkImportSemaphoreFdInfoKHR* pImportSemaphoreFdInfo)

interface VkResult PFN_vkGetSemaphoreFdKHR(VkDevice* device, VkSemaphoreGetFdInfoKHR* pGetFdInfo, s32* pFd)

VkResult vkImportSemaphoreFdKHR(VkDevice* device, VkImportSemaphoreFdInfoKHR* pImportSemaphoreFdInfo) #extern vulkan

VkResult vkGetSemaphoreFdKHR(VkDevice* device, VkSemaphoreGetFdInfoKHR* pGetFdInfo, s32* pFd) #extern vulkan

struct VkPhysicalDevicePushDescriptorPropertiesKHR {
    sType := VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PUSH_DESCRIPTOR_PROPERTIES_KHR;
    pNext: void*;
    maxPushDescriptors: u32;
}

interface PFN_vkCmdPushDescriptorSetKHR(VkCommandBuffer* commandBuffer, VkPipelineBindPoint pipelineBindPoint, VkPipelineLayout* layout, u32 set, u32 descriptorWriteCount, VkWriteDescriptorSet* pDescriptorWrites)

interface PFN_vkCmdPushDescriptorSetWithTemplateKHR(VkCommandBuffer* commandBuffer, VkDescriptorUpdateTemplate* descriptorUpdateTemplate, VkPipelineLayout* layout, u32 set, void* pData)

vkCmdPushDescriptorSetKHR(VkCommandBuffer* commandBuffer, VkPipelineBindPoint pipelineBindPoint, VkPipelineLayout* layout, u32 set, u32 descriptorWriteCount, VkWriteDescriptorSet* pDescriptorWrites) #extern vulkan

vkCmdPushDescriptorSetWithTemplateKHR(VkCommandBuffer* commandBuffer, VkDescriptorUpdateTemplate* descriptorUpdateTemplate, VkPipelineLayout* layout, u32 set, void* pData) #extern vulkan

struct VkRectLayerKHR {
    offset: VkOffset2D;
    extent: VkExtent2D;
    layer: u32;
}

struct VkPresentRegionKHR {
    rectangleCount: u32;
    pRectangles: VkRectLayerKHR*;
}

struct VkPresentRegionsKHR {
    sType := VkStructureType.VK_STRUCTURE_TYPE_PRESENT_REGIONS_KHR;
    pNext: void*;
    swapchainCount: u32;
    pRegions: VkPresentRegionKHR*;
}

interface VkResult PFN_vkCreateDescriptorUpdateTemplateKHR(VkDevice* device, VkDescriptorUpdateTemplateCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, VkDescriptorUpdateTemplate** pDescriptorUpdateTemplate)

interface PFN_vkDestroyDescriptorUpdateTemplateKHR(VkDevice* device, VkDescriptorUpdateTemplate* descriptorUpdateTemplate, VkAllocationCallbacks* pAllocator)

interface PFN_vkUpdateDescriptorSetWithTemplateKHR(VkDevice* device, VkDescriptorSet* descriptorSet, VkDescriptorUpdateTemplate* descriptorUpdateTemplate, void* pData)

VkResult vkCreateDescriptorUpdateTemplateKHR(VkDevice* device, VkDescriptorUpdateTemplateCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, VkDescriptorUpdateTemplate** pDescriptorUpdateTemplate) #extern vulkan

vkDestroyDescriptorUpdateTemplateKHR(VkDevice* device, VkDescriptorUpdateTemplate* descriptorUpdateTemplate, VkAllocationCallbacks* pAllocator) #extern vulkan

vkUpdateDescriptorSetWithTemplateKHR(VkDevice* device, VkDescriptorSet* descriptorSet, VkDescriptorUpdateTemplate* descriptorUpdateTemplate, void* pData) #extern vulkan

interface VkResult PFN_vkCreateRenderPass2KHR(VkDevice* device, VkRenderPassCreateInfo2* pCreateInfo, VkAllocationCallbacks* pAllocator, VkRenderPass** pRenderPass)

interface PFN_vkCmdBeginRenderPass2KHR(VkCommandBuffer* commandBuffer, VkRenderPassBeginInfo* pRenderPassBegin, VkSubpassBeginInfo* pSubpassBeginInfo)

interface PFN_vkCmdNextSubpass2KHR(VkCommandBuffer* commandBuffer, VkSubpassBeginInfo* pSubpassBeginInfo, VkSubpassEndInfo* pSubpassEndInfo)

interface PFN_vkCmdEndRenderPass2KHR(VkCommandBuffer* commandBuffer, VkSubpassEndInfo* pSubpassEndInfo)

VkResult vkCreateRenderPass2KHR(VkDevice* device, VkRenderPassCreateInfo2* pCreateInfo, VkAllocationCallbacks* pAllocator, VkRenderPass** pRenderPass) #extern vulkan

vkCmdBeginRenderPass2KHR(VkCommandBuffer* commandBuffer, VkRenderPassBeginInfo* pRenderPassBegin, VkSubpassBeginInfo* pSubpassBeginInfo) #extern vulkan

vkCmdNextSubpass2KHR(VkCommandBuffer* commandBuffer, VkSubpassBeginInfo* pSubpassBeginInfo, VkSubpassEndInfo* pSubpassEndInfo) #extern vulkan

vkCmdEndRenderPass2KHR(VkCommandBuffer* commandBuffer, VkSubpassEndInfo* pSubpassEndInfo) #extern vulkan

struct VkSharedPresentSurfaceCapabilitiesKHR {
    sType := VkStructureType.VK_STRUCTURE_TYPE_SHARED_PRESENT_SURFACE_CAPABILITIES_KHR;
    pNext: void*;
    sharedPresentSupportedUsageFlags: u32;
}

interface VkResult PFN_vkGetSwapchainStatusKHR(VkDevice* device, VkSwapchainKHR* swapchain)

VkResult vkGetSwapchainStatusKHR(VkDevice* device, VkSwapchainKHR* swapchain) #extern vulkan

interface PFN_vkGetPhysicalDeviceExternalFencePropertiesKHR(VkPhysicalDevice* physicalDevice, VkPhysicalDeviceExternalFenceInfo* pExternalFenceInfo, VkExternalFenceProperties* pExternalFenceProperties)

vkGetPhysicalDeviceExternalFencePropertiesKHR(VkPhysicalDevice* physicalDevice, VkPhysicalDeviceExternalFenceInfo* pExternalFenceInfo, VkExternalFenceProperties* pExternalFenceProperties) #extern vulkan

struct VkImportFenceFdInfoKHR {
    sType := VkStructureType.VK_STRUCTURE_TYPE_IMPORT_FENCE_FD_INFO_KHR;
    pNext: void*;
    fence: VkFence*;
    flags: u32;
    handleType: VkExternalFenceHandleTypeFlagBits;
    fd: s32;
}

struct VkFenceGetFdInfoKHR {
    sType := VkStructureType.VK_STRUCTURE_TYPE_FENCE_GET_FD_INFO_KHR;
    pNext: void*;
    fence: VkFence*;
    handleType: VkExternalFenceHandleTypeFlagBits;
}

interface VkResult PFN_vkImportFenceFdKHR(VkDevice* device, VkImportFenceFdInfoKHR* pImportFenceFdInfo)

interface VkResult PFN_vkGetFenceFdKHR(VkDevice* device, VkFenceGetFdInfoKHR* pGetFdInfo, s32* pFd)

VkResult vkImportFenceFdKHR(VkDevice* device, VkImportFenceFdInfoKHR* pImportFenceFdInfo) #extern vulkan

VkResult vkGetFenceFdKHR(VkDevice* device, VkFenceGetFdInfoKHR* pGetFdInfo, s32* pFd) #extern vulkan

enum VkPerformanceCounterUnitKHR {
    VK_PERFORMANCE_COUNTER_UNIT_GENERIC_KHR = 0;
    VK_PERFORMANCE_COUNTER_UNIT_PERCENTAGE_KHR = 1;
    VK_PERFORMANCE_COUNTER_UNIT_NANOSECONDS_KHR = 2;
    VK_PERFORMANCE_COUNTER_UNIT_BYTES_KHR = 3;
    VK_PERFORMANCE_COUNTER_UNIT_BYTES_PER_SECOND_KHR = 4;
    VK_PERFORMANCE_COUNTER_UNIT_KELVIN_KHR = 5;
    VK_PERFORMANCE_COUNTER_UNIT_WATTS_KHR = 6;
    VK_PERFORMANCE_COUNTER_UNIT_VOLTS_KHR = 7;
    VK_PERFORMANCE_COUNTER_UNIT_AMPS_KHR = 8;
    VK_PERFORMANCE_COUNTER_UNIT_HERTZ_KHR = 9;
    VK_PERFORMANCE_COUNTER_UNIT_CYCLES_KHR = 10;
    VK_PERFORMANCE_COUNTER_UNIT_MAX_ENUM_KHR = 0x7FFFFFFF;
}

enum VkPerformanceCounterScopeKHR {
    VK_PERFORMANCE_COUNTER_SCOPE_COMMAND_BUFFER_KHR = 0;
    VK_PERFORMANCE_COUNTER_SCOPE_RENDER_PASS_KHR = 1;
    VK_PERFORMANCE_COUNTER_SCOPE_COMMAND_KHR = 2;
    VK_QUERY_SCOPE_COMMAND_BUFFER_KHR = VK_PERFORMANCE_COUNTER_SCOPE_COMMAND_BUFFER_KHR;
    VK_QUERY_SCOPE_RENDER_PASS_KHR = VK_PERFORMANCE_COUNTER_SCOPE_RENDER_PASS_KHR;
    VK_QUERY_SCOPE_COMMAND_KHR = VK_PERFORMANCE_COUNTER_SCOPE_COMMAND_KHR;
    VK_PERFORMANCE_COUNTER_SCOPE_MAX_ENUM_KHR = 0x7FFFFFFF;
}

enum VkPerformanceCounterStorageKHR {
    VK_PERFORMANCE_COUNTER_STORAGE_INT32_KHR = 0;
    VK_PERFORMANCE_COUNTER_STORAGE_INT64_KHR = 1;
    VK_PERFORMANCE_COUNTER_STORAGE_UINT32_KHR = 2;
    VK_PERFORMANCE_COUNTER_STORAGE_UINT64_KHR = 3;
    VK_PERFORMANCE_COUNTER_STORAGE_FLOAT32_KHR = 4;
    VK_PERFORMANCE_COUNTER_STORAGE_FLOAT64_KHR = 5;
    VK_PERFORMANCE_COUNTER_STORAGE_MAX_ENUM_KHR = 0x7FFFFFFF;
}

enum VkPerformanceCounterDescriptionFlagBitsKHR {
    VK_PERFORMANCE_COUNTER_DESCRIPTION_PERFORMANCE_IMPACTING_BIT_KHR = 0x00000001;
    VK_PERFORMANCE_COUNTER_DESCRIPTION_CONCURRENTLY_IMPACTED_BIT_KHR = 0x00000002;
    VK_PERFORMANCE_COUNTER_DESCRIPTION_PERFORMANCE_IMPACTING_KHR = VK_PERFORMANCE_COUNTER_DESCRIPTION_PERFORMANCE_IMPACTING_BIT_KHR;
    VK_PERFORMANCE_COUNTER_DESCRIPTION_CONCURRENTLY_IMPACTED_KHR = VK_PERFORMANCE_COUNTER_DESCRIPTION_CONCURRENTLY_IMPACTED_BIT_KHR;
    VK_PERFORMANCE_COUNTER_DESCRIPTION_FLAG_BITS_MAX_ENUM_KHR = 0x7FFFFFFF;
}

enum VkAcquireProfilingLockFlagBitsKHR {
    VK_ACQUIRE_PROFILING_LOCK_FLAG_BITS_MAX_ENUM_KHR = 0x7FFFFFFF;
}

struct VkPhysicalDevicePerformanceQueryFeaturesKHR {
    sType := VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PERFORMANCE_QUERY_FEATURES_KHR;
    pNext: void*;
    performanceCounterQueryPools: u32;
    performanceCounterMultipleQueryPools: u32;
}

struct VkPhysicalDevicePerformanceQueryPropertiesKHR {
    sType := VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PERFORMANCE_QUERY_PROPERTIES_KHR;
    pNext: void*;
    allowCommandBufferQueryCopies: u32;
}

struct VkPerformanceCounterKHR {
    sType := VkStructureType.VK_STRUCTURE_TYPE_PERFORMANCE_COUNTER_KHR;
    pNext: void*;
    unit: VkPerformanceCounterUnitKHR;
    scope: VkPerformanceCounterScopeKHR;
    storage: VkPerformanceCounterStorageKHR;
    uuid: CArray<u8>[16];
}

struct VkPerformanceCounterDescriptionKHR {
    sType := VkStructureType.VK_STRUCTURE_TYPE_PERFORMANCE_COUNTER_DESCRIPTION_KHR;
    pNext: void*;
    flags: u32;
    name: CArray<u8>[256];
    category: CArray<u8>[256];
    description: CArray<u8>[256];
}

struct VkQueryPoolPerformanceCreateInfoKHR {
    sType := VkStructureType.VK_STRUCTURE_TYPE_PERFORMANCE_QUERY_SUBMIT_INFO_KHR;
    pNext: void*;
    queueFamilyIndex: u32;
    counterIndexCount: u32;
    pCounterIndices: u32*;
}

union VkPerformanceCounterResultKHR {
    int32: s32;
    int64: s64;
    uint32: u32;
    uint64: u64;
    float32: float;
    float64: float64;
}

struct VkAcquireProfilingLockInfoKHR {
    sType := VkStructureType.VK_STRUCTURE_TYPE_ACQUIRE_PROFILING_LOCK_INFO_KHR;
    pNext: void*;
    flags: u32;
    timeout: u64;
}

struct VkPerformanceQuerySubmitInfoKHR {
    sType := VkStructureType.VK_STRUCTURE_TYPE_PERFORMANCE_QUERY_SUBMIT_INFO_KHR;
    pNext: void*;
    counterPassIndex: u32;
}

interface VkResult PFN_vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR(VkPhysicalDevice* physicalDevice, u32 queueFamilyIndex, u32* pCounterCount, VkPerformanceCounterKHR* pCounters, VkPerformanceCounterDescriptionKHR* pCounterDescriptions)

interface PFN_vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR(VkPhysicalDevice* physicalDevice, VkQueryPoolPerformanceCreateInfoKHR* pPerformanceQueryCreateInfo, u32* pNumPasses)

interface VkResult PFN_vkAcquireProfilingLockKHR(VkDevice* device, VkAcquireProfilingLockInfoKHR* pInfo)

interface PFN_vkReleaseProfilingLockKHR(VkDevice* device)

VkResult vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR(VkPhysicalDevice* physicalDevice, u32 queueFamilyIndex, u32* pCounterCount, VkPerformanceCounterKHR* pCounters, VkPerformanceCounterDescriptionKHR* pCounterDescriptions) #extern vulkan

vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR(VkPhysicalDevice* physicalDevice, VkQueryPoolPerformanceCreateInfoKHR* pPerformanceQueryCreateInfo, u32* pNumPasses) #extern vulkan

VkResult vkAcquireProfilingLockKHR(VkDevice* device, VkAcquireProfilingLockInfoKHR* pInfo) #extern vulkan

vkReleaseProfilingLockKHR(VkDevice* device) #extern vulkan

struct VkPhysicalDeviceSurfaceInfo2KHR {
    sType := VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SURFACE_INFO_2_KHR;
    pNext: void*;
    surface: VkSurfaceKHR*;
}

struct VkSurfaceCapabilities2KHR {
    sType := VkStructureType.VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_2_KHR;
    pNext: void*;
    surfaceCapabilities: VkSurfaceCapabilitiesKHR;
}

struct VkSurfaceFormat2KHR {
    sType := VkStructureType.VK_STRUCTURE_TYPE_SURFACE_FORMAT_2_KHR;
    pNext: void*;
    surfaceFormat: VkSurfaceFormatKHR;
}

interface VkResult PFN_vkGetPhysicalDeviceSurfaceCapabilities2KHR(VkPhysicalDevice* physicalDevice, VkPhysicalDeviceSurfaceInfo2KHR* pSurfaceInfo, VkSurfaceCapabilities2KHR* pSurfaceCapabilities)

interface VkResult PFN_vkGetPhysicalDeviceSurfaceFormats2KHR(VkPhysicalDevice* physicalDevice, VkPhysicalDeviceSurfaceInfo2KHR* pSurfaceInfo, u32* pSurfaceFormatCount, VkSurfaceFormat2KHR* pSurfaceFormats)

VkResult vkGetPhysicalDeviceSurfaceCapabilities2KHR(VkPhysicalDevice* physicalDevice, VkPhysicalDeviceSurfaceInfo2KHR* pSurfaceInfo, VkSurfaceCapabilities2KHR* pSurfaceCapabilities) #extern vulkan

VkResult vkGetPhysicalDeviceSurfaceFormats2KHR(VkPhysicalDevice* physicalDevice, VkPhysicalDeviceSurfaceInfo2KHR* pSurfaceInfo, u32* pSurfaceFormatCount, VkSurfaceFormat2KHR* pSurfaceFormats) #extern vulkan

struct VkDisplayProperties2KHR {
    sType := VkStructureType.VK_STRUCTURE_TYPE_DISPLAY_PROPERTIES_2_KHR;
    pNext: void*;
    displayProperties: VkDisplayPropertiesKHR;
}

struct VkDisplayPlaneProperties2KHR {
    sType := VkStructureType.VK_STRUCTURE_TYPE_DISPLAY_PLANE_PROPERTIES_2_KHR;
    pNext: void*;
    displayPlaneProperties: VkDisplayPlanePropertiesKHR;
}

struct VkDisplayModeProperties2KHR {
    sType := VkStructureType.VK_STRUCTURE_TYPE_DISPLAY_MODE_PROPERTIES_2_KHR;
    pNext: void*;
    displayModeProperties: VkDisplayModePropertiesKHR;
}

struct VkDisplayPlaneInfo2KHR {
    sType := VkStructureType.VK_STRUCTURE_TYPE_DISPLAY_PLANE_INFO_2_KHR;
    pNext: void*;
    mode: VkDisplayModeKHR*;
    planeIndex: u32;
}

struct VkDisplayPlaneCapabilities2KHR {
    sType := VkStructureType.VK_STRUCTURE_TYPE_DISPLAY_PLANE_CAPABILITIES_2_KHR;
    pNext: void*;
    capabilities: VkDisplayPlaneCapabilitiesKHR;
}

interface VkResult PFN_vkGetPhysicalDeviceDisplayProperties2KHR(VkPhysicalDevice* physicalDevice, u32* pPropertyCount, VkDisplayProperties2KHR* pProperties)

interface VkResult PFN_vkGetPhysicalDeviceDisplayPlaneProperties2KHR(VkPhysicalDevice* physicalDevice, u32* pPropertyCount, VkDisplayPlaneProperties2KHR* pProperties)

interface VkResult PFN_vkGetDisplayModeProperties2KHR(VkPhysicalDevice* physicalDevice, VkDisplayKHR* display, u32* pPropertyCount, VkDisplayModeProperties2KHR* pProperties)

interface VkResult PFN_vkGetDisplayPlaneCapabilities2KHR(VkPhysicalDevice* physicalDevice, VkDisplayPlaneInfo2KHR* pDisplayPlaneInfo, VkDisplayPlaneCapabilities2KHR* pCapabilities)

VkResult vkGetPhysicalDeviceDisplayProperties2KHR(VkPhysicalDevice* physicalDevice, u32* pPropertyCount, VkDisplayProperties2KHR* pProperties) #extern vulkan

VkResult vkGetPhysicalDeviceDisplayPlaneProperties2KHR(VkPhysicalDevice* physicalDevice, u32* pPropertyCount, VkDisplayPlaneProperties2KHR* pProperties) #extern vulkan

VkResult vkGetDisplayModeProperties2KHR(VkPhysicalDevice* physicalDevice, VkDisplayKHR* display, u32* pPropertyCount, VkDisplayModeProperties2KHR* pProperties) #extern vulkan

VkResult vkGetDisplayPlaneCapabilities2KHR(VkPhysicalDevice* physicalDevice, VkDisplayPlaneInfo2KHR* pDisplayPlaneInfo, VkDisplayPlaneCapabilities2KHR* pCapabilities) #extern vulkan

interface PFN_vkGetImageMemoryRequirements2KHR(VkDevice* device, VkImageMemoryRequirementsInfo2* pInfo, VkMemoryRequirements2* pMemoryRequirements)

interface PFN_vkGetBufferMemoryRequirements2KHR(VkDevice* device, VkBufferMemoryRequirementsInfo2* pInfo, VkMemoryRequirements2* pMemoryRequirements)

interface PFN_vkGetImageSparseMemoryRequirements2KHR(VkDevice* device, VkImageSparseMemoryRequirementsInfo2* pInfo, u32* pSparseMemoryRequirementCount, VkSparseImageMemoryRequirements2* pSparseMemoryRequirements)

vkGetImageMemoryRequirements2KHR(VkDevice* device, VkImageMemoryRequirementsInfo2* pInfo, VkMemoryRequirements2* pMemoryRequirements) #extern vulkan

vkGetBufferMemoryRequirements2KHR(VkDevice* device, VkBufferMemoryRequirementsInfo2* pInfo, VkMemoryRequirements2* pMemoryRequirements) #extern vulkan

vkGetImageSparseMemoryRequirements2KHR(VkDevice* device, VkImageSparseMemoryRequirementsInfo2* pInfo, u32* pSparseMemoryRequirementCount, VkSparseImageMemoryRequirements2* pSparseMemoryRequirements) #extern vulkan

interface VkResult PFN_vkCreateSamplerYcbcrConversionKHR(VkDevice* device, VkSamplerYcbcrConversionCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, VkSamplerYcbcrConversion** pYcbcrConversion)

interface PFN_vkDestroySamplerYcbcrConversionKHR(VkDevice* device, VkSamplerYcbcrConversion* ycbcrConversion, VkAllocationCallbacks* pAllocator)

VkResult vkCreateSamplerYcbcrConversionKHR(VkDevice* device, VkSamplerYcbcrConversionCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, VkSamplerYcbcrConversion** pYcbcrConversion) #extern vulkan

vkDestroySamplerYcbcrConversionKHR(VkDevice* device, VkSamplerYcbcrConversion* ycbcrConversion, VkAllocationCallbacks* pAllocator) #extern vulkan

interface VkResult PFN_vkBindBufferMemory2KHR(VkDevice* device, u32 bindInfoCount, VkBindBufferMemoryInfo* pBindInfos)

interface VkResult PFN_vkBindImageMemory2KHR(VkDevice* device, u32 bindInfoCount, VkBindImageMemoryInfo* pBindInfos)

VkResult vkBindBufferMemory2KHR(VkDevice* device, u32 bindInfoCount, VkBindBufferMemoryInfo* pBindInfos) #extern vulkan

VkResult vkBindImageMemory2KHR(VkDevice* device, u32 bindInfoCount, VkBindImageMemoryInfo* pBindInfos) #extern vulkan

interface PFN_vkGetDescriptorSetLayoutSupportKHR(VkDevice* device, VkDescriptorSetLayoutCreateInfo* pCreateInfo, VkDescriptorSetLayoutSupport* pSupport)

vkGetDescriptorSetLayoutSupportKHR(VkDevice* device, VkDescriptorSetLayoutCreateInfo* pCreateInfo, VkDescriptorSetLayoutSupport* pSupport) #extern vulkan

interface PFN_vkCmdDrawIndirectCountKHR(VkCommandBuffer* commandBuffer, VkBuffer* buffer, u64 offset, VkBuffer* countBuffer, u64 countBufferOffset, u32 maxDrawCount, u32 stride)

interface PFN_vkCmdDrawIndexedIndirectCountKHR(VkCommandBuffer* commandBuffer, VkBuffer* buffer, u64 offset, VkBuffer* countBuffer, u64 countBufferOffset, u32 maxDrawCount, u32 stride)

vkCmdDrawIndirectCountKHR(VkCommandBuffer* commandBuffer, VkBuffer* buffer, u64 offset, VkBuffer* countBuffer, u64 countBufferOffset, u32 maxDrawCount, u32 stride) #extern vulkan

vkCmdDrawIndexedIndirectCountKHR(VkCommandBuffer* commandBuffer, VkBuffer* buffer, u64 offset, VkBuffer* countBuffer, u64 countBufferOffset, u32 maxDrawCount, u32 stride) #extern vulkan

struct VkPhysicalDeviceShaderClockFeaturesKHR {
    sType := VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CLOCK_FEATURES_KHR;
    pNext: void*;
    shaderSubgroupClock: u32;
    shaderDeviceClock: u32;
}

interface VkResult PFN_vkGetSemaphoreCounterValueKHR(VkDevice* device, VkSemaphore* semaphore, u64* pValue)

interface VkResult PFN_vkWaitSemaphoresKHR(VkDevice* device, VkSemaphoreWaitInfo* pWaitInfo, u64 timeout)

interface VkResult PFN_vkSignalSemaphoreKHR(VkDevice* device, VkSemaphoreSignalInfo* pSignalInfo)

VkResult vkGetSemaphoreCounterValueKHR(VkDevice* device, VkSemaphore* semaphore, u64* pValue) #extern vulkan

VkResult vkWaitSemaphoresKHR(VkDevice* device, VkSemaphoreWaitInfo* pWaitInfo, u64 timeout) #extern vulkan

VkResult vkSignalSemaphoreKHR(VkDevice* device, VkSemaphoreSignalInfo* pSignalInfo) #extern vulkan

struct VkPhysicalDeviceShaderTerminateInvocationFeaturesKHR {
    sType := VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_TERMINATE_INVOCATION_FEATURES_KHR;
    pNext: void*;
    shaderTerminateInvocation: u32;
}

enum VkFragmentShadingRateCombinerOpKHR {
    VK_FRAGMENT_SHADING_RATE_COMBINER_OP_KEEP_KHR = 0;
    VK_FRAGMENT_SHADING_RATE_COMBINER_OP_REPLACE_KHR = 1;
    VK_FRAGMENT_SHADING_RATE_COMBINER_OP_MIN_KHR = 2;
    VK_FRAGMENT_SHADING_RATE_COMBINER_OP_MAX_KHR = 3;
    VK_FRAGMENT_SHADING_RATE_COMBINER_OP_MUL_KHR = 4;
    VK_FRAGMENT_SHADING_RATE_COMBINER_OP_MAX_ENUM_KHR = 0x7FFFFFFF;
}

struct VkFragmentShadingRateAttachmentInfoKHR {
    sType := VkStructureType.VK_STRUCTURE_TYPE_FRAGMENT_SHADING_RATE_ATTACHMENT_INFO_KHR;
    pNext: void*;
    pFragmentShadingRateAttachment: VkAttachmentReference2*;
    shadingRateAttachmentTexelSize: VkExtent2D;
}

struct VkPipelineFragmentShadingRateStateCreateInfoKHR {
    sType := VkStructureType.VK_STRUCTURE_TYPE_PIPELINE_FRAGMENT_SHADING_RATE_STATE_CREATE_INFO_KHR;
    pNext: void*;
    fragmentSize: VkExtent2D;
    combinerOps: CArray<VkFragmentShadingRateCombinerOpKHR>[2];
}

struct VkPhysicalDeviceFragmentShadingRateFeaturesKHR {
    sType := VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_FEATURES_KHR;
    pNext: void*;
    pipelineFragmentShadingRate: u32;
    primitiveFragmentShadingRate: u32;
    attachmentFragmentShadingRate: u32;
}

struct VkPhysicalDeviceFragmentShadingRatePropertiesKHR {
    sType := VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_PROPERTIES_KHR;
    pNext: void*;
    minFragmentShadingRateAttachmentTexelSize: VkExtent2D;
    maxFragmentShadingRateAttachmentTexelSize: VkExtent2D;
    maxFragmentShadingRateAttachmentTexelSizeAspectRatio: u32;
    primitiveFragmentShadingRateWithMultipleViewports: u32;
    layeredShadingRateAttachments: u32;
    fragmentShadingRateNonTrivialCombinerOps: u32;
    maxFragmentSize: VkExtent2D;
    maxFragmentSizeAspectRatio: u32;
    maxFragmentShadingRateCoverageSamples: u32;
    maxFragmentShadingRateRasterizationSamples: VkSampleCountFlagBits;
    fragmentShadingRateWithShaderDepthStencilWrites: u32;
    fragmentShadingRateWithSampleMask: u32;
    fragmentShadingRateWithShaderSampleMask: u32;
    fragmentShadingRateWithConservativeRasterization: u32;
    fragmentShadingRateWithFragmentShaderInterlock: u32;
    fragmentShadingRateWithCustomSampleLocations: u32;
    fragmentShadingRateStrictMultiplyCombiner: u32;
}

struct VkPhysicalDeviceFragmentShadingRateKHR {
    sType := VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_KHR;
    pNext: void*;
    sampleCounts: u32;
    fragmentSize: VkExtent2D;
}

interface VkResult PFN_vkGetPhysicalDeviceFragmentShadingRatesKHR(VkPhysicalDevice* physicalDevice, u32* pFragmentShadingRateCount, VkPhysicalDeviceFragmentShadingRateKHR* pFragmentShadingRates)

interface PFN_vkCmdSetFragmentShadingRateKHR(VkCommandBuffer* commandBuffer, VkExtent2D* pFragmentSize, CArray<VkFragmentShadingRateCombinerOpKHR>[2] combinerOps)

VkResult vkGetPhysicalDeviceFragmentShadingRatesKHR(VkPhysicalDevice* physicalDevice, u32* pFragmentShadingRateCount, VkPhysicalDeviceFragmentShadingRateKHR* pFragmentShadingRates) #extern vulkan

vkCmdSetFragmentShadingRateKHR(VkCommandBuffer* commandBuffer, VkExtent2D* pFragmentSize, CArray<VkFragmentShadingRateCombinerOpKHR>[2] combinerOps) #extern vulkan

struct VkSurfaceProtectedCapabilitiesKHR {
    sType := VkStructureType.VK_STRUCTURE_TYPE_SURFACE_PROTECTED_CAPABILITIES_KHR;
    pNext: void*;
    supportsProtected: u32;
}

struct VkPhysicalDevicePresentWaitFeaturesKHR {
    sType := VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRESENT_WAIT_FEATURES_KHR;
    pNext: void*;
    presentWait: u32;
}

interface VkResult PFN_vkWaitForPresentKHR(VkDevice* device, VkSwapchainKHR* swapchain, u64 presentId, u64 timeout)

VkResult vkWaitForPresentKHR(VkDevice* device, VkSwapchainKHR* swapchain, u64 presentId, u64 timeout) #extern vulkan

interface u64 PFN_vkGetBufferDeviceAddressKHR(VkDevice* device, VkBufferDeviceAddressInfo* pInfo)

interface u64 PFN_vkGetBufferOpaqueCaptureAddressKHR(VkDevice* device, VkBufferDeviceAddressInfo* pInfo)

interface u64 PFN_vkGetDeviceMemoryOpaqueCaptureAddressKHR(VkDevice* device, VkDeviceMemoryOpaqueCaptureAddressInfo* pInfo)

u64 vkGetBufferDeviceAddressKHR(VkDevice* device, VkBufferDeviceAddressInfo* pInfo) #extern vulkan

u64 vkGetBufferOpaqueCaptureAddressKHR(VkDevice* device, VkBufferDeviceAddressInfo* pInfo) #extern vulkan

u64 vkGetDeviceMemoryOpaqueCaptureAddressKHR(VkDevice* device, VkDeviceMemoryOpaqueCaptureAddressInfo* pInfo) #extern vulkan

struct VkDeferredOperationKHR {}
interface VkResult PFN_vkCreateDeferredOperationKHR(VkDevice* device, VkAllocationCallbacks* pAllocator, VkDeferredOperationKHR** pDeferredOperation)

interface PFN_vkDestroyDeferredOperationKHR(VkDevice* device, VkDeferredOperationKHR* operation, VkAllocationCallbacks* pAllocator)

interface u32 PFN_vkGetDeferredOperationMaxConcurrencyKHR(VkDevice* device, VkDeferredOperationKHR* operation)

interface VkResult PFN_vkGetDeferredOperationResultKHR(VkDevice* device, VkDeferredOperationKHR* operation)

interface VkResult PFN_vkDeferredOperationJoinKHR(VkDevice* device, VkDeferredOperationKHR* operation)

VkResult vkCreateDeferredOperationKHR(VkDevice* device, VkAllocationCallbacks* pAllocator, VkDeferredOperationKHR** pDeferredOperation) #extern vulkan

vkDestroyDeferredOperationKHR(VkDevice* device, VkDeferredOperationKHR* operation, VkAllocationCallbacks* pAllocator) #extern vulkan

u32 vkGetDeferredOperationMaxConcurrencyKHR(VkDevice* device, VkDeferredOperationKHR* operation) #extern vulkan

VkResult vkGetDeferredOperationResultKHR(VkDevice* device, VkDeferredOperationKHR* operation) #extern vulkan

VkResult vkDeferredOperationJoinKHR(VkDevice* device, VkDeferredOperationKHR* operation) #extern vulkan

enum VkPipelineExecutableStatisticFormatKHR {
    VK_PIPELINE_EXECUTABLE_STATISTIC_FORMAT_BOOL32_KHR = 0;
    VK_PIPELINE_EXECUTABLE_STATISTIC_FORMAT_INT64_KHR = 1;
    VK_PIPELINE_EXECUTABLE_STATISTIC_FORMAT_UINT64_KHR = 2;
    VK_PIPELINE_EXECUTABLE_STATISTIC_FORMAT_FLOAT64_KHR = 3;
    VK_PIPELINE_EXECUTABLE_STATISTIC_FORMAT_MAX_ENUM_KHR = 0x7FFFFFFF;
}

struct VkPhysicalDevicePipelineExecutablePropertiesFeaturesKHR {
    sType := VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_EXECUTABLE_PROPERTIES_FEATURES_KHR;
    pNext: void*;
    pipelineExecutableInfo: u32;
}

struct VkPipelineInfoKHR {
    sType := VkStructureType.VK_STRUCTURE_TYPE_PIPELINE_INFO_KHR;
    pNext: void*;
    pipeline: VkPipeline*;
}

struct VkPipelineExecutablePropertiesKHR {
    sType := VkStructureType.VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_PROPERTIES_KHR;
    pNext: void*;
    stages: u32;
    name: CArray<u8>[256];
    description: CArray<u8>[256];
    subgroupSize: u32;
}

struct VkPipelineExecutableInfoKHR {
    sType := VkStructureType.VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_INFO_KHR;
    pNext: void*;
    pipeline: VkPipeline*;
    executableIndex: u32;
}

union VkPipelineExecutableStatisticValueKHR {
    b32: u32;
    i64: s64;
    u64: u64;
    f64: float64;
}

struct VkPipelineExecutableStatisticKHR {
    sType := VkStructureType.VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_STATISTIC_KHR;
    pNext: void*;
    name: CArray<u8>[256];
    description: CArray<u8>[256];
    format: VkPipelineExecutableStatisticFormatKHR;
    value: VkPipelineExecutableStatisticValueKHR;
}

struct VkPipelineExecutableInternalRepresentationKHR {
    sType := VkStructureType.VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_INTERNAL_REPRESENTATION_KHR;
    pNext: void*;
    name: CArray<u8>[256];
    description: CArray<u8>[256];
    isText: u32;
    dataSize: u64;
    pData: void*;
}

interface VkResult PFN_vkGetPipelineExecutablePropertiesKHR(VkDevice* device, VkPipelineInfoKHR* pPipelineInfo, u32* pExecutableCount, VkPipelineExecutablePropertiesKHR* pProperties)

interface VkResult PFN_vkGetPipelineExecutableStatisticsKHR(VkDevice* device, VkPipelineExecutableInfoKHR* pExecutableInfo, u32* pStatisticCount, VkPipelineExecutableStatisticKHR* pStatistics)

interface VkResult PFN_vkGetPipelineExecutableInternalRepresentationsKHR(VkDevice* device, VkPipelineExecutableInfoKHR* pExecutableInfo, u32* pInternalRepresentationCount, VkPipelineExecutableInternalRepresentationKHR* pInternalRepresentations)

VkResult vkGetPipelineExecutablePropertiesKHR(VkDevice* device, VkPipelineInfoKHR* pPipelineInfo, u32* pExecutableCount, VkPipelineExecutablePropertiesKHR* pProperties) #extern vulkan

VkResult vkGetPipelineExecutableStatisticsKHR(VkDevice* device, VkPipelineExecutableInfoKHR* pExecutableInfo, u32* pStatisticCount, VkPipelineExecutableStatisticKHR* pStatistics) #extern vulkan

VkResult vkGetPipelineExecutableInternalRepresentationsKHR(VkDevice* device, VkPipelineExecutableInfoKHR* pExecutableInfo, u32* pInternalRepresentationCount, VkPipelineExecutableInternalRepresentationKHR* pInternalRepresentations) #extern vulkan

struct VkPhysicalDeviceShaderIntegerDotProductFeaturesKHR {
    sType := VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_INTEGER_DOT_PRODUCT_FEATURES_KHR;
    pNext: void*;
    shaderIntegerDotProduct: u32;
}

struct VkPhysicalDeviceShaderIntegerDotProductPropertiesKHR {
    sType := VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_INTEGER_DOT_PRODUCT_PROPERTIES_KHR;
    pNext: void*;
    integerDotProduct8BitUnsignedAccelerated: u32;
    integerDotProduct8BitSignedAccelerated: u32;
    integerDotProduct8BitMixedSignednessAccelerated: u32;
    integerDotProduct4x8BitPackedUnsignedAccelerated: u32;
    integerDotProduct4x8BitPackedSignedAccelerated: u32;
    integerDotProduct4x8BitPackedMixedSignednessAccelerated: u32;
    integerDotProduct16BitUnsignedAccelerated: u32;
    integerDotProduct16BitSignedAccelerated: u32;
    integerDotProduct16BitMixedSignednessAccelerated: u32;
    integerDotProduct32BitUnsignedAccelerated: u32;
    integerDotProduct32BitSignedAccelerated: u32;
    integerDotProduct32BitMixedSignednessAccelerated: u32;
    integerDotProduct64BitUnsignedAccelerated: u32;
    integerDotProduct64BitSignedAccelerated: u32;
    integerDotProduct64BitMixedSignednessAccelerated: u32;
    integerDotProductAccumulatingSaturating8BitUnsignedAccelerated: u32;
    integerDotProductAccumulatingSaturating8BitSignedAccelerated: u32;
    integerDotProductAccumulatingSaturating8BitMixedSignednessAccelerated: u32;
    integerDotProductAccumulatingSaturating4x8BitPackedUnsignedAccelerated: u32;
    integerDotProductAccumulatingSaturating4x8BitPackedSignedAccelerated: u32;
    integerDotProductAccumulatingSaturating4x8BitPackedMixedSignednessAccelerated: u32;
    integerDotProductAccumulatingSaturating16BitUnsignedAccelerated: u32;
    integerDotProductAccumulatingSaturating16BitSignedAccelerated: u32;
    integerDotProductAccumulatingSaturating16BitMixedSignednessAccelerated: u32;
    integerDotProductAccumulatingSaturating32BitUnsignedAccelerated: u32;
    integerDotProductAccumulatingSaturating32BitSignedAccelerated: u32;
    integerDotProductAccumulatingSaturating32BitMixedSignednessAccelerated: u32;
    integerDotProductAccumulatingSaturating64BitUnsignedAccelerated: u32;
    integerDotProductAccumulatingSaturating64BitSignedAccelerated: u32;
    integerDotProductAccumulatingSaturating64BitMixedSignednessAccelerated: u32;
}

struct VkPipelineLibraryCreateInfoKHR {
    sType := VkStructureType.VK_STRUCTURE_TYPE_PIPELINE_LIBRARY_CREATE_INFO_KHR;
    pNext: void*;
    libraryCount: u32;
    pLibraries: VkPipeline**;
}

struct VkPresentIdKHR {
    sType := VkStructureType.VK_STRUCTURE_TYPE_PRESENT_ID_KHR;
    pNext: void*;
    swapchainCount: u32;
    pPresentIds: u64*;
}

struct VkPhysicalDevicePresentIdFeaturesKHR {
    sType := VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRESENT_ID_FEATURES_KHR;
    pNext: void*;
    presentId: u32;
}

VK_PIPELINE_STAGE_2_NONE_KHR: u64 = 0; #const
VK_PIPELINE_STAGE_2_TOP_OF_PIPE_BIT_KHR: u64 = 0x00000001; #const
VK_PIPELINE_STAGE_2_DRAW_INDIRECT_BIT_KHR: u64 = 0x00000002; #const
VK_PIPELINE_STAGE_2_VERTEX_INPUT_BIT_KHR: u64 = 0x00000004; #const
VK_PIPELINE_STAGE_2_VERTEX_SHADER_BIT_KHR: u64 = 0x00000008; #const
VK_PIPELINE_STAGE_2_TESSELLATION_CONTROL_SHADER_BIT_KHR: u64 = 0x00000010; #const
VK_PIPELINE_STAGE_2_TESSELLATION_EVALUATION_SHADER_BIT_KHR: u64 = 0x00000020; #const
VK_PIPELINE_STAGE_2_GEOMETRY_SHADER_BIT_KHR: u64 = 0x00000040; #const
VK_PIPELINE_STAGE_2_FRAGMENT_SHADER_BIT_KHR: u64 = 0x00000080; #const
VK_PIPELINE_STAGE_2_EARLY_FRAGMENT_TESTS_BIT_KHR: u64 = 0x00000100; #const
VK_PIPELINE_STAGE_2_LATE_FRAGMENT_TESTS_BIT_KHR: u64 = 0x00000200; #const
VK_PIPELINE_STAGE_2_COLOR_ATTACHMENT_OUTPUT_BIT_KHR: u64 = 0x00000400; #const
VK_PIPELINE_STAGE_2_COMPUTE_SHADER_BIT_KHR: u64 = 0x00000800; #const
VK_PIPELINE_STAGE_2_ALL_TRANSFER_BIT_KHR: u64 = 0x00001000; #const
VK_PIPELINE_STAGE_2_TRANSFER_BIT_KHR: u64 = 0x00001000; #const
VK_PIPELINE_STAGE_2_BOTTOM_OF_PIPE_BIT_KHR: u64 = 0x00002000; #const
VK_PIPELINE_STAGE_2_HOST_BIT_KHR: u64 = 0x00004000; #const
VK_PIPELINE_STAGE_2_ALL_GRAPHICS_BIT_KHR: u64 = 0x00008000; #const
VK_PIPELINE_STAGE_2_ALL_COMMANDS_BIT_KHR: u64 = 0x00010000; #const
VK_PIPELINE_STAGE_2_COPY_BIT_KHR: u64 = 0x100000000; #const
VK_PIPELINE_STAGE_2_RESOLVE_BIT_KHR: u64 = 0x200000000; #const
VK_PIPELINE_STAGE_2_BLIT_BIT_KHR: u64 = 0x400000000; #const
VK_PIPELINE_STAGE_2_CLEAR_BIT_KHR: u64 = 0x800000000; #const
VK_PIPELINE_STAGE_2_INDEX_INPUT_BIT_KHR: u64 = 0x1000000000; #const
VK_PIPELINE_STAGE_2_VERTEX_ATTRIBUTE_INPUT_BIT_KHR: u64 = 0x2000000000; #const
VK_PIPELINE_STAGE_2_PRE_RASTERIZATION_SHADERS_BIT_KHR: u64 = 0x4000000000; #const
VK_PIPELINE_STAGE_2_TRANSFORM_FEEDBACK_BIT_EXT: u64 = 0x01000000; #const
VK_PIPELINE_STAGE_2_CONDITIONAL_RENDERING_BIT_EXT: u64 = 0x00040000; #const
VK_PIPELINE_STAGE_2_COMMAND_PREPROCESS_BIT_NV: u64 = 0x00020000; #const
VK_PIPELINE_STAGE_2_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR: u64 = 0x00400000; #const
VK_PIPELINE_STAGE_2_SHADING_RATE_IMAGE_BIT_NV: u64 = 0x00400000; #const
VK_PIPELINE_STAGE_2_ACCELERATION_STRUCTURE_BUILD_BIT_KHR: u64 = 0x02000000; #const
VK_PIPELINE_STAGE_2_RAY_TRACING_SHADER_BIT_KHR: u64 = 0x00200000; #const
VK_PIPELINE_STAGE_2_RAY_TRACING_SHADER_BIT_NV: u64 = 0x00200000; #const
VK_PIPELINE_STAGE_2_ACCELERATION_STRUCTURE_BUILD_BIT_NV: u64 = 0x02000000; #const
VK_PIPELINE_STAGE_2_FRAGMENT_DENSITY_PROCESS_BIT_EXT: u64 = 0x00800000; #const
VK_PIPELINE_STAGE_2_TASK_SHADER_BIT_NV: u64 = 0x00080000; #const
VK_PIPELINE_STAGE_2_MESH_SHADER_BIT_NV: u64 = 0x00100000; #const
VK_PIPELINE_STAGE_2_SUBPASS_SHADING_BIT_HUAWEI: u64 = 0x8000000000; #const
VK_PIPELINE_STAGE_2_INVOCATION_MASK_BIT_HUAWEI: u64 = 0x10000000000; #const
VK_ACCESS_2_NONE_KHR: u64 = 0; #const
VK_ACCESS_2_INDIRECT_COMMAND_READ_BIT_KHR: u64 = 0x00000001; #const
VK_ACCESS_2_INDEX_READ_BIT_KHR: u64 = 0x00000002; #const
VK_ACCESS_2_VERTEX_ATTRIBUTE_READ_BIT_KHR: u64 = 0x00000004; #const
VK_ACCESS_2_UNIFORM_READ_BIT_KHR: u64 = 0x00000008; #const
VK_ACCESS_2_INPUT_ATTACHMENT_READ_BIT_KHR: u64 = 0x00000010; #const
VK_ACCESS_2_SHADER_READ_BIT_KHR: u64 = 0x00000020; #const
VK_ACCESS_2_SHADER_WRITE_BIT_KHR: u64 = 0x00000040; #const
VK_ACCESS_2_COLOR_ATTACHMENT_READ_BIT_KHR: u64 = 0x00000080; #const
VK_ACCESS_2_COLOR_ATTACHMENT_WRITE_BIT_KHR: u64 = 0x00000100; #const
VK_ACCESS_2_DEPTH_STENCIL_ATTACHMENT_READ_BIT_KHR: u64 = 0x00000200; #const
VK_ACCESS_2_DEPTH_STENCIL_ATTACHMENT_WRITE_BIT_KHR: u64 = 0x00000400; #const
VK_ACCESS_2_TRANSFER_READ_BIT_KHR: u64 = 0x00000800; #const
VK_ACCESS_2_TRANSFER_WRITE_BIT_KHR: u64 = 0x00001000; #const
VK_ACCESS_2_HOST_READ_BIT_KHR: u64 = 0x00002000; #const
VK_ACCESS_2_HOST_WRITE_BIT_KHR: u64 = 0x00004000; #const
VK_ACCESS_2_MEMORY_READ_BIT_KHR: u64 = 0x00008000; #const
VK_ACCESS_2_MEMORY_WRITE_BIT_KHR: u64 = 0x00010000; #const
VK_ACCESS_2_SHADER_SAMPLED_READ_BIT_KHR: u64 = 0x100000000; #const
VK_ACCESS_2_SHADER_STORAGE_READ_BIT_KHR: u64 = 0x200000000; #const
VK_ACCESS_2_SHADER_STORAGE_WRITE_BIT_KHR: u64 = 0x400000000; #const
VK_ACCESS_2_TRANSFORM_FEEDBACK_WRITE_BIT_EXT: u64 = 0x02000000; #const
VK_ACCESS_2_TRANSFORM_FEEDBACK_COUNTER_READ_BIT_EXT: u64 = 0x04000000; #const
VK_ACCESS_2_TRANSFORM_FEEDBACK_COUNTER_WRITE_BIT_EXT: u64 = 0x08000000; #const
VK_ACCESS_2_CONDITIONAL_RENDERING_READ_BIT_EXT: u64 = 0x00100000; #const
VK_ACCESS_2_COMMAND_PREPROCESS_READ_BIT_NV: u64 = 0x00020000; #const
VK_ACCESS_2_COMMAND_PREPROCESS_WRITE_BIT_NV: u64 = 0x00040000; #const
VK_ACCESS_2_FRAGMENT_SHADING_RATE_ATTACHMENT_READ_BIT_KHR: u64 = 0x00800000; #const
VK_ACCESS_2_SHADING_RATE_IMAGE_READ_BIT_NV: u64 = 0x00800000; #const
VK_ACCESS_2_ACCELERATION_STRUCTURE_READ_BIT_KHR: u64 = 0x00200000; #const
VK_ACCESS_2_ACCELERATION_STRUCTURE_WRITE_BIT_KHR: u64 = 0x00400000; #const
VK_ACCESS_2_ACCELERATION_STRUCTURE_READ_BIT_NV: u64 = 0x00200000; #const
VK_ACCESS_2_ACCELERATION_STRUCTURE_WRITE_BIT_NV: u64 = 0x00400000; #const
VK_ACCESS_2_FRAGMENT_DENSITY_MAP_READ_BIT_EXT: u64 = 0x01000000; #const
VK_ACCESS_2_COLOR_ATTACHMENT_READ_NONCOHERENT_BIT_EXT: u64 = 0x00080000; #const
VK_ACCESS_2_INVOCATION_MASK_READ_BIT_HUAWEI: u64 = 0x8000000000; #const

enum VkSubmitFlagBitsKHR {
    VK_SUBMIT_PROTECTED_BIT_KHR = 0x00000001;
    VK_SUBMIT_FLAG_BITS_MAX_ENUM_KHR = 0x7FFFFFFF;
}

struct VkMemoryBarrier2KHR {
    sType := VkStructureType.VK_STRUCTURE_TYPE_MEMORY_BARRIER_2_KHR;
    pNext: void*;
    srcStageMask: u64;
    srcAccessMask: u64;
    dstStageMask: u64;
    dstAccessMask: u64;
}

struct VkBufferMemoryBarrier2KHR {
    sType := VkStructureType.VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER_2_KHR;
    pNext: void*;
    srcStageMask: u64;
    srcAccessMask: u64;
    dstStageMask: u64;
    dstAccessMask: u64;
    srcQueueFamilyIndex: u32;
    dstQueueFamilyIndex: u32;
    buffer: VkBuffer*;
    offset: u64;
    size: u64;
}

struct VkImageMemoryBarrier2KHR {
    sType := VkStructureType.VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER_2_KHR;
    pNext: void*;
    srcStageMask: u64;
    srcAccessMask: u64;
    dstStageMask: u64;
    dstAccessMask: u64;
    oldLayout: VkImageLayout;
    newLayout: VkImageLayout;
    srcQueueFamilyIndex: u32;
    dstQueueFamilyIndex: u32;
    image: VkImage*;
    subresourceRange: VkImageSubresourceRange;
}

struct VkDependencyInfoKHR {
    sType := VkStructureType.VK_STRUCTURE_TYPE_DEPENDENCY_INFO_KHR;
    pNext: void*;
    dependencyFlags: u32;
    memoryBarrierCount: u32;
    pMemoryBarriers: VkMemoryBarrier2KHR*;
    bufferMemoryBarrierCount: u32;
    pBufferMemoryBarriers: VkBufferMemoryBarrier2KHR*;
    imageMemoryBarrierCount: u32;
    pImageMemoryBarriers: VkImageMemoryBarrier2KHR*;
}

struct VkSemaphoreSubmitInfoKHR {
    sType := VkStructureType.VK_STRUCTURE_TYPE_SEMAPHORE_SUBMIT_INFO_KHR;
    pNext: void*;
    semaphore: VkSemaphore*;
    value: u64;
    stageMask: u64;
    deviceIndex: u32;
}

struct VkCommandBufferSubmitInfoKHR {
    sType := VkStructureType.VK_STRUCTURE_TYPE_COMMAND_BUFFER_SUBMIT_INFO_KHR;
    pNext: void*;
    commandBuffer: VkCommandBuffer*;
    deviceMask: u32;
}

struct VkSubmitInfo2KHR {
    sType := VkStructureType.VK_STRUCTURE_TYPE_SUBMIT_INFO_2_KHR;
    pNext: void*;
    flags: u32;
    waitSemaphoreInfoCount: u32;
    pWaitSemaphoreInfos: VkSemaphoreSubmitInfoKHR*;
    commandBufferInfoCount: u32;
    pCommandBufferInfos: VkCommandBufferSubmitInfoKHR*;
    signalSemaphoreInfoCount: u32;
    pSignalSemaphoreInfos: VkSemaphoreSubmitInfoKHR*;
}

struct VkPhysicalDeviceSynchronization2FeaturesKHR {
    sType := VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SYNCHRONIZATION_2_FEATURES_KHR;
    pNext: void*;
    synchronization2: u32;
}

struct VkQueueFamilyCheckpointProperties2NV {
    sType := VkStructureType.VK_STRUCTURE_TYPE_QUEUE_FAMILY_CHECKPOINT_PROPERTIES_2_NV;
    pNext: void*;
    checkpointExecutionStageMask: u64;
}

struct VkCheckpointData2NV {
    sType := VkStructureType.VK_STRUCTURE_TYPE_CHECKPOINT_DATA_2_NV;
    pNext: void*;
    stage: u64;
    pCheckpointMarker: void*;
}

interface PFN_vkCmdSetEvent2KHR(VkCommandBuffer* commandBuffer, VkEvent* event, VkDependencyInfoKHR* pDependencyInfo)

interface PFN_vkCmdResetEvent2KHR(VkCommandBuffer* commandBuffer, VkEvent* event, u64 stageMask)

interface PFN_vkCmdWaitEvents2KHR(VkCommandBuffer* commandBuffer, u32 eventCount, VkEvent** pEvents, VkDependencyInfoKHR* pDependencyInfos)

interface PFN_vkCmdPipelineBarrier2KHR(VkCommandBuffer* commandBuffer, VkDependencyInfoKHR* pDependencyInfo)

interface PFN_vkCmdWriteTimestamp2KHR(VkCommandBuffer* commandBuffer, u64 stage, VkQueryPool* queryPool, u32 query)

interface VkResult PFN_vkQueueSubmit2KHR(VkQueue* queue, u32 submitCount, VkSubmitInfo2KHR* pSubmits, VkFence* fence)

interface PFN_vkCmdWriteBufferMarker2AMD(VkCommandBuffer* commandBuffer, u64 stage, VkBuffer* dstBuffer, u64 dstOffset, u32 marker)

interface PFN_vkGetQueueCheckpointData2NV(VkQueue* queue, u32* pCheckpointDataCount, VkCheckpointData2NV* pCheckpointData)

vkCmdSetEvent2KHR(VkCommandBuffer* commandBuffer, VkEvent* event, VkDependencyInfoKHR* pDependencyInfo) #extern vulkan

vkCmdResetEvent2KHR(VkCommandBuffer* commandBuffer, VkEvent* event, u64 stageMask) #extern vulkan

vkCmdWaitEvents2KHR(VkCommandBuffer* commandBuffer, u32 eventCount, VkEvent** pEvents, VkDependencyInfoKHR* pDependencyInfos) #extern vulkan

vkCmdPipelineBarrier2KHR(VkCommandBuffer* commandBuffer, VkDependencyInfoKHR* pDependencyInfo) #extern vulkan

vkCmdWriteTimestamp2KHR(VkCommandBuffer* commandBuffer, u64 stage, VkQueryPool* queryPool, u32 query) #extern vulkan

VkResult vkQueueSubmit2KHR(VkQueue* queue, u32 submitCount, VkSubmitInfo2KHR* pSubmits, VkFence* fence) #extern vulkan

vkCmdWriteBufferMarker2AMD(VkCommandBuffer* commandBuffer, u64 stage, VkBuffer* dstBuffer, u64 dstOffset, u32 marker) #extern vulkan

vkGetQueueCheckpointData2NV(VkQueue* queue, u32* pCheckpointDataCount, VkCheckpointData2NV* pCheckpointData) #extern vulkan

struct VkPhysicalDeviceShaderSubgroupUniformControlFlowFeaturesKHR {
    sType := VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SUBGROUP_UNIFORM_CONTROL_FLOW_FEATURES_KHR;
    pNext: void*;
    shaderSubgroupUniformControlFlow: u32;
}

struct VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeaturesKHR {
    sType := VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ZERO_INITIALIZE_WORKGROUP_MEMORY_FEATURES_KHR;
    pNext: void*;
    shaderZeroInitializeWorkgroupMemory: u32;
}

struct VkPhysicalDeviceWorkgroupMemoryExplicitLayoutFeaturesKHR {
    sType := VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_WORKGROUP_MEMORY_EXPLICIT_LAYOUT_FEATURES_KHR;
    pNext: void*;
    workgroupMemoryExplicitLayout: u32;
    workgroupMemoryExplicitLayoutScalarBlockLayout: u32;
    workgroupMemoryExplicitLayout8BitAccess: u32;
    workgroupMemoryExplicitLayout16BitAccess: u32;
}

struct VkBufferCopy2KHR {
    sType := VkStructureType.VK_STRUCTURE_TYPE_BUFFER_COPY_2_KHR;
    pNext: void*;
    srcOffset: u64;
    dstOffset: u64;
    size: u64;
}

struct VkCopyBufferInfo2KHR {
    sType := VkStructureType.VK_STRUCTURE_TYPE_COPY_BUFFER_INFO_2_KHR;
    pNext: void*;
    srcBuffer: VkBuffer*;
    dstBuffer: VkBuffer*;
    regionCount: u32;
    pRegions: VkBufferCopy2KHR*;
}

struct VkImageCopy2KHR {
    sType := VkStructureType.VK_STRUCTURE_TYPE_IMAGE_COPY_2_KHR;
    pNext: void*;
    srcSubresource: VkImageSubresourceLayers;
    srcOffset: VkOffset3D;
    dstSubresource: VkImageSubresourceLayers;
    dstOffset: VkOffset3D;
    extent: VkExtent3D;
}

struct VkCopyImageInfo2KHR {
    sType := VkStructureType.VK_STRUCTURE_TYPE_COPY_IMAGE_INFO_2_KHR;
    pNext: void*;
    srcImage: VkImage*;
    srcImageLayout: VkImageLayout;
    dstImage: VkImage*;
    dstImageLayout: VkImageLayout;
    regionCount: u32;
    pRegions: VkImageCopy2KHR*;
}

struct VkBufferImageCopy2KHR {
    sType := VkStructureType.VK_STRUCTURE_TYPE_BUFFER_IMAGE_COPY_2_KHR;
    pNext: void*;
    bufferOffset: u64;
    bufferRowLength: u32;
    bufferImageHeight: u32;
    imageSubresource: VkImageSubresourceLayers;
    imageOffset: VkOffset3D;
    imageExtent: VkExtent3D;
}

struct VkCopyBufferToImageInfo2KHR {
    sType := VkStructureType.VK_STRUCTURE_TYPE_COPY_BUFFER_TO_IMAGE_INFO_2_KHR;
    pNext: void*;
    srcBuffer: VkBuffer*;
    dstImage: VkImage*;
    dstImageLayout: VkImageLayout;
    regionCount: u32;
    pRegions: VkBufferImageCopy2KHR*;
}

struct VkCopyImageToBufferInfo2KHR {
    sType := VkStructureType.VK_STRUCTURE_TYPE_COPY_IMAGE_TO_BUFFER_INFO_2_KHR;
    pNext: void*;
    srcImage: VkImage*;
    srcImageLayout: VkImageLayout;
    dstBuffer: VkBuffer*;
    regionCount: u32;
    pRegions: VkBufferImageCopy2KHR*;
}

struct VkImageBlit2KHR {
    sType := VkStructureType.VK_STRUCTURE_TYPE_IMAGE_BLIT_2_KHR;
    pNext: void*;
    srcSubresource: VkImageSubresourceLayers;
    srcOffsets: CArray<VkOffset3D>[2];
    dstSubresource: VkImageSubresourceLayers;
    dstOffsets: CArray<VkOffset3D>[2];
}

struct VkBlitImageInfo2KHR {
    sType := VkStructureType.VK_STRUCTURE_TYPE_BLIT_IMAGE_INFO_2_KHR;
    pNext: void*;
    srcImage: VkImage*;
    srcImageLayout: VkImageLayout;
    dstImage: VkImage*;
    dstImageLayout: VkImageLayout;
    regionCount: u32;
    pRegions: VkImageBlit2KHR*;
    filter: VkFilter;
}

struct VkImageResolve2KHR {
    sType := VkStructureType.VK_STRUCTURE_TYPE_IMAGE_RESOLVE_2_KHR;
    pNext: void*;
    srcSubresource: VkImageSubresourceLayers;
    srcOffset: VkOffset3D;
    dstSubresource: VkImageSubresourceLayers;
    dstOffset: VkOffset3D;
    extent: VkExtent3D;
}

struct VkResolveImageInfo2KHR {
    sType := VkStructureType.VK_STRUCTURE_TYPE_RESOLVE_IMAGE_INFO_2_KHR;
    pNext: void*;
    srcImage: VkImage*;
    srcImageLayout: VkImageLayout;
    dstImage: VkImage*;
    dstImageLayout: VkImageLayout;
    regionCount: u32;
    pRegions: VkImageResolve2KHR*;
}

interface PFN_vkCmdCopyBuffer2KHR(VkCommandBuffer* commandBuffer, VkCopyBufferInfo2KHR* pCopyBufferInfo)

interface PFN_vkCmdCopyImage2KHR(VkCommandBuffer* commandBuffer, VkCopyImageInfo2KHR* pCopyImageInfo)

interface PFN_vkCmdCopyBufferToImage2KHR(VkCommandBuffer* commandBuffer, VkCopyBufferToImageInfo2KHR* pCopyBufferToImageInfo)

interface PFN_vkCmdCopyImageToBuffer2KHR(VkCommandBuffer* commandBuffer, VkCopyImageToBufferInfo2KHR* pCopyImageToBufferInfo)

interface PFN_vkCmdBlitImage2KHR(VkCommandBuffer* commandBuffer, VkBlitImageInfo2KHR* pBlitImageInfo)

interface PFN_vkCmdResolveImage2KHR(VkCommandBuffer* commandBuffer, VkResolveImageInfo2KHR* pResolveImageInfo)

vkCmdCopyBuffer2KHR(VkCommandBuffer* commandBuffer, VkCopyBufferInfo2KHR* pCopyBufferInfo) #extern vulkan

vkCmdCopyImage2KHR(VkCommandBuffer* commandBuffer, VkCopyImageInfo2KHR* pCopyImageInfo) #extern vulkan

vkCmdCopyBufferToImage2KHR(VkCommandBuffer* commandBuffer, VkCopyBufferToImageInfo2KHR* pCopyBufferToImageInfo) #extern vulkan

vkCmdCopyImageToBuffer2KHR(VkCommandBuffer* commandBuffer, VkCopyImageToBufferInfo2KHR* pCopyImageToBufferInfo) #extern vulkan

vkCmdBlitImage2KHR(VkCommandBuffer* commandBuffer, VkBlitImageInfo2KHR* pBlitImageInfo) #extern vulkan

vkCmdResolveImage2KHR(VkCommandBuffer* commandBuffer, VkResolveImageInfo2KHR* pResolveImageInfo) #extern vulkan

struct VkDebugReportCallbackEXT {}
enum VkDebugReportObjectTypeEXT {
    VK_DEBUG_REPORT_OBJECT_TYPE_UNKNOWN_EXT = 0;
    VK_DEBUG_REPORT_OBJECT_TYPE_INSTANCE_EXT = 1;
    VK_DEBUG_REPORT_OBJECT_TYPE_PHYSICAL_DEVICE_EXT = 2;
    VK_DEBUG_REPORT_OBJECT_TYPE_DEVICE_EXT = 3;
    VK_DEBUG_REPORT_OBJECT_TYPE_QUEUE_EXT = 4;
    VK_DEBUG_REPORT_OBJECT_TYPE_SEMAPHORE_EXT = 5;
    VK_DEBUG_REPORT_OBJECT_TYPE_COMMAND_BUFFER_EXT = 6;
    VK_DEBUG_REPORT_OBJECT_TYPE_FENCE_EXT = 7;
    VK_DEBUG_REPORT_OBJECT_TYPE_DEVICE_MEMORY_EXT = 8;
    VK_DEBUG_REPORT_OBJECT_TYPE_BUFFER_EXT = 9;
    VK_DEBUG_REPORT_OBJECT_TYPE_IMAGE_EXT = 10;
    VK_DEBUG_REPORT_OBJECT_TYPE_EVENT_EXT = 11;
    VK_DEBUG_REPORT_OBJECT_TYPE_QUERY_POOL_EXT = 12;
    VK_DEBUG_REPORT_OBJECT_TYPE_BUFFER_VIEW_EXT = 13;
    VK_DEBUG_REPORT_OBJECT_TYPE_IMAGE_VIEW_EXT = 14;
    VK_DEBUG_REPORT_OBJECT_TYPE_SHADER_MODULE_EXT = 15;
    VK_DEBUG_REPORT_OBJECT_TYPE_PIPELINE_CACHE_EXT = 16;
    VK_DEBUG_REPORT_OBJECT_TYPE_PIPELINE_LAYOUT_EXT = 17;
    VK_DEBUG_REPORT_OBJECT_TYPE_RENDER_PASS_EXT = 18;
    VK_DEBUG_REPORT_OBJECT_TYPE_PIPELINE_EXT = 19;
    VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_SET_LAYOUT_EXT = 20;
    VK_DEBUG_REPORT_OBJECT_TYPE_SAMPLER_EXT = 21;
    VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_POOL_EXT = 22;
    VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_SET_EXT = 23;
    VK_DEBUG_REPORT_OBJECT_TYPE_FRAMEBUFFER_EXT = 24;
    VK_DEBUG_REPORT_OBJECT_TYPE_COMMAND_POOL_EXT = 25;
    VK_DEBUG_REPORT_OBJECT_TYPE_SURFACE_KHR_EXT = 26;
    VK_DEBUG_REPORT_OBJECT_TYPE_SWAPCHAIN_KHR_EXT = 27;
    VK_DEBUG_REPORT_OBJECT_TYPE_DEBUG_REPORT_CALLBACK_EXT_EXT = 28;
    VK_DEBUG_REPORT_OBJECT_TYPE_DISPLAY_KHR_EXT = 29;
    VK_DEBUG_REPORT_OBJECT_TYPE_DISPLAY_MODE_KHR_EXT = 30;
    VK_DEBUG_REPORT_OBJECT_TYPE_VALIDATION_CACHE_EXT_EXT = 33;
    VK_DEBUG_REPORT_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION_EXT = 1000156000;
    VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_EXT = 1000085000;
    VK_DEBUG_REPORT_OBJECT_TYPE_CU_MODULE_NVX_EXT = 1000029000;
    VK_DEBUG_REPORT_OBJECT_TYPE_CU_FUNCTION_NVX_EXT = 1000029001;
    VK_DEBUG_REPORT_OBJECT_TYPE_ACCELERATION_STRUCTURE_KHR_EXT = 1000150000;
    VK_DEBUG_REPORT_OBJECT_TYPE_ACCELERATION_STRUCTURE_NV_EXT = 1000165000;
    VK_DEBUG_REPORT_OBJECT_TYPE_BUFFER_COLLECTION_FUCHSIA_EXT = 1000366000;
    VK_DEBUG_REPORT_OBJECT_TYPE_DEBUG_REPORT_EXT = VK_DEBUG_REPORT_OBJECT_TYPE_DEBUG_REPORT_CALLBACK_EXT_EXT;
    VK_DEBUG_REPORT_OBJECT_TYPE_VALIDATION_CACHE_EXT = VK_DEBUG_REPORT_OBJECT_TYPE_VALIDATION_CACHE_EXT_EXT;
    VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_KHR_EXT = VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_EXT;
    VK_DEBUG_REPORT_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION_KHR_EXT = VK_DEBUG_REPORT_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION_EXT;
    VK_DEBUG_REPORT_OBJECT_TYPE_MAX_ENUM_EXT = 0x7FFFFFFF;
}

enum VkDebugReportFlagBitsEXT {
    VK_DEBUG_REPORT_INFORMATION_BIT_EXT = 0x00000001;
    VK_DEBUG_REPORT_WARNING_BIT_EXT = 0x00000002;
    VK_DEBUG_REPORT_PERFORMANCE_WARNING_BIT_EXT = 0x00000004;
    VK_DEBUG_REPORT_ERROR_BIT_EXT = 0x00000008;
    VK_DEBUG_REPORT_DEBUG_BIT_EXT = 0x00000010;
    VK_DEBUG_REPORT_FLAG_BITS_MAX_ENUM_EXT = 0x7FFFFFFF;
}

interface u32 PFN_vkDebugReportCallbackEXT(u32 flags, VkDebugReportObjectTypeEXT objectType, u64 object, u64 location, s32 messageCode, u8* pLayerPrefix, u8* pMessage, void* pUserData)

struct VkDebugReportCallbackCreateInfoEXT {
    sType := VkStructureType.VK_STRUCTURE_TYPE_DEBUG_REPORT_CALLBACK_CREATE_INFO_EXT;
    pNext: void*;
    flags: u32;
    pfnCallback: PFN_vkDebugReportCallbackEXT;
    pUserData: void*;
}

interface VkResult PFN_vkCreateDebugReportCallbackEXT(VkInstance* instance, VkDebugReportCallbackCreateInfoEXT* pCreateInfo, VkAllocationCallbacks* pAllocator, VkDebugReportCallbackEXT** pCallback)

interface PFN_vkDestroyDebugReportCallbackEXT(VkInstance* instance, VkDebugReportCallbackEXT* callback, VkAllocationCallbacks* pAllocator)

interface PFN_vkDebugReportMessageEXT(VkInstance* instance, u32 flags, VkDebugReportObjectTypeEXT objectType, u64 object, u64 location, s32 messageCode, u8* pLayerPrefix, u8* pMessage)

VkResult vkCreateDebugReportCallbackEXT(VkInstance* instance, VkDebugReportCallbackCreateInfoEXT* pCreateInfo, VkAllocationCallbacks* pAllocator, VkDebugReportCallbackEXT** pCallback) #extern vulkan

vkDestroyDebugReportCallbackEXT(VkInstance* instance, VkDebugReportCallbackEXT* callback, VkAllocationCallbacks* pAllocator) #extern vulkan

vkDebugReportMessageEXT(VkInstance* instance, u32 flags, VkDebugReportObjectTypeEXT objectType, u64 object, u64 location, s32 messageCode, u8* pLayerPrefix, u8* pMessage) #extern vulkan

enum VkRasterizationOrderAMD {
    VK_RASTERIZATION_ORDER_STRICT_AMD = 0;
    VK_RASTERIZATION_ORDER_RELAXED_AMD = 1;
    VK_RASTERIZATION_ORDER_MAX_ENUM_AMD = 0x7FFFFFFF;
}

struct VkPipelineRasterizationStateRasterizationOrderAMD {
    sType := VkStructureType.VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_RASTERIZATION_ORDER_AMD;
    pNext: void*;
    rasterizationOrder: VkRasterizationOrderAMD;
}

struct VkDebugMarkerObjectNameInfoEXT {
    sType := VkStructureType.VK_STRUCTURE_TYPE_DEBUG_MARKER_OBJECT_NAME_INFO_EXT;
    pNext: void*;
    objectType: VkDebugReportObjectTypeEXT;
    object: u64;
    pObjectName: u8*;
}

struct VkDebugMarkerObjectTagInfoEXT {
    sType := VkStructureType.VK_STRUCTURE_TYPE_DEBUG_MARKER_OBJECT_TAG_INFO_EXT;
    pNext: void*;
    objectType: VkDebugReportObjectTypeEXT;
    object: u64;
    tagName: u64;
    tagSize: u64;
    pTag: void*;
}

struct VkDebugMarkerMarkerInfoEXT {
    sType := VkStructureType.VK_STRUCTURE_TYPE_DEBUG_MARKER_MARKER_INFO_EXT;
    pNext: void*;
    pMarkerName: u8*;
    color: CArray<float>[4];
}

interface VkResult PFN_vkDebugMarkerSetObjectTagEXT(VkDevice* device, VkDebugMarkerObjectTagInfoEXT* pTagInfo)

interface VkResult PFN_vkDebugMarkerSetObjectNameEXT(VkDevice* device, VkDebugMarkerObjectNameInfoEXT* pNameInfo)

interface PFN_vkCmdDebugMarkerBeginEXT(VkCommandBuffer* commandBuffer, VkDebugMarkerMarkerInfoEXT* pMarkerInfo)

interface PFN_vkCmdDebugMarkerEndEXT(VkCommandBuffer* commandBuffer)

interface PFN_vkCmdDebugMarkerInsertEXT(VkCommandBuffer* commandBuffer, VkDebugMarkerMarkerInfoEXT* pMarkerInfo)

VkResult vkDebugMarkerSetObjectTagEXT(VkDevice* device, VkDebugMarkerObjectTagInfoEXT* pTagInfo) #extern vulkan

VkResult vkDebugMarkerSetObjectNameEXT(VkDevice* device, VkDebugMarkerObjectNameInfoEXT* pNameInfo) #extern vulkan

vkCmdDebugMarkerBeginEXT(VkCommandBuffer* commandBuffer, VkDebugMarkerMarkerInfoEXT* pMarkerInfo) #extern vulkan

vkCmdDebugMarkerEndEXT(VkCommandBuffer* commandBuffer) #extern vulkan

vkCmdDebugMarkerInsertEXT(VkCommandBuffer* commandBuffer, VkDebugMarkerMarkerInfoEXT* pMarkerInfo) #extern vulkan

struct VkDedicatedAllocationImageCreateInfoNV {
    sType := VkStructureType.VK_STRUCTURE_TYPE_DEDICATED_ALLOCATION_IMAGE_CREATE_INFO_NV;
    pNext: void*;
    dedicatedAllocation: u32;
}

struct VkDedicatedAllocationBufferCreateInfoNV {
    sType := VkStructureType.VK_STRUCTURE_TYPE_DEDICATED_ALLOCATION_BUFFER_CREATE_INFO_NV;
    pNext: void*;
    dedicatedAllocation: u32;
}

struct VkDedicatedAllocationMemoryAllocateInfoNV {
    sType := VkStructureType.VK_STRUCTURE_TYPE_DEDICATED_ALLOCATION_MEMORY_ALLOCATE_INFO_NV;
    pNext: void*;
    image: VkImage*;
    buffer: VkBuffer*;
}

struct VkPhysicalDeviceTransformFeedbackFeaturesEXT {
    sType := VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TRANSFORM_FEEDBACK_FEATURES_EXT;
    pNext: void*;
    transformFeedback: u32;
    geometryStreams: u32;
}

struct VkPhysicalDeviceTransformFeedbackPropertiesEXT {
    sType := VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TRANSFORM_FEEDBACK_PROPERTIES_EXT;
    pNext: void*;
    maxTransformFeedbackStreams: u32;
    maxTransformFeedbackBuffers: u32;
    maxTransformFeedbackBufferSize: u64;
    maxTransformFeedbackStreamDataSize: u32;
    maxTransformFeedbackBufferDataSize: u32;
    maxTransformFeedbackBufferDataStride: u32;
    transformFeedbackQueries: u32;
    transformFeedbackStreamsLinesTriangles: u32;
    transformFeedbackRasterizationStreamSelect: u32;
    transformFeedbackDraw: u32;
}

struct VkPipelineRasterizationStateStreamCreateInfoEXT {
    sType := VkStructureType.VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_STREAM_CREATE_INFO_EXT;
    pNext: void*;
    flags: u32;
    rasterizationStream: u32;
}

interface PFN_vkCmdBindTransformFeedbackBuffersEXT(VkCommandBuffer* commandBuffer, u32 firstBinding, u32 bindingCount, VkBuffer** pBuffers, u64* pOffsets, u64* pSizes)

interface PFN_vkCmdBeginTransformFeedbackEXT(VkCommandBuffer* commandBuffer, u32 firstCounterBuffer, u32 counterBufferCount, VkBuffer** pCounterBuffers, u64* pCounterBufferOffsets)

interface PFN_vkCmdEndTransformFeedbackEXT(VkCommandBuffer* commandBuffer, u32 firstCounterBuffer, u32 counterBufferCount, VkBuffer** pCounterBuffers, u64* pCounterBufferOffsets)

interface PFN_vkCmdBeginQueryIndexedEXT(VkCommandBuffer* commandBuffer, VkQueryPool* queryPool, u32 query, u32 flags, u32 index)

interface PFN_vkCmdEndQueryIndexedEXT(VkCommandBuffer* commandBuffer, VkQueryPool* queryPool, u32 query, u32 index)

interface PFN_vkCmdDrawIndirectByteCountEXT(VkCommandBuffer* commandBuffer, u32 instanceCount, u32 firstInstance, VkBuffer* counterBuffer, u64 counterBufferOffset, u32 counterOffset, u32 vertexStride)

vkCmdBindTransformFeedbackBuffersEXT(VkCommandBuffer* commandBuffer, u32 firstBinding, u32 bindingCount, VkBuffer** pBuffers, u64* pOffsets, u64* pSizes) #extern vulkan

vkCmdBeginTransformFeedbackEXT(VkCommandBuffer* commandBuffer, u32 firstCounterBuffer, u32 counterBufferCount, VkBuffer** pCounterBuffers, u64* pCounterBufferOffsets) #extern vulkan

vkCmdEndTransformFeedbackEXT(VkCommandBuffer* commandBuffer, u32 firstCounterBuffer, u32 counterBufferCount, VkBuffer** pCounterBuffers, u64* pCounterBufferOffsets) #extern vulkan

vkCmdBeginQueryIndexedEXT(VkCommandBuffer* commandBuffer, VkQueryPool* queryPool, u32 query, u32 flags, u32 index) #extern vulkan

vkCmdEndQueryIndexedEXT(VkCommandBuffer* commandBuffer, VkQueryPool* queryPool, u32 query, u32 index) #extern vulkan

vkCmdDrawIndirectByteCountEXT(VkCommandBuffer* commandBuffer, u32 instanceCount, u32 firstInstance, VkBuffer* counterBuffer, u64 counterBufferOffset, u32 counterOffset, u32 vertexStride) #extern vulkan

struct VkCuModuleNVX {}
struct VkCuFunctionNVX {}

struct VkCuModuleCreateInfoNVX {
    sType := VkStructureType.VK_STRUCTURE_TYPE_CU_MODULE_CREATE_INFO_NVX;
    pNext: void*;
    dataSize: u64;
    pData: void*;
}

struct VkCuFunctionCreateInfoNVX {
    sType := VkStructureType.VK_STRUCTURE_TYPE_CU_FUNCTION_CREATE_INFO_NVX;
    pNext: void*;
    module: VkCuModuleNVX*;
    pName: u8*;
}

struct VkCuLaunchInfoNVX {
    sType := VkStructureType.VK_STRUCTURE_TYPE_CU_LAUNCH_INFO_NVX;
    pNext: void*;
    function: VkCuFunctionNVX*;
    gridDimX: u32;
    gridDimY: u32;
    gridDimZ: u32;
    blockDimX: u32;
    blockDimY: u32;
    blockDimZ: u32;
    sharedMemBytes: u32;
    paramCount: u64;
    pParams: void*;
    extraCount: u64;
    pExtras: void*;
}

interface VkResult PFN_vkCreateCuModuleNVX(VkDevice* device, VkCuModuleCreateInfoNVX* pCreateInfo, VkAllocationCallbacks* pAllocator, VkCuModuleNVX** pModule)

interface VkResult PFN_vkCreateCuFunctionNVX(VkDevice* device, VkCuFunctionCreateInfoNVX* pCreateInfo, VkAllocationCallbacks* pAllocator, VkCuFunctionNVX** pFunction)

interface PFN_vkDestroyCuModuleNVX(VkDevice* device, VkCuModuleNVX* module, VkAllocationCallbacks* pAllocator)

interface PFN_vkDestroyCuFunctionNVX(VkDevice* device, VkCuFunctionNVX* function, VkAllocationCallbacks* pAllocator)

interface PFN_vkCmdCuLaunchKernelNVX(VkCommandBuffer* commandBuffer, VkCuLaunchInfoNVX* pLaunchInfo)

VkResult vkCreateCuModuleNVX(VkDevice* device, VkCuModuleCreateInfoNVX* pCreateInfo, VkAllocationCallbacks* pAllocator, VkCuModuleNVX** pModule) #extern vulkan

VkResult vkCreateCuFunctionNVX(VkDevice* device, VkCuFunctionCreateInfoNVX* pCreateInfo, VkAllocationCallbacks* pAllocator, VkCuFunctionNVX** pFunction) #extern vulkan

vkDestroyCuModuleNVX(VkDevice* device, VkCuModuleNVX* module, VkAllocationCallbacks* pAllocator) #extern vulkan

vkDestroyCuFunctionNVX(VkDevice* device, VkCuFunctionNVX* function, VkAllocationCallbacks* pAllocator) #extern vulkan

vkCmdCuLaunchKernelNVX(VkCommandBuffer* commandBuffer, VkCuLaunchInfoNVX* pLaunchInfo) #extern vulkan

struct VkImageViewHandleInfoNVX {
    sType := VkStructureType.VK_STRUCTURE_TYPE_IMAGE_VIEW_HANDLE_INFO_NVX;
    pNext: void*;
    imageView: VkImageView*;
    descriptorType: VkDescriptorType;
    sampler: VkSampler*;
}

struct VkImageViewAddressPropertiesNVX {
    sType := VkStructureType.VK_STRUCTURE_TYPE_IMAGE_VIEW_ADDRESS_PROPERTIES_NVX;
    pNext: void*;
    deviceAddress: u64;
    size: u64;
}

interface u32 PFN_vkGetImageViewHandleNVX(VkDevice* device, VkImageViewHandleInfoNVX* pInfo)

interface VkResult PFN_vkGetImageViewAddressNVX(VkDevice* device, VkImageView* imageView, VkImageViewAddressPropertiesNVX* pProperties)

u32 vkGetImageViewHandleNVX(VkDevice* device, VkImageViewHandleInfoNVX* pInfo) #extern vulkan

VkResult vkGetImageViewAddressNVX(VkDevice* device, VkImageView* imageView, VkImageViewAddressPropertiesNVX* pProperties) #extern vulkan

interface PFN_vkCmdDrawIndirectCountAMD(VkCommandBuffer* commandBuffer, VkBuffer* buffer, u64 offset, VkBuffer* countBuffer, u64 countBufferOffset, u32 maxDrawCount, u32 stride)

interface PFN_vkCmdDrawIndexedIndirectCountAMD(VkCommandBuffer* commandBuffer, VkBuffer* buffer, u64 offset, VkBuffer* countBuffer, u64 countBufferOffset, u32 maxDrawCount, u32 stride)

vkCmdDrawIndirectCountAMD(VkCommandBuffer* commandBuffer, VkBuffer* buffer, u64 offset, VkBuffer* countBuffer, u64 countBufferOffset, u32 maxDrawCount, u32 stride) #extern vulkan

vkCmdDrawIndexedIndirectCountAMD(VkCommandBuffer* commandBuffer, VkBuffer* buffer, u64 offset, VkBuffer* countBuffer, u64 countBufferOffset, u32 maxDrawCount, u32 stride) #extern vulkan

struct VkTextureLODGatherFormatPropertiesAMD {
    sType := VkStructureType.VK_STRUCTURE_TYPE_TEXTURE_LOD_GATHER_FORMAT_PROPERTIES_AMD;
    pNext: void*;
    supportsTextureGatherLODBiasAMD: u32;
}

enum VkShaderInfoTypeAMD {
    VK_SHADER_INFO_TYPE_STATISTICS_AMD = 0;
    VK_SHADER_INFO_TYPE_BINARY_AMD = 1;
    VK_SHADER_INFO_TYPE_DISASSEMBLY_AMD = 2;
    VK_SHADER_INFO_TYPE_MAX_ENUM_AMD = 0x7FFFFFFF;
}

struct VkShaderResourceUsageAMD {
    numUsedVgprs: u32;
    numUsedSgprs: u32;
    ldsSizePerLocalWorkGroup: u32;
    ldsUsageSizeInBytes: u64;
    scratchMemUsageInBytes: u64;
}

struct VkShaderStatisticsInfoAMD {
    shaderStageMask: u32;
    resourceUsage: VkShaderResourceUsageAMD;
    numPhysicalVgprs: u32;
    numPhysicalSgprs: u32;
    numAvailableVgprs: u32;
    numAvailableSgprs: u32;
    computeWorkGroupSize: CArray<u32>[3];
}

interface VkResult PFN_vkGetShaderInfoAMD(VkDevice* device, VkPipeline* pipeline, VkShaderStageFlagBits shaderStage, VkShaderInfoTypeAMD infoType, u64* pInfoSize, void* pInfo)

VkResult vkGetShaderInfoAMD(VkDevice* device, VkPipeline* pipeline, VkShaderStageFlagBits shaderStage, VkShaderInfoTypeAMD infoType, u64* pInfoSize, void* pInfo) #extern vulkan

struct VkPhysicalDeviceCornerSampledImageFeaturesNV {
    sType := VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CORNER_SAMPLED_IMAGE_FEATURES_NV;
    pNext: void*;
    cornerSampledImage: u32;
}

enum VkExternalMemoryHandleTypeFlagBitsNV {
    VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_BIT_NV = 0x00000001;
    VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT_NV = 0x00000002;
    VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_IMAGE_BIT_NV = 0x00000004;
    VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_IMAGE_KMT_BIT_NV = 0x00000008;
    VK_EXTERNAL_MEMORY_HANDLE_TYPE_FLAG_BITS_MAX_ENUM_NV = 0x7FFFFFFF;
}

enum VkExternalMemoryFeatureFlagBitsNV {
    VK_EXTERNAL_MEMORY_FEATURE_DEDICATED_ONLY_BIT_NV = 0x00000001;
    VK_EXTERNAL_MEMORY_FEATURE_EXPORTABLE_BIT_NV = 0x00000002;
    VK_EXTERNAL_MEMORY_FEATURE_IMPORTABLE_BIT_NV = 0x00000004;
    VK_EXTERNAL_MEMORY_FEATURE_FLAG_BITS_MAX_ENUM_NV = 0x7FFFFFFF;
}

struct VkExternalImageFormatPropertiesNV {
    imageFormatProperties: VkImageFormatProperties;
    externalMemoryFeatures: u32;
    exportFromImportedHandleTypes: u32;
    compatibleHandleTypes: u32;
}

interface VkResult PFN_vkGetPhysicalDeviceExternalImageFormatPropertiesNV(VkPhysicalDevice* physicalDevice, VkFormat format, VkImageType type, VkImageTiling tiling, u32 usage, u32 flags, u32 externalHandleType, VkExternalImageFormatPropertiesNV* pExternalImageFormatProperties)

VkResult vkGetPhysicalDeviceExternalImageFormatPropertiesNV(VkPhysicalDevice* physicalDevice, VkFormat format, VkImageType type, VkImageTiling tiling, u32 usage, u32 flags, u32 externalHandleType, VkExternalImageFormatPropertiesNV* pExternalImageFormatProperties) #extern vulkan

struct VkExternalMemoryImageCreateInfoNV {
    sType := VkStructureType.VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO_NV;
    pNext: void*;
    handleTypes: u32;
}

struct VkExportMemoryAllocateInfoNV {
    sType := VkStructureType.VK_STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO_NV;
    pNext: void*;
    handleTypes: u32;
}

enum VkValidationCheckEXT {
    VK_VALIDATION_CHECK_ALL_EXT = 0;
    VK_VALIDATION_CHECK_SHADERS_EXT = 1;
    VK_VALIDATION_CHECK_MAX_ENUM_EXT = 0x7FFFFFFF;
}

struct VkValidationFlagsEXT {
    sType := VkStructureType.VK_STRUCTURE_TYPE_VALIDATION_FLAGS_EXT;
    pNext: void*;
    disabledValidationCheckCount: u32;
    pDisabledValidationChecks: VkValidationCheckEXT*;
}

struct VkPhysicalDeviceTextureCompressionASTCHDRFeaturesEXT {
    sType := VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXTURE_COMPRESSION_ASTC_HDR_FEATURES_EXT;
    pNext: void*;
    textureCompressionASTC_HDR: u32;
}

struct VkImageViewASTCDecodeModeEXT {
    sType := VkStructureType.VK_STRUCTURE_TYPE_IMAGE_VIEW_ASTC_DECODE_MODE_EXT;
    pNext: void*;
    decodeMode: VkFormat;
}

struct VkPhysicalDeviceASTCDecodeFeaturesEXT {
    sType := VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ASTC_DECODE_FEATURES_EXT;
    pNext: void*;
    decodeModeSharedExponent: u32;
}

enum VkConditionalRenderingFlagBitsEXT {
    VK_CONDITIONAL_RENDERING_INVERTED_BIT_EXT = 0x00000001;
    VK_CONDITIONAL_RENDERING_FLAG_BITS_MAX_ENUM_EXT = 0x7FFFFFFF;
}

struct VkConditionalRenderingBeginInfoEXT {
    sType := VkStructureType.VK_STRUCTURE_TYPE_CONDITIONAL_RENDERING_BEGIN_INFO_EXT;
    pNext: void*;
    buffer: VkBuffer*;
    offset: u64;
    flags: u32;
}

struct VkPhysicalDeviceConditionalRenderingFeaturesEXT {
    sType := VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CONDITIONAL_RENDERING_FEATURES_EXT;
    pNext: void*;
    conditionalRendering: u32;
    inheritedConditionalRendering: u32;
}

struct VkCommandBufferInheritanceConditionalRenderingInfoEXT {
    sType := VkStructureType.VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_CONDITIONAL_RENDERING_INFO_EXT;
    pNext: void*;
    conditionalRenderingEnable: u32;
}

interface PFN_vkCmdBeginConditionalRenderingEXT(VkCommandBuffer* commandBuffer, VkConditionalRenderingBeginInfoEXT* pConditionalRenderingBegin)

interface PFN_vkCmdEndConditionalRenderingEXT(VkCommandBuffer* commandBuffer)

vkCmdBeginConditionalRenderingEXT(VkCommandBuffer* commandBuffer, VkConditionalRenderingBeginInfoEXT* pConditionalRenderingBegin) #extern vulkan

vkCmdEndConditionalRenderingEXT(VkCommandBuffer* commandBuffer) #extern vulkan

struct VkViewportWScalingNV {
    xcoeff: float;
    ycoeff: float;
}

struct VkPipelineViewportWScalingStateCreateInfoNV {
    sType := VkStructureType.VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_W_SCALING_STATE_CREATE_INFO_NV;
    pNext: void*;
    viewportWScalingEnable: u32;
    viewportCount: u32;
    pViewportWScalings: VkViewportWScalingNV*;
}

interface PFN_vkCmdSetViewportWScalingNV(VkCommandBuffer* commandBuffer, u32 firstViewport, u32 viewportCount, VkViewportWScalingNV* pViewportWScalings)

vkCmdSetViewportWScalingNV(VkCommandBuffer* commandBuffer, u32 firstViewport, u32 viewportCount, VkViewportWScalingNV* pViewportWScalings) #extern vulkan

interface VkResult PFN_vkReleaseDisplayEXT(VkPhysicalDevice* physicalDevice, VkDisplayKHR* display)

VkResult vkReleaseDisplayEXT(VkPhysicalDevice* physicalDevice, VkDisplayKHR* display) #extern vulkan

enum VkSurfaceCounterFlagBitsEXT {
    VK_SURFACE_COUNTER_VBLANK_BIT_EXT = 0x00000001;
    VK_SURFACE_COUNTER_VBLANK_EXT = VK_SURFACE_COUNTER_VBLANK_BIT_EXT;
    VK_SURFACE_COUNTER_FLAG_BITS_MAX_ENUM_EXT = 0x7FFFFFFF;
}

struct VkSurfaceCapabilities2EXT {
    sType := VkStructureType.VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_2_EXT;
    pNext: void*;
    minImageCount: u32;
    maxImageCount: u32;
    currentExtent: VkExtent2D;
    minImageExtent: VkExtent2D;
    maxImageExtent: VkExtent2D;
    maxImageArrayLayers: u32;
    supportedTransforms: u32;
    currentTransform: VkSurfaceTransformFlagBitsKHR;
    supportedCompositeAlpha: u32;
    supportedUsageFlags: u32;
    supportedSurfaceCounters: u32;
}

interface VkResult PFN_vkGetPhysicalDeviceSurfaceCapabilities2EXT(VkPhysicalDevice* physicalDevice, VkSurfaceKHR* surface, VkSurfaceCapabilities2EXT* pSurfaceCapabilities)

VkResult vkGetPhysicalDeviceSurfaceCapabilities2EXT(VkPhysicalDevice* physicalDevice, VkSurfaceKHR* surface, VkSurfaceCapabilities2EXT* pSurfaceCapabilities) #extern vulkan

enum VkDisplayPowerStateEXT {
    VK_DISPLAY_POWER_STATE_OFF_EXT = 0;
    VK_DISPLAY_POWER_STATE_SUSPEND_EXT = 1;
    VK_DISPLAY_POWER_STATE_ON_EXT = 2;
    VK_DISPLAY_POWER_STATE_MAX_ENUM_EXT = 0x7FFFFFFF;
}

enum VkDeviceEventTypeEXT {
    VK_DEVICE_EVENT_TYPE_DISPLAY_HOTPLUG_EXT = 0;
    VK_DEVICE_EVENT_TYPE_MAX_ENUM_EXT = 0x7FFFFFFF;
}

enum VkDisplayEventTypeEXT {
    VK_DISPLAY_EVENT_TYPE_FIRST_PIXEL_OUT_EXT = 0;
    VK_DISPLAY_EVENT_TYPE_MAX_ENUM_EXT = 0x7FFFFFFF;
}

struct VkDisplayPowerInfoEXT {
    sType := VkStructureType.VK_STRUCTURE_TYPE_DISPLAY_POWER_INFO_EXT;
    pNext: void*;
    powerState: VkDisplayPowerStateEXT;
}

struct VkDeviceEventInfoEXT {
    sType := VkStructureType.VK_STRUCTURE_TYPE_DEVICE_EVENT_INFO_EXT;
    pNext: void*;
    deviceEvent: VkDeviceEventTypeEXT;
}

struct VkDisplayEventInfoEXT {
    sType := VkStructureType.VK_STRUCTURE_TYPE_DISPLAY_EVENT_INFO_EXT;
    pNext: void*;
    displayEvent: VkDisplayEventTypeEXT;
}

struct VkSwapchainCounterCreateInfoEXT {
    sType := VkStructureType.VK_STRUCTURE_TYPE_SWAPCHAIN_COUNTER_CREATE_INFO_EXT;
    pNext: void*;
    surfaceCounters: u32;
}

interface VkResult PFN_vkDisplayPowerControlEXT(VkDevice* device, VkDisplayKHR* display, VkDisplayPowerInfoEXT* pDisplayPowerInfo)

interface VkResult PFN_vkRegisterDeviceEventEXT(VkDevice* device, VkDeviceEventInfoEXT* pDeviceEventInfo, VkAllocationCallbacks* pAllocator, VkFence** pFence)

interface VkResult PFN_vkRegisterDisplayEventEXT(VkDevice* device, VkDisplayKHR* display, VkDisplayEventInfoEXT* pDisplayEventInfo, VkAllocationCallbacks* pAllocator, VkFence** pFence)

interface VkResult PFN_vkGetSwapchainCounterEXT(VkDevice* device, VkSwapchainKHR* swapchain, VkSurfaceCounterFlagBitsEXT counter, u64* pCounterValue)

VkResult vkDisplayPowerControlEXT(VkDevice* device, VkDisplayKHR* display, VkDisplayPowerInfoEXT* pDisplayPowerInfo) #extern vulkan

VkResult vkRegisterDeviceEventEXT(VkDevice* device, VkDeviceEventInfoEXT* pDeviceEventInfo, VkAllocationCallbacks* pAllocator, VkFence** pFence) #extern vulkan

VkResult vkRegisterDisplayEventEXT(VkDevice* device, VkDisplayKHR* display, VkDisplayEventInfoEXT* pDisplayEventInfo, VkAllocationCallbacks* pAllocator, VkFence** pFence) #extern vulkan

VkResult vkGetSwapchainCounterEXT(VkDevice* device, VkSwapchainKHR* swapchain, VkSurfaceCounterFlagBitsEXT counter, u64* pCounterValue) #extern vulkan

struct VkRefreshCycleDurationGOOGLE {
    refreshDuration: u64;
}

struct VkPastPresentationTimingGOOGLE {
    presentID: u32;
    desiredPresentTime: u64;
    actualPresentTime: u64;
    earliestPresentTime: u64;
    presentMargin: u64;
}

struct VkPresentTimeGOOGLE {
    presentID: u32;
    desiredPresentTime: u64;
}

struct VkPresentTimesInfoGOOGLE {
    sType := VkStructureType.VK_STRUCTURE_TYPE_PRESENT_TIMES_INFO_GOOGLE;
    pNext: void*;
    swapchainCount: u32;
    pTimes: VkPresentTimeGOOGLE*;
}

interface VkResult PFN_vkGetRefreshCycleDurationGOOGLE(VkDevice* device, VkSwapchainKHR* swapchain, VkRefreshCycleDurationGOOGLE* pDisplayTimingProperties)

interface VkResult PFN_vkGetPastPresentationTimingGOOGLE(VkDevice* device, VkSwapchainKHR* swapchain, u32* pPresentationTimingCount, VkPastPresentationTimingGOOGLE* pPresentationTimings)

VkResult vkGetRefreshCycleDurationGOOGLE(VkDevice* device, VkSwapchainKHR* swapchain, VkRefreshCycleDurationGOOGLE* pDisplayTimingProperties) #extern vulkan

VkResult vkGetPastPresentationTimingGOOGLE(VkDevice* device, VkSwapchainKHR* swapchain, u32* pPresentationTimingCount, VkPastPresentationTimingGOOGLE* pPresentationTimings) #extern vulkan

struct VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX {
    sType := VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PER_VIEW_ATTRIBUTES_PROPERTIES_NVX;
    pNext: void*;
    perViewPositionAllComponents: u32;
}

enum VkViewportCoordinateSwizzleNV {
    VK_VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_X_NV = 0;
    VK_VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_X_NV = 1;
    VK_VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_Y_NV = 2;
    VK_VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_Y_NV = 3;
    VK_VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_Z_NV = 4;
    VK_VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_Z_NV = 5;
    VK_VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_W_NV = 6;
    VK_VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_W_NV = 7;
    VK_VIEWPORT_COORDINATE_SWIZZLE_MAX_ENUM_NV = 0x7FFFFFFF;
}

struct VkViewportSwizzleNV {
    x: VkViewportCoordinateSwizzleNV;
    y: VkViewportCoordinateSwizzleNV;
    z: VkViewportCoordinateSwizzleNV;
    w: VkViewportCoordinateSwizzleNV;
}

struct VkPipelineViewportSwizzleStateCreateInfoNV {
    sType := VkStructureType.VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_SWIZZLE_STATE_CREATE_INFO_NV;
    pNext: void*;
    flags: u32;
    viewportCount: u32;
    pViewportSwizzles: VkViewportSwizzleNV*;
}

enum VkDiscardRectangleModeEXT {
    VK_DISCARD_RECTANGLE_MODE_INCLUSIVE_EXT = 0;
    VK_DISCARD_RECTANGLE_MODE_EXCLUSIVE_EXT = 1;
    VK_DISCARD_RECTANGLE_MODE_MAX_ENUM_EXT = 0x7FFFFFFF;
}

struct VkPhysicalDeviceDiscardRectanglePropertiesEXT {
    sType := VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DISCARD_RECTANGLE_PROPERTIES_EXT;
    pNext: void*;
    maxDiscardRectangles: u32;
}

struct VkPipelineDiscardRectangleStateCreateInfoEXT {
    sType := VkStructureType.VK_STRUCTURE_TYPE_PIPELINE_DISCARD_RECTANGLE_STATE_CREATE_INFO_EXT;
    pNext: void*;
    flags: u32;
    discardRectangleMode: VkDiscardRectangleModeEXT;
    discardRectangleCount: u32;
    pDiscardRectangles: VkRect2D*;
}

interface PFN_vkCmdSetDiscardRectangleEXT(VkCommandBuffer* commandBuffer, u32 firstDiscardRectangle, u32 discardRectangleCount, VkRect2D* pDiscardRectangles)

vkCmdSetDiscardRectangleEXT(VkCommandBuffer* commandBuffer, u32 firstDiscardRectangle, u32 discardRectangleCount, VkRect2D* pDiscardRectangles) #extern vulkan

enum VkConservativeRasterizationModeEXT {
    VK_CONSERVATIVE_RASTERIZATION_MODE_DISABLED_EXT = 0;
    VK_CONSERVATIVE_RASTERIZATION_MODE_OVERESTIMATE_EXT = 1;
    VK_CONSERVATIVE_RASTERIZATION_MODE_UNDERESTIMATE_EXT = 2;
    VK_CONSERVATIVE_RASTERIZATION_MODE_MAX_ENUM_EXT = 0x7FFFFFFF;
}

struct VkPhysicalDeviceConservativeRasterizationPropertiesEXT {
    sType := VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CONSERVATIVE_RASTERIZATION_PROPERTIES_EXT;
    pNext: void*;
    primitiveOverestimationSize: float;
    maxExtraPrimitiveOverestimationSize: float;
    extraPrimitiveOverestimationSizeGranularity: float;
    primitiveUnderestimation: u32;
    conservativePointAndLineRasterization: u32;
    degenerateTrianglesRasterized: u32;
    degenerateLinesRasterized: u32;
    fullyCoveredFragmentShaderInputVariable: u32;
    conservativeRasterizationPostDepthCoverage: u32;
}

struct VkPipelineRasterizationConservativeStateCreateInfoEXT {
    sType := VkStructureType.VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_CONSERVATIVE_STATE_CREATE_INFO_EXT;
    pNext: void*;
    flags: u32;
    conservativeRasterizationMode: VkConservativeRasterizationModeEXT;
    extraPrimitiveOverestimationSize: float;
}

struct VkPhysicalDeviceDepthClipEnableFeaturesEXT {
    sType := VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_CLIP_ENABLE_FEATURES_EXT;
    pNext: void*;
    depthClipEnable: u32;
}

struct VkPipelineRasterizationDepthClipStateCreateInfoEXT {
    sType := VkStructureType.VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_DEPTH_CLIP_STATE_CREATE_INFO_EXT;
    pNext: void*;
    flags: u32;
    depthClipEnable: u32;
}

struct VkXYColorEXT {
    x: float;
    y: float;
}

struct VkHdrMetadataEXT {
    sType := VkStructureType.VK_STRUCTURE_TYPE_HDR_METADATA_EXT;
    pNext: void*;
    displayPrimaryRed: VkXYColorEXT;
    displayPrimaryGreen: VkXYColorEXT;
    displayPrimaryBlue: VkXYColorEXT;
    whitePoint: VkXYColorEXT;
    maxLuminance: float;
    minLuminance: float;
    maxContentLightLevel: float;
    maxFrameAverageLightLevel: float;
}

interface PFN_vkSetHdrMetadataEXT(VkDevice* device, u32 swapchainCount, VkSwapchainKHR** pSwapchains, VkHdrMetadataEXT* pMetadata)

vkSetHdrMetadataEXT(VkDevice* device, u32 swapchainCount, VkSwapchainKHR** pSwapchains, VkHdrMetadataEXT* pMetadata) #extern vulkan

struct VkDebugUtilsMessengerEXT {}

VK_EXT_DEBUG_UTILS_EXTENSION_NAME := "VK_EXT_debug_utils"; #const

enum VkDebugUtilsMessageSeverityFlagBitsEXT {
    VK_DEBUG_UTILS_MESSAGE_SEVERITY_VERBOSE_BIT_EXT = 0x00000001;
    VK_DEBUG_UTILS_MESSAGE_SEVERITY_INFO_BIT_EXT = 0x00000010;
    VK_DEBUG_UTILS_MESSAGE_SEVERITY_WARNING_BIT_EXT = 0x00000100;
    VK_DEBUG_UTILS_MESSAGE_SEVERITY_ERROR_BIT_EXT = 0x00001000;
    VK_DEBUG_UTILS_MESSAGE_SEVERITY_NOT_INFO_BIT_EXT = 0x00001101;
    VK_DEBUG_UTILS_MESSAGE_SEVERITY_FLAG_BITS_MAX_ENUM_EXT = 0x7FFFFFFF;
}

enum VkDebugUtilsMessageTypeFlagBitsEXT {
    VK_DEBUG_UTILS_MESSAGE_TYPE_GENERAL_BIT_EXT = 0x00000001;
    VK_DEBUG_UTILS_MESSAGE_TYPE_VALIDATION_BIT_EXT = 0x00000002;
    VK_DEBUG_UTILS_MESSAGE_TYPE_PERFORMANCE_BIT_EXT = 0x00000004;
    VK_DEBUG_UTILS_MESSAGE_TYPE_ALL_EXT = 0x00000007;
    VK_DEBUG_UTILS_MESSAGE_TYPE_FLAG_BITS_MAX_ENUM_EXT = 0x7FFFFFFF;
}

struct VkDebugUtilsLabelEXT {
    sType := VkStructureType.VK_STRUCTURE_TYPE_DEBUG_UTILS_LABEL_EXT;
    pNext: void*;
    pLabelName: u8*;
    color: CArray<float>[4];
}

struct VkDebugUtilsObjectNameInfoEXT {
    sType := VkStructureType.VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT;
    pNext: void*;
    objectType: VkObjectType;
    objectHandle: u64;
    pObjectName: u8*;
}

struct VkDebugUtilsMessengerCallbackDataEXT {
    sType := VkStructureType.VK_STRUCTURE_TYPE_DEBUG_UTILS_MESSENGER_CALLBACK_DATA_EXT;
    pNext: void*;
    flags: u32;
    pMessageIdName: u8*;
    messageIdNumber: s32;
    pMessage: u8*;
    queueLabelCount: u32;
    pQueueLabels: VkDebugUtilsLabelEXT*;
    cmdBufLabelCount: u32;
    pCmdBufLabels: VkDebugUtilsLabelEXT*;
    objectCount: u32;
    pObjects: VkDebugUtilsObjectNameInfoEXT*;
}

interface u32 PFN_vkDebugUtilsMessengerCallbackEXT(VkDebugUtilsMessageSeverityFlagBitsEXT messageSeverity, VkDebugUtilsMessageTypeFlagBitsEXT messageTypes, VkDebugUtilsMessengerCallbackDataEXT* pCallbackData, void* pUserData)

struct VkDebugUtilsMessengerCreateInfoEXT {
    sType := VkStructureType.VK_STRUCTURE_TYPE_DEBUG_UTILS_MESSENGER_CREATE_INFO_EXT;
    pNext: void*;
    flags: u32;
    messageSeverity: VkDebugUtilsMessageSeverityFlagBitsEXT;
    messageType: VkDebugUtilsMessageTypeFlagBitsEXT;
    pfnUserCallback: PFN_vkDebugUtilsMessengerCallbackEXT;
    pUserData: void*;
}

struct VkDebugUtilsObjectTagInfoEXT {
    sType := VkStructureType.VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_TAG_INFO_EXT;
    pNext: void*;
    objectType: VkObjectType;
    objectHandle: u64;
    tagName: u64;
    tagSize: u64;
    pTag: void*;
}

interface VkResult PFN_vkSetDebugUtilsObjectNameEXT(VkDevice* device, VkDebugUtilsObjectNameInfoEXT* pNameInfo)

interface VkResult PFN_vkSetDebugUtilsObjectTagEXT(VkDevice* device, VkDebugUtilsObjectTagInfoEXT* pTagInfo)

interface PFN_vkQueueBeginDebugUtilsLabelEXT(VkQueue* queue, VkDebugUtilsLabelEXT* pLabelInfo)

interface PFN_vkQueueEndDebugUtilsLabelEXT(VkQueue* queue)

interface PFN_vkQueueInsertDebugUtilsLabelEXT(VkQueue* queue, VkDebugUtilsLabelEXT* pLabelInfo)

interface PFN_vkCmdBeginDebugUtilsLabelEXT(VkCommandBuffer* commandBuffer, VkDebugUtilsLabelEXT* pLabelInfo)

interface PFN_vkCmdEndDebugUtilsLabelEXT(VkCommandBuffer* commandBuffer)

interface PFN_vkCmdInsertDebugUtilsLabelEXT(VkCommandBuffer* commandBuffer, VkDebugUtilsLabelEXT* pLabelInfo)

interface VkResult PFN_vkCreateDebugUtilsMessengerEXT(VkInstance* instance, VkDebugUtilsMessengerCreateInfoEXT* pCreateInfo, VkAllocationCallbacks* pAllocator, VkDebugUtilsMessengerEXT** pMessenger)

interface PFN_vkDestroyDebugUtilsMessengerEXT(VkInstance* instance, VkDebugUtilsMessengerEXT* messenger, VkAllocationCallbacks* pAllocator)

interface PFN_vkSubmitDebugUtilsMessageEXT(VkInstance* instance, VkDebugUtilsMessageSeverityFlagBitsEXT messageSeverity, u32 messageTypes, VkDebugUtilsMessengerCallbackDataEXT* pCallbackData)

VkResult vkSetDebugUtilsObjectNameEXT(VkDevice* device, VkDebugUtilsObjectNameInfoEXT* pNameInfo) #extern vulkan

VkResult vkSetDebugUtilsObjectTagEXT(VkDevice* device, VkDebugUtilsObjectTagInfoEXT* pTagInfo) #extern vulkan

vkQueueBeginDebugUtilsLabelEXT(VkQueue* queue, VkDebugUtilsLabelEXT* pLabelInfo) #extern vulkan

vkQueueEndDebugUtilsLabelEXT(VkQueue* queue) #extern vulkan

vkQueueInsertDebugUtilsLabelEXT(VkQueue* queue, VkDebugUtilsLabelEXT* pLabelInfo) #extern vulkan

vkCmdBeginDebugUtilsLabelEXT(VkCommandBuffer* commandBuffer, VkDebugUtilsLabelEXT* pLabelInfo) #extern vulkan

vkCmdEndDebugUtilsLabelEXT(VkCommandBuffer* commandBuffer) #extern vulkan

vkCmdInsertDebugUtilsLabelEXT(VkCommandBuffer* commandBuffer, VkDebugUtilsLabelEXT* pLabelInfo) #extern vulkan

VkResult vkCreateDebugUtilsMessengerEXT(VkInstance* instance, VkDebugUtilsMessengerCreateInfoEXT* pCreateInfo, VkAllocationCallbacks* pAllocator, VkDebugUtilsMessengerEXT** pMessenger) #extern vulkan

vkDestroyDebugUtilsMessengerEXT(VkInstance* instance, VkDebugUtilsMessengerEXT* messenger, VkAllocationCallbacks* pAllocator) #extern vulkan

vkSubmitDebugUtilsMessageEXT(VkInstance* instance, VkDebugUtilsMessageSeverityFlagBitsEXT messageSeverity, u32 messageTypes, VkDebugUtilsMessengerCallbackDataEXT* pCallbackData) #extern vulkan

struct VkPhysicalDeviceInlineUniformBlockFeaturesEXT {
    sType := VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_FEATURES_EXT;
    pNext: void*;
    inlineUniformBlock: u32;
    descriptorBindingInlineUniformBlockUpdateAfterBind: u32;
}

struct VkPhysicalDeviceInlineUniformBlockPropertiesEXT {
    sType := VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_PROPERTIES_EXT;
    pNext: void*;
    maxInlineUniformBlockSize: u32;
    maxPerStageDescriptorInlineUniformBlocks: u32;
    maxPerStageDescriptorUpdateAfterBindInlineUniformBlocks: u32;
    maxDescriptorSetInlineUniformBlocks: u32;
    maxDescriptorSetUpdateAfterBindInlineUniformBlocks: u32;
}

struct VkWriteDescriptorSetInlineUniformBlockEXT {
    sType := VkStructureType.VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_INLINE_UNIFORM_BLOCK_EXT;
    pNext: void*;
    dataSize: u32;
    pData: void*;
}

struct VkDescriptorPoolInlineUniformBlockCreateInfoEXT {
    sType := VkStructureType.VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_INLINE_UNIFORM_BLOCK_CREATE_INFO_EXT;
    pNext: void*;
    maxInlineUniformBlockBindings: u32;
}

struct VkSampleLocationEXT {
    x: float;
    y: float;
}

struct VkSampleLocationsInfoEXT {
    sType := VkStructureType.VK_STRUCTURE_TYPE_SAMPLE_LOCATIONS_INFO_EXT;
    pNext: void*;
    sampleLocationsPerPixel: VkSampleCountFlagBits;
    sampleLocationGridSize: VkExtent2D;
    sampleLocationsCount: u32;
    pSampleLocations: VkSampleLocationEXT*;
}

struct VkAttachmentSampleLocationsEXT {
    attachmentIndex: u32;
    sampleLocationsInfo: VkSampleLocationsInfoEXT;
}

struct VkSubpassSampleLocationsEXT {
    subpassIndex: u32;
    sampleLocationsInfo: VkSampleLocationsInfoEXT;
}

struct VkRenderPassSampleLocationsBeginInfoEXT {
    sType := VkStructureType.VK_STRUCTURE_TYPE_RENDER_PASS_SAMPLE_LOCATIONS_BEGIN_INFO_EXT;
    pNext: void*;
    attachmentInitialSampleLocationsCount: u32;
    pAttachmentInitialSampleLocations: VkAttachmentSampleLocationsEXT*;
    postSubpassSampleLocationsCount: u32;
    pPostSubpassSampleLocations: VkSubpassSampleLocationsEXT*;
}

struct VkPipelineSampleLocationsStateCreateInfoEXT {
    sType := VkStructureType.VK_STRUCTURE_TYPE_PIPELINE_SAMPLE_LOCATIONS_STATE_CREATE_INFO_EXT;
    pNext: void*;
    sampleLocationsEnable: u32;
    sampleLocationsInfo: VkSampleLocationsInfoEXT;
}

struct VkPhysicalDeviceSampleLocationsPropertiesEXT {
    sType := VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLE_LOCATIONS_PROPERTIES_EXT;
    pNext: void*;
    sampleLocationSampleCounts: u32;
    maxSampleLocationGridSize: VkExtent2D;
    sampleLocationCoordinateRange: CArray<float>[2];
    sampleLocationSubPixelBits: u32;
    variableSampleLocations: u32;
}

struct VkMultisamplePropertiesEXT {
    sType := VkStructureType.VK_STRUCTURE_TYPE_MULTISAMPLE_PROPERTIES_EXT;
    pNext: void*;
    maxSampleLocationGridSize: VkExtent2D;
}

interface PFN_vkCmdSetSampleLocationsEXT(VkCommandBuffer* commandBuffer, VkSampleLocationsInfoEXT* pSampleLocationsInfo)

interface PFN_vkGetPhysicalDeviceMultisamplePropertiesEXT(VkPhysicalDevice* physicalDevice, VkSampleCountFlagBits samples, VkMultisamplePropertiesEXT* pMultisampleProperties)

vkCmdSetSampleLocationsEXT(VkCommandBuffer* commandBuffer, VkSampleLocationsInfoEXT* pSampleLocationsInfo) #extern vulkan

vkGetPhysicalDeviceMultisamplePropertiesEXT(VkPhysicalDevice* physicalDevice, VkSampleCountFlagBits samples, VkMultisamplePropertiesEXT* pMultisampleProperties) #extern vulkan

enum VkBlendOverlapEXT {
    VK_BLEND_OVERLAP_UNCORRELATED_EXT = 0;
    VK_BLEND_OVERLAP_DISJOINT_EXT = 1;
    VK_BLEND_OVERLAP_CONJOINT_EXT = 2;
    VK_BLEND_OVERLAP_MAX_ENUM_EXT = 0x7FFFFFFF;
}

struct VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT {
    sType := VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BLEND_OPERATION_ADVANCED_FEATURES_EXT;
    pNext: void*;
    advancedBlendCoherentOperations: u32;
}

struct VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT {
    sType := VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BLEND_OPERATION_ADVANCED_PROPERTIES_EXT;
    pNext: void*;
    advancedBlendMaxColorAttachments: u32;
    advancedBlendIndependentBlend: u32;
    advancedBlendNonPremultipliedSrcColor: u32;
    advancedBlendNonPremultipliedDstColor: u32;
    advancedBlendCorrelatedOverlap: u32;
    advancedBlendAllOperations: u32;
}

struct VkPipelineColorBlendAdvancedStateCreateInfoEXT {
    sType := VkStructureType.VK_STRUCTURE_TYPE_PIPELINE_COLOR_BLEND_ADVANCED_STATE_CREATE_INFO_EXT;
    pNext: void*;
    srcPremultiplied: u32;
    dstPremultiplied: u32;
    blendOverlap: VkBlendOverlapEXT;
}

struct VkPipelineCoverageToColorStateCreateInfoNV {
    sType := VkStructureType.VK_STRUCTURE_TYPE_PIPELINE_COVERAGE_TO_COLOR_STATE_CREATE_INFO_NV;
    pNext: void*;
    flags: u32;
    coverageToColorEnable: u32;
    coverageToColorLocation: u32;
}

enum VkCoverageModulationModeNV {
    VK_COVERAGE_MODULATION_MODE_NONE_NV = 0;
    VK_COVERAGE_MODULATION_MODE_RGB_NV = 1;
    VK_COVERAGE_MODULATION_MODE_ALPHA_NV = 2;
    VK_COVERAGE_MODULATION_MODE_RGBA_NV = 3;
    VK_COVERAGE_MODULATION_MODE_MAX_ENUM_NV = 0x7FFFFFFF;
}

struct VkPipelineCoverageModulationStateCreateInfoNV {
    sType := VkStructureType.VK_STRUCTURE_TYPE_PIPELINE_COVERAGE_MODULATION_STATE_CREATE_INFO_NV;
    pNext: void*;
    flags: u32;
    coverageModulationMode: VkCoverageModulationModeNV;
    coverageModulationTableEnable: u32;
    coverageModulationTableCount: u32;
    pCoverageModulationTable: float*;
}

struct VkPhysicalDeviceShaderSMBuiltinsPropertiesNV {
    sType := VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SM_BUILTINS_PROPERTIES_NV;
    pNext: void*;
    shaderSMCount: u32;
    shaderWarpsPerSM: u32;
}

struct VkPhysicalDeviceShaderSMBuiltinsFeaturesNV {
    sType := VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SM_BUILTINS_FEATURES_NV;
    pNext: void*;
    shaderSMBuiltins: u32;
}

struct VkDrmFormatModifierPropertiesEXT {
    drmFormatModifier: u64;
    drmFormatModifierPlaneCount: u32;
    drmFormatModifierTilingFeatures: u32;
}

struct VkDrmFormatModifierPropertiesListEXT {
    sType := VkStructureType.VK_STRUCTURE_TYPE_DRM_FORMAT_MODIFIER_PROPERTIES_LIST_EXT;
    pNext: void*;
    drmFormatModifierCount: u32;
    pDrmFormatModifierProperties: VkDrmFormatModifierPropertiesEXT*;
}

struct VkPhysicalDeviceImageDrmFormatModifierInfoEXT {
    sType := VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_DRM_FORMAT_MODIFIER_INFO_EXT;
    pNext: void*;
    drmFormatModifier: u64;
    sharingMode: VkSharingMode;
    queueFamilyIndexCount: u32;
    pQueueFamilyIndices: u32*;
}

struct VkImageDrmFormatModifierListCreateInfoEXT {
    sType := VkStructureType.VK_STRUCTURE_TYPE_IMAGE_DRM_FORMAT_MODIFIER_LIST_CREATE_INFO_EXT;
    pNext: void*;
    drmFormatModifierCount: u32;
    pDrmFormatModifiers: u64*;
}

struct VkImageDrmFormatModifierExplicitCreateInfoEXT {
    sType := VkStructureType.VK_STRUCTURE_TYPE_IMAGE_DRM_FORMAT_MODIFIER_EXPLICIT_CREATE_INFO_EXT;
    pNext: void*;
    drmFormatModifier: u64;
    drmFormatModifierPlaneCount: u32;
    pPlaneLayouts: VkSubresourceLayout*;
}

struct VkImageDrmFormatModifierPropertiesEXT {
    sType := VkStructureType.VK_STRUCTURE_TYPE_IMAGE_DRM_FORMAT_MODIFIER_PROPERTIES_EXT;
    pNext: void*;
    drmFormatModifier: u64;
}

interface VkResult PFN_vkGetImageDrmFormatModifierPropertiesEXT(VkDevice* device, VkImage* image, VkImageDrmFormatModifierPropertiesEXT* pProperties)

VkResult vkGetImageDrmFormatModifierPropertiesEXT(VkDevice* device, VkImage* image, VkImageDrmFormatModifierPropertiesEXT* pProperties) #extern vulkan

struct VkValidationCacheEXT {}
enum VkValidationCacheHeaderVersionEXT {
    VK_VALIDATION_CACHE_HEADER_VERSION_ONE_EXT = 1;
    VK_VALIDATION_CACHE_HEADER_VERSION_MAX_ENUM_EXT = 0x7FFFFFFF;
}

struct VkValidationCacheCreateInfoEXT {
    sType := VkStructureType.VK_STRUCTURE_TYPE_VALIDATION_CACHE_CREATE_INFO_EXT;
    pNext: void*;
    flags: u32;
    initialDataSize: u64;
    pInitialData: void*;
}

struct VkShaderModuleValidationCacheCreateInfoEXT {
    sType := VkStructureType.VK_STRUCTURE_TYPE_SHADER_MODULE_VALIDATION_CACHE_CREATE_INFO_EXT;
    pNext: void*;
    validationCache: VkValidationCacheEXT*;
}

interface VkResult PFN_vkCreateValidationCacheEXT(VkDevice* device, VkValidationCacheCreateInfoEXT* pCreateInfo, VkAllocationCallbacks* pAllocator, VkValidationCacheEXT** pValidationCache)

interface PFN_vkDestroyValidationCacheEXT(VkDevice* device, VkValidationCacheEXT* validationCache, VkAllocationCallbacks* pAllocator)

interface VkResult PFN_vkMergeValidationCachesEXT(VkDevice* device, VkValidationCacheEXT* dstCache, u32 srcCacheCount, VkValidationCacheEXT** pSrcCaches)

interface VkResult PFN_vkGetValidationCacheDataEXT(VkDevice* device, VkValidationCacheEXT* validationCache, u64* pDataSize, void* pData)

VkResult vkCreateValidationCacheEXT(VkDevice* device, VkValidationCacheCreateInfoEXT* pCreateInfo, VkAllocationCallbacks* pAllocator, VkValidationCacheEXT** pValidationCache) #extern vulkan

vkDestroyValidationCacheEXT(VkDevice* device, VkValidationCacheEXT* validationCache, VkAllocationCallbacks* pAllocator) #extern vulkan

VkResult vkMergeValidationCachesEXT(VkDevice* device, VkValidationCacheEXT* dstCache, u32 srcCacheCount, VkValidationCacheEXT** pSrcCaches) #extern vulkan

VkResult vkGetValidationCacheDataEXT(VkDevice* device, VkValidationCacheEXT* validationCache, u64* pDataSize, void* pData) #extern vulkan

enum VkShadingRatePaletteEntryNV {
    VK_SHADING_RATE_PALETTE_ENTRY_NO_INVOCATIONS_NV = 0;
    VK_SHADING_RATE_PALETTE_ENTRY_16_INVOCATIONS_PER_PIXEL_NV = 1;
    VK_SHADING_RATE_PALETTE_ENTRY_8_INVOCATIONS_PER_PIXEL_NV = 2;
    VK_SHADING_RATE_PALETTE_ENTRY_4_INVOCATIONS_PER_PIXEL_NV = 3;
    VK_SHADING_RATE_PALETTE_ENTRY_2_INVOCATIONS_PER_PIXEL_NV = 4;
    VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_PIXEL_NV = 5;
    VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_2X1_PIXELS_NV = 6;
    VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_1X2_PIXELS_NV = 7;
    VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_2X2_PIXELS_NV = 8;
    VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_4X2_PIXELS_NV = 9;
    VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_2X4_PIXELS_NV = 10;
    VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_4X4_PIXELS_NV = 11;
    VK_SHADING_RATE_PALETTE_ENTRY_MAX_ENUM_NV = 0x7FFFFFFF;
}

enum VkCoarseSampleOrderTypeNV {
    VK_COARSE_SAMPLE_ORDER_TYPE_DEFAULT_NV = 0;
    VK_COARSE_SAMPLE_ORDER_TYPE_CUSTOM_NV = 1;
    VK_COARSE_SAMPLE_ORDER_TYPE_PIXEL_MAJOR_NV = 2;
    VK_COARSE_SAMPLE_ORDER_TYPE_SAMPLE_MAJOR_NV = 3;
    VK_COARSE_SAMPLE_ORDER_TYPE_MAX_ENUM_NV = 0x7FFFFFFF;
}

struct VkShadingRatePaletteNV {
    shadingRatePaletteEntryCount: u32;
    pShadingRatePaletteEntries: VkShadingRatePaletteEntryNV*;
}

struct VkPipelineViewportShadingRateImageStateCreateInfoNV {
    sType := VkStructureType.VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_SHADING_RATE_IMAGE_STATE_CREATE_INFO_NV;
    pNext: void*;
    shadingRateImageEnable: u32;
    viewportCount: u32;
    pShadingRatePalettes: VkShadingRatePaletteNV*;
}

struct VkPhysicalDeviceShadingRateImageFeaturesNV {
    sType := VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADING_RATE_IMAGE_FEATURES_NV;
    pNext: void*;
    shadingRateImage: u32;
    shadingRateCoarseSampleOrder: u32;
}

struct VkPhysicalDeviceShadingRateImagePropertiesNV {
    sType := VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADING_RATE_IMAGE_PROPERTIES_NV;
    pNext: void*;
    shadingRateTexelSize: VkExtent2D;
    shadingRatePaletteSize: u32;
    shadingRateMaxCoarseSamples: u32;
}

struct VkCoarseSampleLocationNV {
    pixelX: u32;
    pixelY: u32;
    sample: u32;
}

struct VkCoarseSampleOrderCustomNV {
    shadingRate: VkShadingRatePaletteEntryNV;
    sampleCount: u32;
    sampleLocationCount: u32;
    pSampleLocations: VkCoarseSampleLocationNV*;
}

struct VkPipelineViewportCoarseSampleOrderStateCreateInfoNV {
    sType := VkStructureType.VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_COARSE_SAMPLE_ORDER_STATE_CREATE_INFO_NV;
    pNext: void*;
    sampleOrderType: VkCoarseSampleOrderTypeNV;
    customSampleOrderCount: u32;
    pCustomSampleOrders: VkCoarseSampleOrderCustomNV*;
}

interface PFN_vkCmdBindShadingRateImageNV(VkCommandBuffer* commandBuffer, VkImageView* imageView, VkImageLayout imageLayout)

interface PFN_vkCmdSetViewportShadingRatePaletteNV(VkCommandBuffer* commandBuffer, u32 firstViewport, u32 viewportCount, VkShadingRatePaletteNV* pShadingRatePalettes)

interface PFN_vkCmdSetCoarseSampleOrderNV(VkCommandBuffer* commandBuffer, VkCoarseSampleOrderTypeNV sampleOrderType, u32 customSampleOrderCount, VkCoarseSampleOrderCustomNV* pCustomSampleOrders)

vkCmdBindShadingRateImageNV(VkCommandBuffer* commandBuffer, VkImageView* imageView, VkImageLayout imageLayout) #extern vulkan

vkCmdSetViewportShadingRatePaletteNV(VkCommandBuffer* commandBuffer, u32 firstViewport, u32 viewportCount, VkShadingRatePaletteNV* pShadingRatePalettes) #extern vulkan

vkCmdSetCoarseSampleOrderNV(VkCommandBuffer* commandBuffer, VkCoarseSampleOrderTypeNV sampleOrderType, u32 customSampleOrderCount, VkCoarseSampleOrderCustomNV* pCustomSampleOrders) #extern vulkan

struct VkAccelerationStructureNV {}
enum VkRayTracingShaderGroupTypeKHR {
    VK_RAY_TRACING_SHADER_GROUP_TYPE_GENERAL_KHR = 0;
    VK_RAY_TRACING_SHADER_GROUP_TYPE_TRIANGLES_HIT_GROUP_KHR = 1;
    VK_RAY_TRACING_SHADER_GROUP_TYPE_PROCEDURAL_HIT_GROUP_KHR = 2;
    VK_RAY_TRACING_SHADER_GROUP_TYPE_GENERAL_NV = VK_RAY_TRACING_SHADER_GROUP_TYPE_GENERAL_KHR;
    VK_RAY_TRACING_SHADER_GROUP_TYPE_TRIANGLES_HIT_GROUP_NV = VK_RAY_TRACING_SHADER_GROUP_TYPE_TRIANGLES_HIT_GROUP_KHR;
    VK_RAY_TRACING_SHADER_GROUP_TYPE_PROCEDURAL_HIT_GROUP_NV = VK_RAY_TRACING_SHADER_GROUP_TYPE_PROCEDURAL_HIT_GROUP_KHR;
    VK_RAY_TRACING_SHADER_GROUP_TYPE_MAX_ENUM_KHR = 0x7FFFFFFF;
}

enum VkGeometryTypeKHR {
    VK_GEOMETRY_TYPE_TRIANGLES_KHR = 0;
    VK_GEOMETRY_TYPE_AABBS_KHR = 1;
    VK_GEOMETRY_TYPE_INSTANCES_KHR = 2;
    VK_GEOMETRY_TYPE_TRIANGLES_NV = VK_GEOMETRY_TYPE_TRIANGLES_KHR;
    VK_GEOMETRY_TYPE_AABBS_NV = VK_GEOMETRY_TYPE_AABBS_KHR;
    VK_GEOMETRY_TYPE_MAX_ENUM_KHR = 0x7FFFFFFF;
}

enum VkAccelerationStructureTypeKHR {
    VK_ACCELERATION_STRUCTURE_TYPE_TOP_LEVEL_KHR = 0;
    VK_ACCELERATION_STRUCTURE_TYPE_BOTTOM_LEVEL_KHR = 1;
    VK_ACCELERATION_STRUCTURE_TYPE_GENERIC_KHR = 2;
    VK_ACCELERATION_STRUCTURE_TYPE_TOP_LEVEL_NV = VK_ACCELERATION_STRUCTURE_TYPE_TOP_LEVEL_KHR;
    VK_ACCELERATION_STRUCTURE_TYPE_BOTTOM_LEVEL_NV = VK_ACCELERATION_STRUCTURE_TYPE_BOTTOM_LEVEL_KHR;
    VK_ACCELERATION_STRUCTURE_TYPE_MAX_ENUM_KHR = 0x7FFFFFFF;
}

enum VkCopyAccelerationStructureModeKHR {
    VK_COPY_ACCELERATION_STRUCTURE_MODE_CLONE_KHR = 0;
    VK_COPY_ACCELERATION_STRUCTURE_MODE_COMPACT_KHR = 1;
    VK_COPY_ACCELERATION_STRUCTURE_MODE_SERIALIZE_KHR = 2;
    VK_COPY_ACCELERATION_STRUCTURE_MODE_DESERIALIZE_KHR = 3;
    VK_COPY_ACCELERATION_STRUCTURE_MODE_CLONE_NV = VK_COPY_ACCELERATION_STRUCTURE_MODE_CLONE_KHR;
    VK_COPY_ACCELERATION_STRUCTURE_MODE_COMPACT_NV = VK_COPY_ACCELERATION_STRUCTURE_MODE_COMPACT_KHR;
    VK_COPY_ACCELERATION_STRUCTURE_MODE_MAX_ENUM_KHR = 0x7FFFFFFF;
}

enum VkAccelerationStructureMemoryRequirementsTypeNV {
    VK_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_OBJECT_NV = 0;
    VK_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_BUILD_SCRATCH_NV = 1;
    VK_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_UPDATE_SCRATCH_NV = 2;
    VK_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_MAX_ENUM_NV = 0x7FFFFFFF;
}

enum VkGeometryFlagBitsKHR {
    VK_GEOMETRY_OPAQUE_BIT_KHR = 0x00000001;
    VK_GEOMETRY_NO_DUPLICATE_ANY_HIT_INVOCATION_BIT_KHR = 0x00000002;
    VK_GEOMETRY_OPAQUE_BIT_NV = VK_GEOMETRY_OPAQUE_BIT_KHR;
    VK_GEOMETRY_NO_DUPLICATE_ANY_HIT_INVOCATION_BIT_NV = VK_GEOMETRY_NO_DUPLICATE_ANY_HIT_INVOCATION_BIT_KHR;
    VK_GEOMETRY_FLAG_BITS_MAX_ENUM_KHR = 0x7FFFFFFF;
}

enum VkGeometryInstanceFlagBitsKHR {
    VK_GEOMETRY_INSTANCE_TRIANGLE_FACING_CULL_DISABLE_BIT_KHR = 0x00000001;
    VK_GEOMETRY_INSTANCE_TRIANGLE_FLIP_FACING_BIT_KHR = 0x00000002;
    VK_GEOMETRY_INSTANCE_FORCE_OPAQUE_BIT_KHR = 0x00000004;
    VK_GEOMETRY_INSTANCE_FORCE_NO_OPAQUE_BIT_KHR = 0x00000008;
    VK_GEOMETRY_INSTANCE_TRIANGLE_FRONT_COUNTERCLOCKWISE_BIT_KHR = VK_GEOMETRY_INSTANCE_TRIANGLE_FLIP_FACING_BIT_KHR;
    VK_GEOMETRY_INSTANCE_TRIANGLE_CULL_DISABLE_BIT_NV = VK_GEOMETRY_INSTANCE_TRIANGLE_FACING_CULL_DISABLE_BIT_KHR;
    VK_GEOMETRY_INSTANCE_TRIANGLE_FRONT_COUNTERCLOCKWISE_BIT_NV = VK_GEOMETRY_INSTANCE_TRIANGLE_FRONT_COUNTERCLOCKWISE_BIT_KHR;
    VK_GEOMETRY_INSTANCE_FORCE_OPAQUE_BIT_NV = VK_GEOMETRY_INSTANCE_FORCE_OPAQUE_BIT_KHR;
    VK_GEOMETRY_INSTANCE_FORCE_NO_OPAQUE_BIT_NV = VK_GEOMETRY_INSTANCE_FORCE_NO_OPAQUE_BIT_KHR;
    VK_GEOMETRY_INSTANCE_FLAG_BITS_MAX_ENUM_KHR = 0x7FFFFFFF;
}

enum VkBuildAccelerationStructureFlagBitsKHR {
    VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_UPDATE_BIT_KHR = 0x00000001;
    VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_COMPACTION_BIT_KHR = 0x00000002;
    VK_BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_TRACE_BIT_KHR = 0x00000004;
    VK_BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_BUILD_BIT_KHR = 0x00000008;
    VK_BUILD_ACCELERATION_STRUCTURE_LOW_MEMORY_BIT_KHR = 0x00000010;
    VK_BUILD_ACCELERATION_STRUCTURE_MOTION_BIT_NV = 0x00000020;
    VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_UPDATE_BIT_NV = VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_UPDATE_BIT_KHR;
    VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_COMPACTION_BIT_NV = VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_COMPACTION_BIT_KHR;
    VK_BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_TRACE_BIT_NV = VK_BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_TRACE_BIT_KHR;
    VK_BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_BUILD_BIT_NV = VK_BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_BUILD_BIT_KHR;
    VK_BUILD_ACCELERATION_STRUCTURE_LOW_MEMORY_BIT_NV = VK_BUILD_ACCELERATION_STRUCTURE_LOW_MEMORY_BIT_KHR;
    VK_BUILD_ACCELERATION_STRUCTURE_FLAG_BITS_MAX_ENUM_KHR = 0x7FFFFFFF;
}

struct VkRayTracingShaderGroupCreateInfoNV {
    sType := VkStructureType.VK_STRUCTURE_TYPE_RAY_TRACING_SHADER_GROUP_CREATE_INFO_KHR;
    pNext: void*;
    type: VkRayTracingShaderGroupTypeKHR;
    generalShader: u32;
    closestHitShader: u32;
    anyHitShader: u32;
    intersectionShader: u32;
}

struct VkRayTracingPipelineCreateInfoNV {
    sType := VkStructureType.VK_STRUCTURE_TYPE_RAY_TRACING_PIPELINE_CREATE_INFO_KHR;
    pNext: void*;
    flags: u32;
    stageCount: u32;
    pStages: VkPipelineShaderStageCreateInfo*;
    groupCount: u32;
    pGroups: VkRayTracingShaderGroupCreateInfoNV*;
    maxRecursionDepth: u32;
    layout: VkPipelineLayout*;
    basePipelineHandle: VkPipeline*;
    basePipelineIndex: s32;
}

struct VkGeometryTrianglesNV {
    sType := VkStructureType.VK_STRUCTURE_TYPE_GEOMETRY_TRIANGLES_NV;
    pNext: void*;
    vertexData: VkBuffer*;
    vertexOffset: u64;
    vertexCount: u32;
    vertexStride: u64;
    vertexFormat: VkFormat;
    indexData: VkBuffer*;
    indexOffset: u64;
    indexCount: u32;
    indexType: VkIndexType;
    transformData: VkBuffer*;
    transformOffset: u64;
}

struct VkGeometryAABBNV {
    sType := VkStructureType.VK_STRUCTURE_TYPE_GEOMETRY_AABB_NV;
    pNext: void*;
    aabbData: VkBuffer*;
    numAABBs: u32;
    stride: u32;
    offset: u64;
}

struct VkGeometryDataNV {
    triangles: VkGeometryTrianglesNV;
    aabbs: VkGeometryAABBNV;
}

struct VkGeometryNV {
    sType := VkStructureType.VK_STRUCTURE_TYPE_GEOMETRY_NV;
    pNext: void*;
    geometryType: VkGeometryTypeKHR;
    geometry: VkGeometryDataNV;
    flags: u32;
}

struct VkAccelerationStructureInfoNV {
    sType := VkStructureType.VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_INFO_NV;
    pNext: void*;
    type: VkAccelerationStructureTypeKHR;
    flags: u32;
    instanceCount: u32;
    geometryCount: u32;
    pGeometries: VkGeometryNV*;
}

struct VkAccelerationStructureCreateInfoNV {
    sType := VkStructureType.VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_CREATE_INFO_NV;
    pNext: void*;
    compactedSize: u64;
    info: VkAccelerationStructureInfoNV;
}

struct VkBindAccelerationStructureMemoryInfoNV {
    sType := VkStructureType.VK_STRUCTURE_TYPE_BIND_ACCELERATION_STRUCTURE_MEMORY_INFO_NV;
    pNext: void*;
    accelerationStructure: VkAccelerationStructureNV*;
    memory: VkDeviceMemory*;
    memoryOffset: u64;
    deviceIndexCount: u32;
    pDeviceIndices: u32*;
}

struct VkWriteDescriptorSetAccelerationStructureNV {
    sType := VkStructureType.VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_ACCELERATION_STRUCTURE_NV;
    pNext: void*;
    accelerationStructureCount: u32;
    pAccelerationStructures: VkAccelerationStructureNV**;
}

struct VkAccelerationStructureMemoryRequirementsInfoNV {
    sType := VkStructureType.VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_INFO_NV;
    pNext: void*;
    type: VkAccelerationStructureMemoryRequirementsTypeNV;
    accelerationStructure: VkAccelerationStructureNV*;
}

struct VkPhysicalDeviceRayTracingPropertiesNV {
    sType := VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_PROPERTIES_NV;
    pNext: void*;
    shaderGroupHandleSize: u32;
    maxRecursionDepth: u32;
    maxShaderGroupStride: u32;
    shaderGroupBaseAlignment: u32;
    maxGeometryCount: u64;
    maxInstanceCount: u64;
    maxTriangleCount: u64;
    maxDescriptorSetAccelerationStructures: u32;
}

struct VkTransformMatrixKHR {
    matrix: CArray<CArray<float>[4]>[3];
}

struct VkAabbPositionsKHR {
    minX: float;
    minY: float;
    minZ: float;
    maxX: float;
    maxY: float;
    maxZ: float;
}

struct VkAccelerationStructureInstanceKHR {
    transform: VkTransformMatrixKHR;
    instanceCustomIndex: u32;
    // @Future Support bitfields
    // mask:8: u32;
    instanceShaderBindingTableRecordOffset: u32;
    // flags:8: u32;
    accelerationStructureReference: u64;
}

interface VkResult PFN_vkCreateAccelerationStructureNV(VkDevice* device, VkAccelerationStructureCreateInfoNV* pCreateInfo, VkAllocationCallbacks* pAllocator, VkAccelerationStructureNV** pAccelerationStructure)

interface PFN_vkDestroyAccelerationStructureNV(VkDevice* device, VkAccelerationStructureNV* accelerationStructure, VkAllocationCallbacks* pAllocator)

interface PFN_vkGetAccelerationStructureMemoryRequirementsNV(VkDevice* device, VkAccelerationStructureMemoryRequirementsInfoNV* pInfo, VkMemoryRequirements2* pMemoryRequirements)

interface VkResult PFN_vkBindAccelerationStructureMemoryNV(VkDevice* device, u32 bindInfoCount, VkBindAccelerationStructureMemoryInfoNV* pBindInfos)

interface PFN_vkCmdBuildAccelerationStructureNV(VkCommandBuffer* commandBuffer, VkAccelerationStructureInfoNV* pInfo, VkBuffer* instanceData, u64 instanceOffset, u32 update, VkAccelerationStructureNV* dst, VkAccelerationStructureNV* src, VkBuffer* scratch, u64 scratchOffset)

interface PFN_vkCmdCopyAccelerationStructureNV(VkCommandBuffer* commandBuffer, VkAccelerationStructureNV* dst, VkAccelerationStructureNV* src, VkCopyAccelerationStructureModeKHR mode)

interface PFN_vkCmdTraceRaysNV(VkCommandBuffer* commandBuffer, VkBuffer* raygenShaderBindingTableBuffer, u64 raygenShaderBindingOffset, VkBuffer* missShaderBindingTableBuffer, u64 missShaderBindingOffset, u64 missShaderBindingStride, VkBuffer* hitShaderBindingTableBuffer, u64 hitShaderBindingOffset, u64 hitShaderBindingStride, VkBuffer* callableShaderBindingTableBuffer, u64 callableShaderBindingOffset, u64 callableShaderBindingStride, u32 width, u32 height, u32 depth)

interface VkResult PFN_vkCreateRayTracingPipelinesNV(VkDevice* device, VkPipelineCache* pipelineCache, u32 createInfoCount, VkRayTracingPipelineCreateInfoNV* pCreateInfos, VkAllocationCallbacks* pAllocator, VkPipeline** pPipelines)

interface VkResult PFN_vkGetRayTracingShaderGroupHandlesKHR(VkDevice* device, VkPipeline* pipeline, u32 firstGroup, u32 groupCount, u64 dataSize, void* pData)

interface VkResult PFN_vkGetRayTracingShaderGroupHandlesNV(VkDevice* device, VkPipeline* pipeline, u32 firstGroup, u32 groupCount, u64 dataSize, void* pData)

interface VkResult PFN_vkGetAccelerationStructureHandleNV(VkDevice* device, VkAccelerationStructureNV* accelerationStructure, u64 dataSize, void* pData)

interface PFN_vkCmdWriteAccelerationStructuresPropertiesNV(VkCommandBuffer* commandBuffer, u32 accelerationStructureCount, VkAccelerationStructureNV** pAccelerationStructures, VkQueryType queryType, VkQueryPool* queryPool, u32 firstQuery)

interface VkResult PFN_vkCompileDeferredNV(VkDevice* device, VkPipeline* pipeline, u32 shader)

VkResult vkCreateAccelerationStructureNV(VkDevice* device, VkAccelerationStructureCreateInfoNV* pCreateInfo, VkAllocationCallbacks* pAllocator, VkAccelerationStructureNV** pAccelerationStructure) #extern vulkan

vkDestroyAccelerationStructureNV(VkDevice* device, VkAccelerationStructureNV* accelerationStructure, VkAllocationCallbacks* pAllocator) #extern vulkan

vkGetAccelerationStructureMemoryRequirementsNV(VkDevice* device, VkAccelerationStructureMemoryRequirementsInfoNV* pInfo, VkMemoryRequirements2* pMemoryRequirements) #extern vulkan

VkResult vkBindAccelerationStructureMemoryNV(VkDevice* device, u32 bindInfoCount, VkBindAccelerationStructureMemoryInfoNV* pBindInfos) #extern vulkan

vkCmdBuildAccelerationStructureNV(VkCommandBuffer* commandBuffer, VkAccelerationStructureInfoNV* pInfo, VkBuffer* instanceData, u64 instanceOffset, u32 update, VkAccelerationStructureNV* dst, VkAccelerationStructureNV* src, VkBuffer* scratch, u64 scratchOffset) #extern vulkan

vkCmdCopyAccelerationStructureNV(VkCommandBuffer* commandBuffer, VkAccelerationStructureNV* dst, VkAccelerationStructureNV* src, VkCopyAccelerationStructureModeKHR mode) #extern vulkan

vkCmdTraceRaysNV(VkCommandBuffer* commandBuffer, VkBuffer* raygenShaderBindingTableBuffer, u64 raygenShaderBindingOffset, VkBuffer* missShaderBindingTableBuffer, u64 missShaderBindingOffset, u64 missShaderBindingStride, VkBuffer* hitShaderBindingTableBuffer, u64 hitShaderBindingOffset, u64 hitShaderBindingStride, VkBuffer* callableShaderBindingTableBuffer, u64 callableShaderBindingOffset, u64 callableShaderBindingStride, u32 width, u32 height, u32 depth) #extern vulkan

VkResult vkCreateRayTracingPipelinesNV(VkDevice* device, VkPipelineCache* pipelineCache, u32 createInfoCount, VkRayTracingPipelineCreateInfoNV* pCreateInfos, VkAllocationCallbacks* pAllocator, VkPipeline** pPipelines) #extern vulkan

VkResult vkGetRayTracingShaderGroupHandlesKHR(VkDevice* device, VkPipeline* pipeline, u32 firstGroup, u32 groupCount, u64 dataSize, void* pData) #extern vulkan

VkResult vkGetRayTracingShaderGroupHandlesNV(VkDevice* device, VkPipeline* pipeline, u32 firstGroup, u32 groupCount, u64 dataSize, void* pData) #extern vulkan

VkResult vkGetAccelerationStructureHandleNV(VkDevice* device, VkAccelerationStructureNV* accelerationStructure, u64 dataSize, void* pData) #extern vulkan

vkCmdWriteAccelerationStructuresPropertiesNV(VkCommandBuffer* commandBuffer, u32 accelerationStructureCount, VkAccelerationStructureNV** pAccelerationStructures, VkQueryType queryType, VkQueryPool* queryPool, u32 firstQuery) #extern vulkan

VkResult vkCompileDeferredNV(VkDevice* device, VkPipeline* pipeline, u32 shader) #extern vulkan

struct VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV {
    sType := VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_REPRESENTATIVE_FRAGMENT_TEST_FEATURES_NV;
    pNext: void*;
    representativeFragmentTest: u32;
}

struct VkPipelineRepresentativeFragmentTestStateCreateInfoNV {
    sType := VkStructureType.VK_STRUCTURE_TYPE_PIPELINE_REPRESENTATIVE_FRAGMENT_TEST_STATE_CREATE_INFO_NV;
    pNext: void*;
    representativeFragmentTestEnable: u32;
}

struct VkPhysicalDeviceImageViewImageFormatInfoEXT {
    sType := VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_VIEW_IMAGE_FORMAT_INFO_EXT;
    pNext: void*;
    imageViewType: VkImageViewType;
}

struct VkFilterCubicImageViewImageFormatPropertiesEXT {
    sType := VkStructureType.VK_STRUCTURE_TYPE_FILTER_CUBIC_IMAGE_VIEW_IMAGE_FORMAT_PROPERTIES_EXT;
    pNext: void*;
    filterCubic: u32;
    filterCubicMinmax: u32;
}

enum VkQueueGlobalPriorityEXT {
    VK_QUEUE_GLOBAL_PRIORITY_LOW_EXT = 128;
    VK_QUEUE_GLOBAL_PRIORITY_MEDIUM_EXT = 256;
    VK_QUEUE_GLOBAL_PRIORITY_HIGH_EXT = 512;
    VK_QUEUE_GLOBAL_PRIORITY_REALTIME_EXT = 1024;
    VK_QUEUE_GLOBAL_PRIORITY_MAX_ENUM_EXT = 0x7FFFFFFF;
}

struct VkDeviceQueueGlobalPriorityCreateInfoEXT {
    sType := VkStructureType.VK_STRUCTURE_TYPE_DEVICE_QUEUE_GLOBAL_PRIORITY_CREATE_INFO_EXT;
    pNext: void*;
    globalPriority: VkQueueGlobalPriorityEXT;
}

struct VkImportMemoryHostPointerInfoEXT {
    sType := VkStructureType.VK_STRUCTURE_TYPE_IMPORT_MEMORY_HOST_POINTER_INFO_EXT;
    pNext: void*;
    handleType: VkExternalMemoryHandleTypeFlagBits;
    pHostPointer: void*;
}

struct VkMemoryHostPointerPropertiesEXT {
    sType := VkStructureType.VK_STRUCTURE_TYPE_MEMORY_HOST_POINTER_PROPERTIES_EXT;
    pNext: void*;
    memoryTypeBits: u32;
}

struct VkPhysicalDeviceExternalMemoryHostPropertiesEXT {
    sType := VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_MEMORY_HOST_PROPERTIES_EXT;
    pNext: void*;
    minImportedHostPointerAlignment: u64;
}

interface VkResult PFN_vkGetMemoryHostPointerPropertiesEXT(VkDevice* device, VkExternalMemoryHandleTypeFlagBits handleType, void* pHostPointer, VkMemoryHostPointerPropertiesEXT* pMemoryHostPointerProperties)

VkResult vkGetMemoryHostPointerPropertiesEXT(VkDevice* device, VkExternalMemoryHandleTypeFlagBits handleType, void* pHostPointer, VkMemoryHostPointerPropertiesEXT* pMemoryHostPointerProperties) #extern vulkan

interface PFN_vkCmdWriteBufferMarkerAMD(VkCommandBuffer* commandBuffer, VkPipelineStageFlagBits pipelineStage, VkBuffer* dstBuffer, u64 dstOffset, u32 marker)

vkCmdWriteBufferMarkerAMD(VkCommandBuffer* commandBuffer, VkPipelineStageFlagBits pipelineStage, VkBuffer* dstBuffer, u64 dstOffset, u32 marker) #extern vulkan

enum VkPipelineCompilerControlFlagBitsAMD {
    VK_PIPELINE_COMPILER_CONTROL_FLAG_BITS_MAX_ENUM_AMD = 0x7FFFFFFF;
}

struct VkPipelineCompilerControlCreateInfoAMD {
    sType := VkStructureType.VK_STRUCTURE_TYPE_PIPELINE_COMPILER_CONTROL_CREATE_INFO_AMD;
    pNext: void*;
    compilerControlFlags: u32;
}

enum VkTimeDomainEXT {
    VK_TIME_DOMAIN_DEVICE_EXT = 0;
    VK_TIME_DOMAIN_CLOCK_MONOTONIC_EXT = 1;
    VK_TIME_DOMAIN_CLOCK_MONOTONIC_RAW_EXT = 2;
    VK_TIME_DOMAIN_QUERY_PERFORMANCE_COUNTER_EXT = 3;
    VK_TIME_DOMAIN_MAX_ENUM_EXT = 0x7FFFFFFF;
}

struct VkCalibratedTimestampInfoEXT {
    sType := VkStructureType.VK_STRUCTURE_TYPE_CALIBRATED_TIMESTAMP_INFO_EXT;
    pNext: void*;
    timeDomain: VkTimeDomainEXT;
}

interface VkResult PFN_vkGetPhysicalDeviceCalibrateableTimeDomainsEXT(VkPhysicalDevice* physicalDevice, u32* pTimeDomainCount, VkTimeDomainEXT* pTimeDomains)

interface VkResult PFN_vkGetCalibratedTimestampsEXT(VkDevice* device, u32 timestampCount, VkCalibratedTimestampInfoEXT* pTimestampInfos, u64* pTimestamps, u64* pMaxDeviation)

VkResult vkGetPhysicalDeviceCalibrateableTimeDomainsEXT(VkPhysicalDevice* physicalDevice, u32* pTimeDomainCount, VkTimeDomainEXT* pTimeDomains) #extern vulkan

VkResult vkGetCalibratedTimestampsEXT(VkDevice* device, u32 timestampCount, VkCalibratedTimestampInfoEXT* pTimestampInfos, u64* pTimestamps, u64* pMaxDeviation) #extern vulkan

struct VkPhysicalDeviceShaderCorePropertiesAMD {
    sType := VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CORE_PROPERTIES_AMD;
    pNext: void*;
    shaderEngineCount: u32;
    shaderArraysPerEngineCount: u32;
    computeUnitsPerShaderArray: u32;
    simdPerComputeUnit: u32;
    wavefrontsPerSimd: u32;
    wavefrontSize: u32;
    sgprsPerSimd: u32;
    minSgprAllocation: u32;
    maxSgprAllocation: u32;
    sgprAllocationGranularity: u32;
    vgprsPerSimd: u32;
    minVgprAllocation: u32;
    maxVgprAllocation: u32;
    vgprAllocationGranularity: u32;
}

enum VkMemoryOverallocationBehaviorAMD {
    VK_MEMORY_OVERALLOCATION_BEHAVIOR_DEFAULT_AMD = 0;
    VK_MEMORY_OVERALLOCATION_BEHAVIOR_ALLOWED_AMD = 1;
    VK_MEMORY_OVERALLOCATION_BEHAVIOR_DISALLOWED_AMD = 2;
    VK_MEMORY_OVERALLOCATION_BEHAVIOR_MAX_ENUM_AMD = 0x7FFFFFFF;
}

struct VkDeviceMemoryOverallocationCreateInfoAMD {
    sType := VkStructureType.VK_STRUCTURE_TYPE_DEVICE_MEMORY_OVERALLOCATION_CREATE_INFO_AMD;
    pNext: void*;
    overallocationBehavior: VkMemoryOverallocationBehaviorAMD;
}

struct VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT {
    sType := VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_ATTRIBUTE_DIVISOR_PROPERTIES_EXT;
    pNext: void*;
    maxVertexAttribDivisor: u32;
}

struct VkVertexInputBindingDivisorDescriptionEXT {
    binding: u32;
    divisor: u32;
}

struct VkPipelineVertexInputDivisorStateCreateInfoEXT {
    sType := VkStructureType.VK_STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_DIVISOR_STATE_CREATE_INFO_EXT;
    pNext: void*;
    vertexBindingDivisorCount: u32;
    pVertexBindingDivisors: VkVertexInputBindingDivisorDescriptionEXT*;
}

struct VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT {
    sType := VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_ATTRIBUTE_DIVISOR_FEATURES_EXT;
    pNext: void*;
    vertexAttributeInstanceRateDivisor: u32;
    vertexAttributeInstanceRateZeroDivisor: u32;
}

enum VkPipelineCreationFeedbackFlagBitsEXT {
    VK_PIPELINE_CREATION_FEEDBACK_VALID_BIT_EXT = 0x00000001;
    VK_PIPELINE_CREATION_FEEDBACK_APPLICATION_PIPELINE_CACHE_HIT_BIT_EXT = 0x00000002;
    VK_PIPELINE_CREATION_FEEDBACK_BASE_PIPELINE_ACCELERATION_BIT_EXT = 0x00000004;
    VK_PIPELINE_CREATION_FEEDBACK_FLAG_BITS_MAX_ENUM_EXT = 0x7FFFFFFF;
}

struct VkPipelineCreationFeedbackEXT {
    flags: u32;
    duration: u64;
}

struct VkPipelineCreationFeedbackCreateInfoEXT {
    sType := VkStructureType.VK_STRUCTURE_TYPE_PIPELINE_CREATION_FEEDBACK_CREATE_INFO_EXT;
    pNext: void*;
    pPipelineCreationFeedback: VkPipelineCreationFeedbackEXT*;
    pipelineStageCreationFeedbackCount: u32;
    pPipelineStageCreationFeedbacks: VkPipelineCreationFeedbackEXT*;
}

struct VkPhysicalDeviceComputeShaderDerivativesFeaturesNV {
    sType := VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COMPUTE_SHADER_DERIVATIVES_FEATURES_NV;
    pNext: void*;
    computeDerivativeGroupQuads: u32;
    computeDerivativeGroupLinear: u32;
}

struct VkPhysicalDeviceMeshShaderFeaturesNV {
    sType := VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MESH_SHADER_FEATURES_NV;
    pNext: void*;
    taskShader: u32;
    meshShader: u32;
}

struct VkPhysicalDeviceMeshShaderPropertiesNV {
    sType := VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MESH_SHADER_PROPERTIES_NV;
    pNext: void*;
    maxDrawMeshTasksCount: u32;
    maxTaskWorkGroupInvocations: u32;
    maxTaskWorkGroupSize: CArray<u32>[3];
    maxTaskTotalMemorySize: u32;
    maxTaskOutputCount: u32;
    maxMeshWorkGroupInvocations: u32;
    maxMeshWorkGroupSize: CArray<u32>[3];
    maxMeshTotalMemorySize: u32;
    maxMeshOutputVertices: u32;
    maxMeshOutputPrimitives: u32;
    maxMeshMultiviewViewCount: u32;
    meshOutputPerVertexGranularity: u32;
    meshOutputPerPrimitiveGranularity: u32;
}

struct VkDrawMeshTasksIndirectCommandNV {
    taskCount: u32;
    firstTask: u32;
}

interface PFN_vkCmdDrawMeshTasksNV(VkCommandBuffer* commandBuffer, u32 taskCount, u32 firstTask)

interface PFN_vkCmdDrawMeshTasksIndirectNV(VkCommandBuffer* commandBuffer, VkBuffer* buffer, u64 offset, u32 drawCount, u32 stride)

interface PFN_vkCmdDrawMeshTasksIndirectCountNV(VkCommandBuffer* commandBuffer, VkBuffer* buffer, u64 offset, VkBuffer* countBuffer, u64 countBufferOffset, u32 maxDrawCount, u32 stride)

vkCmdDrawMeshTasksNV(VkCommandBuffer* commandBuffer, u32 taskCount, u32 firstTask) #extern vulkan

vkCmdDrawMeshTasksIndirectNV(VkCommandBuffer* commandBuffer, VkBuffer* buffer, u64 offset, u32 drawCount, u32 stride) #extern vulkan

vkCmdDrawMeshTasksIndirectCountNV(VkCommandBuffer* commandBuffer, VkBuffer* buffer, u64 offset, VkBuffer* countBuffer, u64 countBufferOffset, u32 maxDrawCount, u32 stride) #extern vulkan

struct VkPhysicalDeviceFragmentShaderBarycentricFeaturesNV {
    sType := VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADER_BARYCENTRIC_FEATURES_NV;
    pNext: void*;
    fragmentShaderBarycentric: u32;
}

struct VkPhysicalDeviceShaderImageFootprintFeaturesNV {
    sType := VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_IMAGE_FOOTPRINT_FEATURES_NV;
    pNext: void*;
    imageFootprint: u32;
}

struct VkPipelineViewportExclusiveScissorStateCreateInfoNV {
    sType := VkStructureType.VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_EXCLUSIVE_SCISSOR_STATE_CREATE_INFO_NV;
    pNext: void*;
    exclusiveScissorCount: u32;
    pExclusiveScissors: VkRect2D*;
}

struct VkPhysicalDeviceExclusiveScissorFeaturesNV {
    sType := VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXCLUSIVE_SCISSOR_FEATURES_NV;
    pNext: void*;
    exclusiveScissor: u32;
}

interface PFN_vkCmdSetExclusiveScissorNV(VkCommandBuffer* commandBuffer, u32 firstExclusiveScissor, u32 exclusiveScissorCount, VkRect2D* pExclusiveScissors)

vkCmdSetExclusiveScissorNV(VkCommandBuffer* commandBuffer, u32 firstExclusiveScissor, u32 exclusiveScissorCount, VkRect2D* pExclusiveScissors) #extern vulkan

struct VkQueueFamilyCheckpointPropertiesNV {
    sType := VkStructureType.VK_STRUCTURE_TYPE_QUEUE_FAMILY_CHECKPOINT_PROPERTIES_NV;
    pNext: void*;
    checkpointExecutionStageMask: u32;
}

struct VkCheckpointDataNV {
    sType := VkStructureType.VK_STRUCTURE_TYPE_CHECKPOINT_DATA_NV;
    pNext: void*;
    stage: VkPipelineStageFlagBits;
    pCheckpointMarker: void*;
}

interface PFN_vkCmdSetCheckpointNV(VkCommandBuffer* commandBuffer, void* pCheckpointMarker)

interface PFN_vkGetQueueCheckpointDataNV(VkQueue* queue, u32* pCheckpointDataCount, VkCheckpointDataNV* pCheckpointData)

vkCmdSetCheckpointNV(VkCommandBuffer* commandBuffer, void* pCheckpointMarker) #extern vulkan

vkGetQueueCheckpointDataNV(VkQueue* queue, u32* pCheckpointDataCount, VkCheckpointDataNV* pCheckpointData) #extern vulkan

struct VkPhysicalDeviceShaderIntegerFunctions2FeaturesINTEL {
    sType := VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_INTEGER_FUNCTIONS_2_FEATURES_INTEL;
    pNext: void*;
    shaderIntegerFunctions2: u32;
}

struct VkPerformanceConfigurationINTEL {}
enum VkPerformanceConfigurationTypeINTEL {
    VK_PERFORMANCE_CONFIGURATION_TYPE_COMMAND_QUEUE_METRICS_DISCOVERY_ACTIVATED_INTEL = 0;
    VK_PERFORMANCE_CONFIGURATION_TYPE_MAX_ENUM_INTEL = 0x7FFFFFFF;
}

enum VkQueryPoolSamplingModeINTEL {
    VK_QUERY_POOL_SAMPLING_MODE_MANUAL_INTEL = 0;
    VK_QUERY_POOL_SAMPLING_MODE_MAX_ENUM_INTEL = 0x7FFFFFFF;
}

enum VkPerformanceOverrideTypeINTEL {
    VK_PERFORMANCE_OVERRIDE_TYPE_NULL_HARDWARE_INTEL = 0;
    VK_PERFORMANCE_OVERRIDE_TYPE_FLUSH_GPU_CACHES_INTEL = 1;
    VK_PERFORMANCE_OVERRIDE_TYPE_MAX_ENUM_INTEL = 0x7FFFFFFF;
}

enum VkPerformanceParameterTypeINTEL {
    VK_PERFORMANCE_PARAMETER_TYPE_HW_COUNTERS_SUPPORTED_INTEL = 0;
    VK_PERFORMANCE_PARAMETER_TYPE_STREAM_MARKER_VALID_BITS_INTEL = 1;
    VK_PERFORMANCE_PARAMETER_TYPE_MAX_ENUM_INTEL = 0x7FFFFFFF;
}

enum VkPerformanceValueTypeINTEL {
    VK_PERFORMANCE_VALUE_TYPE_UINT32_INTEL = 0;
    VK_PERFORMANCE_VALUE_TYPE_UINT64_INTEL = 1;
    VK_PERFORMANCE_VALUE_TYPE_FLOAT_INTEL = 2;
    VK_PERFORMANCE_VALUE_TYPE_BOOL_INTEL = 3;
    VK_PERFORMANCE_VALUE_TYPE_STRING_INTEL = 4;
    VK_PERFORMANCE_VALUE_TYPE_MAX_ENUM_INTEL = 0x7FFFFFFF;
}

union VkPerformanceValueDataINTEL {
    value32: u32;
    value64: u64;
    valueFloat: float;
    valueBool: u32;
    valueString: u8*;
}

struct VkPerformanceValueINTEL {
    type: VkPerformanceValueTypeINTEL;
    data: VkPerformanceValueDataINTEL;
}

struct VkInitializePerformanceApiInfoINTEL {
    sType := VkStructureType.VK_STRUCTURE_TYPE_INITIALIZE_PERFORMANCE_API_INFO_INTEL;
    pNext: void*;
    pUserData: void*;
}

struct VkQueryPoolPerformanceQueryCreateInfoINTEL {
    sType := VkStructureType.VK_STRUCTURE_TYPE_QUERY_POOL_PERFORMANCE_QUERY_CREATE_INFO_INTEL;
    pNext: void*;
    performanceCountersSampling: VkQueryPoolSamplingModeINTEL;
}

struct VkPerformanceMarkerInfoINTEL {
    sType := VkStructureType.VK_STRUCTURE_TYPE_PERFORMANCE_MARKER_INFO_INTEL;
    pNext: void*;
    marker: u64;
}

struct VkPerformanceStreamMarkerInfoINTEL {
    sType := VkStructureType.VK_STRUCTURE_TYPE_PERFORMANCE_STREAM_MARKER_INFO_INTEL;
    pNext: void*;
    marker: u32;
}

struct VkPerformanceOverrideInfoINTEL {
    sType := VkStructureType.VK_STRUCTURE_TYPE_PERFORMANCE_OVERRIDE_INFO_INTEL;
    pNext: void*;
    type: VkPerformanceOverrideTypeINTEL;
    enable: u32;
    parameter: u64;
}

struct VkPerformanceConfigurationAcquireInfoINTEL {
    sType := VkStructureType.VK_STRUCTURE_TYPE_PERFORMANCE_CONFIGURATION_ACQUIRE_INFO_INTEL;
    pNext: void*;
    type: VkPerformanceConfigurationTypeINTEL;
}

interface VkResult PFN_vkInitializePerformanceApiINTEL(VkDevice* device, VkInitializePerformanceApiInfoINTEL* pInitializeInfo)

interface PFN_vkUninitializePerformanceApiINTEL(VkDevice* device)

interface VkResult PFN_vkCmdSetPerformanceMarkerINTEL(VkCommandBuffer* commandBuffer, VkPerformanceMarkerInfoINTEL* pMarkerInfo)

interface VkResult PFN_vkCmdSetPerformanceStreamMarkerINTEL(VkCommandBuffer* commandBuffer, VkPerformanceStreamMarkerInfoINTEL* pMarkerInfo)

interface VkResult PFN_vkCmdSetPerformanceOverrideINTEL(VkCommandBuffer* commandBuffer, VkPerformanceOverrideInfoINTEL* pOverrideInfo)

interface VkResult PFN_vkAcquirePerformanceConfigurationINTEL(VkDevice* device, VkPerformanceConfigurationAcquireInfoINTEL* pAcquireInfo, VkPerformanceConfigurationINTEL** pConfiguration)

interface VkResult PFN_vkReleasePerformanceConfigurationINTEL(VkDevice* device, VkPerformanceConfigurationINTEL* configuration)

interface VkResult PFN_vkQueueSetPerformanceConfigurationINTEL(VkQueue* queue, VkPerformanceConfigurationINTEL* configuration)

interface VkResult PFN_vkGetPerformanceParameterINTEL(VkDevice* device, VkPerformanceParameterTypeINTEL parameter, VkPerformanceValueINTEL* pValue)

VkResult vkInitializePerformanceApiINTEL(VkDevice* device, VkInitializePerformanceApiInfoINTEL* pInitializeInfo) #extern vulkan

vkUninitializePerformanceApiINTEL(VkDevice* device) #extern vulkan

VkResult vkCmdSetPerformanceMarkerINTEL(VkCommandBuffer* commandBuffer, VkPerformanceMarkerInfoINTEL* pMarkerInfo) #extern vulkan

VkResult vkCmdSetPerformanceStreamMarkerINTEL(VkCommandBuffer* commandBuffer, VkPerformanceStreamMarkerInfoINTEL* pMarkerInfo) #extern vulkan

VkResult vkCmdSetPerformanceOverrideINTEL(VkCommandBuffer* commandBuffer, VkPerformanceOverrideInfoINTEL* pOverrideInfo) #extern vulkan

VkResult vkAcquirePerformanceConfigurationINTEL(VkDevice* device, VkPerformanceConfigurationAcquireInfoINTEL* pAcquireInfo, VkPerformanceConfigurationINTEL** pConfiguration) #extern vulkan

VkResult vkReleasePerformanceConfigurationINTEL(VkDevice* device, VkPerformanceConfigurationINTEL* configuration) #extern vulkan

VkResult vkQueueSetPerformanceConfigurationINTEL(VkQueue* queue, VkPerformanceConfigurationINTEL* configuration) #extern vulkan

VkResult vkGetPerformanceParameterINTEL(VkDevice* device, VkPerformanceParameterTypeINTEL parameter, VkPerformanceValueINTEL* pValue) #extern vulkan

struct VkPhysicalDevicePCIBusInfoPropertiesEXT {
    sType := VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PCI_BUS_INFO_PROPERTIES_EXT;
    pNext: void*;
    pciDomain: u32;
    pciBus: u32;
    pciDevice: u32;
    pciFunction: u32;
}

struct VkDisplayNativeHdrSurfaceCapabilitiesAMD {
    sType := VkStructureType.VK_STRUCTURE_TYPE_DISPLAY_NATIVE_HDR_SURFACE_CAPABILITIES_AMD;
    pNext: void*;
    localDimmingSupport: u32;
}

struct VkSwapchainDisplayNativeHdrCreateInfoAMD {
    sType := VkStructureType.VK_STRUCTURE_TYPE_SWAPCHAIN_DISPLAY_NATIVE_HDR_CREATE_INFO_AMD;
    pNext: void*;
    localDimmingEnable: u32;
}

interface PFN_vkSetLocalDimmingAMD(VkDevice* device, VkSwapchainKHR* swapChain, u32 localDimmingEnable)

vkSetLocalDimmingAMD(VkDevice* device, VkSwapchainKHR* swapChain, u32 localDimmingEnable) #extern vulkan

struct VkPhysicalDeviceFragmentDensityMapFeaturesEXT {
    sType := VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_FEATURES_EXT;
    pNext: void*;
    fragmentDensityMap: u32;
    fragmentDensityMapDynamic: u32;
    fragmentDensityMapNonSubsampledImages: u32;
}

struct VkPhysicalDeviceFragmentDensityMapPropertiesEXT {
    sType := VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_PROPERTIES_EXT;
    pNext: void*;
    minFragmentDensityTexelSize: VkExtent2D;
    maxFragmentDensityTexelSize: VkExtent2D;
    fragmentDensityInvocations: u32;
}

struct VkRenderPassFragmentDensityMapCreateInfoEXT {
    sType := VkStructureType.VK_STRUCTURE_TYPE_RENDER_PASS_FRAGMENT_DENSITY_MAP_CREATE_INFO_EXT;
    pNext: void*;
    fragmentDensityMapAttachment: VkAttachmentReference;
}

struct VkPhysicalDeviceSubgroupSizeControlFeaturesEXT {
    sType := VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_SIZE_CONTROL_FEATURES_EXT;
    pNext: void*;
    subgroupSizeControl: u32;
    computeFullSubgroups: u32;
}

struct VkPhysicalDeviceSubgroupSizeControlPropertiesEXT {
    sType := VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_SIZE_CONTROL_PROPERTIES_EXT;
    pNext: void*;
    minSubgroupSize: u32;
    maxSubgroupSize: u32;
    maxComputeWorkgroupSubgroups: u32;
    requiredSubgroupSizeStages: u32;
}

struct VkPipelineShaderStageRequiredSubgroupSizeCreateInfoEXT {
    sType := VkStructureType.VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_REQUIRED_SUBGROUP_SIZE_CREATE_INFO_EXT;
    pNext: void*;
    requiredSubgroupSize: u32;
}

enum VkShaderCorePropertiesFlagBitsAMD {
    VK_SHADER_CORE_PROPERTIES_FLAG_BITS_MAX_ENUM_AMD = 0x7FFFFFFF;
}

struct VkPhysicalDeviceShaderCoreProperties2AMD {
    sType := VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CORE_PROPERTIES_2_AMD;
    pNext: void*;
    shaderCoreFeatures: u32;
    activeComputeUnitCount: u32;
}

struct VkPhysicalDeviceCoherentMemoryFeaturesAMD {
    sType := VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COHERENT_MEMORY_FEATURES_AMD;
    pNext: void*;
    deviceCoherentMemory: u32;
}

struct VkPhysicalDeviceShaderImageAtomicInt64FeaturesEXT {
    sType := VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_IMAGE_ATOMIC_INT64_FEATURES_EXT;
    pNext: void*;
    shaderImageInt64Atomics: u32;
    sparseImageInt64Atomics: u32;
}

struct VkPhysicalDeviceMemoryBudgetPropertiesEXT {
    sType := VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_BUDGET_PROPERTIES_EXT;
    pNext: void*;
    heapBudget: CArray<u64>[16];
    heapUsage: CArray<u64>[16];
}

struct VkPhysicalDeviceMemoryPriorityFeaturesEXT {
    sType := VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_PRIORITY_FEATURES_EXT;
    pNext: void*;
    memoryPriority: u32;
}

struct VkMemoryPriorityAllocateInfoEXT {
    sType := VkStructureType.VK_STRUCTURE_TYPE_MEMORY_PRIORITY_ALLOCATE_INFO_EXT;
    pNext: void*;
    priority: float;
}

struct VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV {
    sType := VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEDICATED_ALLOCATION_IMAGE_ALIASING_FEATURES_NV;
    pNext: void*;
    dedicatedAllocationImageAliasing: u32;
}

struct VkPhysicalDeviceBufferDeviceAddressFeaturesEXT {
    sType := VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_DEVICE_ADDRESS_FEATURES_EXT;
    pNext: void*;
    bufferDeviceAddress: u32;
    bufferDeviceAddressCaptureReplay: u32;
    bufferDeviceAddressMultiDevice: u32;
}

struct VkBufferDeviceAddressCreateInfoEXT {
    sType := VkStructureType.VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_CREATE_INFO_EXT;
    pNext: void*;
    deviceAddress: u64;
}

interface u64 PFN_vkGetBufferDeviceAddressEXT(VkDevice* device, VkBufferDeviceAddressInfo* pInfo)

u64 vkGetBufferDeviceAddressEXT(VkDevice* device, VkBufferDeviceAddressInfo* pInfo) #extern vulkan

enum VkToolPurposeFlagBitsEXT {
    VK_TOOL_PURPOSE_VALIDATION_BIT_EXT = 0x00000001;
    VK_TOOL_PURPOSE_PROFILING_BIT_EXT = 0x00000002;
    VK_TOOL_PURPOSE_TRACING_BIT_EXT = 0x00000004;
    VK_TOOL_PURPOSE_ADDITIONAL_FEATURES_BIT_EXT = 0x00000008;
    VK_TOOL_PURPOSE_MODIFYING_FEATURES_BIT_EXT = 0x00000010;
    VK_TOOL_PURPOSE_DEBUG_REPORTING_BIT_EXT = 0x00000020;
    VK_TOOL_PURPOSE_DEBUG_MARKERS_BIT_EXT = 0x00000040;
    VK_TOOL_PURPOSE_FLAG_BITS_MAX_ENUM_EXT = 0x7FFFFFFF;
}

struct VkPhysicalDeviceToolPropertiesEXT {
    sType := VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TOOL_PROPERTIES_EXT;
    pNext: void*;
    name: CArray<u8>[256];
    version: CArray<u8>[256];
    purposes: u32;
    description: CArray<u8>[256];
    layer: CArray<u8>[256];
}

interface VkResult PFN_vkGetPhysicalDeviceToolPropertiesEXT(VkPhysicalDevice* physicalDevice, u32* pToolCount, VkPhysicalDeviceToolPropertiesEXT* pToolProperties)

VkResult vkGetPhysicalDeviceToolPropertiesEXT(VkPhysicalDevice* physicalDevice, u32* pToolCount, VkPhysicalDeviceToolPropertiesEXT* pToolProperties) #extern vulkan

enum VkValidationFeatureEnableEXT {
    VK_VALIDATION_FEATURE_ENABLE_GPU_ASSISTED_EXT = 0;
    VK_VALIDATION_FEATURE_ENABLE_GPU_ASSISTED_RESERVE_BINDING_SLOT_EXT = 1;
    VK_VALIDATION_FEATURE_ENABLE_BEST_PRACTICES_EXT = 2;
    VK_VALIDATION_FEATURE_ENABLE_DEBUG_PRINTF_EXT = 3;
    VK_VALIDATION_FEATURE_ENABLE_SYNCHRONIZATION_VALIDATION_EXT = 4;
    VK_VALIDATION_FEATURE_ENABLE_MAX_ENUM_EXT = 0x7FFFFFFF;
}

enum VkValidationFeatureDisableEXT {
    VK_VALIDATION_FEATURE_DISABLE_ALL_EXT = 0;
    VK_VALIDATION_FEATURE_DISABLE_SHADERS_EXT = 1;
    VK_VALIDATION_FEATURE_DISABLE_THREAD_SAFETY_EXT = 2;
    VK_VALIDATION_FEATURE_DISABLE_API_PARAMETERS_EXT = 3;
    VK_VALIDATION_FEATURE_DISABLE_OBJECT_LIFETIMES_EXT = 4;
    VK_VALIDATION_FEATURE_DISABLE_CORE_CHECKS_EXT = 5;
    VK_VALIDATION_FEATURE_DISABLE_UNIQUE_HANDLES_EXT = 6;
    VK_VALIDATION_FEATURE_DISABLE_SHADER_VALIDATION_CACHE_EXT = 7;
    VK_VALIDATION_FEATURE_DISABLE_MAX_ENUM_EXT = 0x7FFFFFFF;
}

struct VkValidationFeaturesEXT {
    sType := VkStructureType.VK_STRUCTURE_TYPE_VALIDATION_FEATURES_EXT;
    pNext: void*;
    enabledValidationFeatureCount: u32;
    pEnabledValidationFeatures: VkValidationFeatureEnableEXT*;
    disabledValidationFeatureCount: u32;
    pDisabledValidationFeatures: VkValidationFeatureDisableEXT*;
}

enum VkComponentTypeNV {
    VK_COMPONENT_TYPE_FLOAT16_NV = 0;
    VK_COMPONENT_TYPE_FLOAT32_NV = 1;
    VK_COMPONENT_TYPE_FLOAT64_NV = 2;
    VK_COMPONENT_TYPE_SINT8_NV = 3;
    VK_COMPONENT_TYPE_SINT16_NV = 4;
    VK_COMPONENT_TYPE_SINT32_NV = 5;
    VK_COMPONENT_TYPE_SINT64_NV = 6;
    VK_COMPONENT_TYPE_UINT8_NV = 7;
    VK_COMPONENT_TYPE_UINT16_NV = 8;
    VK_COMPONENT_TYPE_UINT32_NV = 9;
    VK_COMPONENT_TYPE_UINT64_NV = 10;
    VK_COMPONENT_TYPE_MAX_ENUM_NV = 0x7FFFFFFF;
}

enum VkScopeNV {
    VK_SCOPE_DEVICE_NV = 1;
    VK_SCOPE_WORKGROUP_NV = 2;
    VK_SCOPE_SUBGROUP_NV = 3;
    VK_SCOPE_QUEUE_FAMILY_NV = 5;
    VK_SCOPE_MAX_ENUM_NV = 0x7FFFFFFF;
}

struct VkCooperativeMatrixPropertiesNV {
    sType := VkStructureType.VK_STRUCTURE_TYPE_COOPERATIVE_MATRIX_PROPERTIES_NV;
    pNext: void*;
    MSize: u32;
    NSize: u32;
    KSize: u32;
    AType: VkComponentTypeNV;
    BType: VkComponentTypeNV;
    CType: VkComponentTypeNV;
    DType: VkComponentTypeNV;
    scope: VkScopeNV;
}

struct VkPhysicalDeviceCooperativeMatrixFeaturesNV {
    sType := VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COOPERATIVE_MATRIX_FEATURES_NV;
    pNext: void*;
    cooperativeMatrix: u32;
    cooperativeMatrixRobustBufferAccess: u32;
}

struct VkPhysicalDeviceCooperativeMatrixPropertiesNV {
    sType := VkStructureType.VK_STRUCTURE_TYPE_COOPERATIVE_MATRIX_PROPERTIES_NV;
    pNext: void*;
    cooperativeMatrixSupportedStages: u32;
}

interface VkResult PFN_vkGetPhysicalDeviceCooperativeMatrixPropertiesNV(VkPhysicalDevice* physicalDevice, u32* pPropertyCount, VkCooperativeMatrixPropertiesNV* pProperties)

VkResult vkGetPhysicalDeviceCooperativeMatrixPropertiesNV(VkPhysicalDevice* physicalDevice, u32* pPropertyCount, VkCooperativeMatrixPropertiesNV* pProperties) #extern vulkan

enum VkCoverageReductionModeNV {
    VK_COVERAGE_REDUCTION_MODE_MERGE_NV = 0;
    VK_COVERAGE_REDUCTION_MODE_TRUNCATE_NV = 1;
    VK_COVERAGE_REDUCTION_MODE_MAX_ENUM_NV = 0x7FFFFFFF;
}

struct VkPhysicalDeviceCoverageReductionModeFeaturesNV {
    sType := VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COVERAGE_REDUCTION_MODE_FEATURES_NV;
    pNext: void*;
    coverageReductionMode: u32;
}

struct VkPipelineCoverageReductionStateCreateInfoNV {
    sType := VkStructureType.VK_STRUCTURE_TYPE_PIPELINE_COVERAGE_REDUCTION_STATE_CREATE_INFO_NV;
    pNext: void*;
    flags: u32;
    coverageReductionMode: VkCoverageReductionModeNV;
}

struct VkFramebufferMixedSamplesCombinationNV {
    sType := VkStructureType.VK_STRUCTURE_TYPE_FRAMEBUFFER_MIXED_SAMPLES_COMBINATION_NV;
    pNext: void*;
    coverageReductionMode: VkCoverageReductionModeNV;
    rasterizationSamples: VkSampleCountFlagBits;
    depthStencilSamples: u32;
    colorSamples: u32;
}

interface VkResult PFN_vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV(VkPhysicalDevice* physicalDevice, u32* pCombinationCount, VkFramebufferMixedSamplesCombinationNV* pCombinations)

VkResult vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV(VkPhysicalDevice* physicalDevice, u32* pCombinationCount, VkFramebufferMixedSamplesCombinationNV* pCombinations) #extern vulkan

struct VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT {
    sType := VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADER_INTERLOCK_FEATURES_EXT;
    pNext: void*;
    fragmentShaderSampleInterlock: u32;
    fragmentShaderPixelInterlock: u32;
    fragmentShaderShadingRateInterlock: u32;
}

struct VkPhysicalDeviceYcbcrImageArraysFeaturesEXT {
    sType := VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_YCBCR_IMAGE_ARRAYS_FEATURES_EXT;
    pNext: void*;
    ycbcrImageArrays: u32;
}

enum VkProvokingVertexModeEXT {
    VK_PROVOKING_VERTEX_MODE_FIRST_VERTEX_EXT = 0;
    VK_PROVOKING_VERTEX_MODE_LAST_VERTEX_EXT = 1;
    VK_PROVOKING_VERTEX_MODE_MAX_ENUM_EXT = 0x7FFFFFFF;
}

struct VkPhysicalDeviceProvokingVertexFeaturesEXT {
    sType := VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROVOKING_VERTEX_FEATURES_EXT;
    pNext: void*;
    provokingVertexLast: u32;
    transformFeedbackPreservesProvokingVertex: u32;
}

struct VkPhysicalDeviceProvokingVertexPropertiesEXT {
    sType := VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROVOKING_VERTEX_PROPERTIES_EXT;
    pNext: void*;
    provokingVertexModePerPipeline: u32;
    transformFeedbackPreservesTriangleFanProvokingVertex: u32;
}

struct VkPipelineRasterizationProvokingVertexStateCreateInfoEXT {
    sType := VkStructureType.VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_PROVOKING_VERTEX_STATE_CREATE_INFO_EXT;
    pNext: void*;
    provokingVertexMode: VkProvokingVertexModeEXT;
}

struct VkHeadlessSurfaceCreateInfoEXT {
    sType := VkStructureType.VK_STRUCTURE_TYPE_HEADLESS_SURFACE_CREATE_INFO_EXT;
    pNext: void*;
    flags: u32;
}

interface VkResult PFN_vkCreateHeadlessSurfaceEXT(VkInstance* instance, VkHeadlessSurfaceCreateInfoEXT* pCreateInfo, VkAllocationCallbacks* pAllocator, VkSurfaceKHR** pSurface)

VkResult vkCreateHeadlessSurfaceEXT(VkInstance* instance, VkHeadlessSurfaceCreateInfoEXT* pCreateInfo, VkAllocationCallbacks* pAllocator, VkSurfaceKHR** pSurface) #extern vulkan

enum VkLineRasterizationModeEXT {
    VK_LINE_RASTERIZATION_MODE_DEFAULT_EXT = 0;
    VK_LINE_RASTERIZATION_MODE_RECTANGULAR_EXT = 1;
    VK_LINE_RASTERIZATION_MODE_BRESENHAM_EXT = 2;
    VK_LINE_RASTERIZATION_MODE_RECTANGULAR_SMOOTH_EXT = 3;
    VK_LINE_RASTERIZATION_MODE_MAX_ENUM_EXT = 0x7FFFFFFF;
}

struct VkPhysicalDeviceLineRasterizationFeaturesEXT {
    sType := VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LINE_RASTERIZATION_FEATURES_EXT;
    pNext: void*;
    rectangularLines: u32;
    bresenhamLines: u32;
    smoothLines: u32;
    stippledRectangularLines: u32;
    stippledBresenhamLines: u32;
    stippledSmoothLines: u32;
}

struct VkPhysicalDeviceLineRasterizationPropertiesEXT {
    sType := VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LINE_RASTERIZATION_PROPERTIES_EXT;
    pNext: void*;
    lineSubPixelPrecisionBits: u32;
}

struct VkPipelineRasterizationLineStateCreateInfoEXT {
    sType := VkStructureType.VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_LINE_STATE_CREATE_INFO_EXT;
    pNext: void*;
    lineRasterizationMode: VkLineRasterizationModeEXT;
    stippledLineEnable: u32;
    lineStippleFactor: u32;
    lineStipplePattern: u16;
}

interface PFN_vkCmdSetLineStippleEXT(VkCommandBuffer* commandBuffer, u32 lineStippleFactor, u16 lineStipplePattern)

vkCmdSetLineStippleEXT(VkCommandBuffer* commandBuffer, u32 lineStippleFactor, u16 lineStipplePattern) #extern vulkan

struct VkPhysicalDeviceShaderAtomicFloatFeaturesEXT {
    sType := VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_FLOAT_FEATURES_EXT;
    pNext: void*;
    shaderBufferFloat32Atomics: u32;
    shaderBufferFloat32AtomicAdd: u32;
    shaderBufferFloat64Atomics: u32;
    shaderBufferFloat64AtomicAdd: u32;
    shaderSharedFloat32Atomics: u32;
    shaderSharedFloat32AtomicAdd: u32;
    shaderSharedFloat64Atomics: u32;
    shaderSharedFloat64AtomicAdd: u32;
    shaderImageFloat32Atomics: u32;
    shaderImageFloat32AtomicAdd: u32;
    sparseImageFloat32Atomics: u32;
    sparseImageFloat32AtomicAdd: u32;
}

interface PFN_vkResetQueryPoolEXT(VkDevice* device, VkQueryPool* queryPool, u32 firstQuery, u32 queryCount)

vkResetQueryPoolEXT(VkDevice* device, VkQueryPool* queryPool, u32 firstQuery, u32 queryCount) #extern vulkan

struct VkPhysicalDeviceIndexTypeUint8FeaturesEXT {
    sType := VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INDEX_TYPE_UINT8_FEATURES_EXT;
    pNext: void*;
    indexTypeUint8: u32;
}

struct VkPhysicalDeviceExtendedDynamicStateFeaturesEXT {
    sType := VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTENDED_DYNAMIC_STATE_FEATURES_EXT;
    pNext: void*;
    extendedDynamicState: u32;
}

interface PFN_vkCmdSetCullModeEXT(VkCommandBuffer* commandBuffer, u32 cullMode)

interface PFN_vkCmdSetFrontFaceEXT(VkCommandBuffer* commandBuffer, VkFrontFace frontFace)

interface PFN_vkCmdSetPrimitiveTopologyEXT(VkCommandBuffer* commandBuffer, VkPrimitiveTopology primitiveTopology)

interface PFN_vkCmdSetViewportWithCountEXT(VkCommandBuffer* commandBuffer, u32 viewportCount, VkViewport* pViewports)

interface PFN_vkCmdSetScissorWithCountEXT(VkCommandBuffer* commandBuffer, u32 scissorCount, VkRect2D* pScissors)

interface PFN_vkCmdBindVertexBuffers2EXT(VkCommandBuffer* commandBuffer, u32 firstBinding, u32 bindingCount, VkBuffer** pBuffers, u64* pOffsets, u64* pSizes, u64* pStrides)

interface PFN_vkCmdSetDepthTestEnableEXT(VkCommandBuffer* commandBuffer, u32 depthTestEnable)

interface PFN_vkCmdSetDepthWriteEnableEXT(VkCommandBuffer* commandBuffer, u32 depthWriteEnable)

interface PFN_vkCmdSetDepthCompareOpEXT(VkCommandBuffer* commandBuffer, VkCompareOp depthCompareOp)

interface PFN_vkCmdSetDepthBoundsTestEnableEXT(VkCommandBuffer* commandBuffer, u32 depthBoundsTestEnable)

interface PFN_vkCmdSetStencilTestEnableEXT(VkCommandBuffer* commandBuffer, u32 stencilTestEnable)

interface PFN_vkCmdSetStencilOpEXT(VkCommandBuffer* commandBuffer, u32 faceMask, VkStencilOp failOp, VkStencilOp passOp, VkStencilOp depthFailOp, VkCompareOp compareOp)

vkCmdSetCullModeEXT(VkCommandBuffer* commandBuffer, u32 cullMode) #extern vulkan

vkCmdSetFrontFaceEXT(VkCommandBuffer* commandBuffer, VkFrontFace frontFace) #extern vulkan

vkCmdSetPrimitiveTopologyEXT(VkCommandBuffer* commandBuffer, VkPrimitiveTopology primitiveTopology) #extern vulkan

vkCmdSetViewportWithCountEXT(VkCommandBuffer* commandBuffer, u32 viewportCount, VkViewport* pViewports) #extern vulkan

vkCmdSetScissorWithCountEXT(VkCommandBuffer* commandBuffer, u32 scissorCount, VkRect2D* pScissors) #extern vulkan

vkCmdBindVertexBuffers2EXT(VkCommandBuffer* commandBuffer, u32 firstBinding, u32 bindingCount, VkBuffer** pBuffers, u64* pOffsets, u64* pSizes, u64* pStrides) #extern vulkan

vkCmdSetDepthTestEnableEXT(VkCommandBuffer* commandBuffer, u32 depthTestEnable) #extern vulkan

vkCmdSetDepthWriteEnableEXT(VkCommandBuffer* commandBuffer, u32 depthWriteEnable) #extern vulkan

vkCmdSetDepthCompareOpEXT(VkCommandBuffer* commandBuffer, VkCompareOp depthCompareOp) #extern vulkan

vkCmdSetDepthBoundsTestEnableEXT(VkCommandBuffer* commandBuffer, u32 depthBoundsTestEnable) #extern vulkan

vkCmdSetStencilTestEnableEXT(VkCommandBuffer* commandBuffer, u32 stencilTestEnable) #extern vulkan

vkCmdSetStencilOpEXT(VkCommandBuffer* commandBuffer, u32 faceMask, VkStencilOp failOp, VkStencilOp passOp, VkStencilOp depthFailOp, VkCompareOp compareOp) #extern vulkan

struct VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT {
    sType := VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_FLOAT_2_FEATURES_EXT;
    pNext: void*;
    shaderBufferFloat16Atomics: u32;
    shaderBufferFloat16AtomicAdd: u32;
    shaderBufferFloat16AtomicMinMax: u32;
    shaderBufferFloat32AtomicMinMax: u32;
    shaderBufferFloat64AtomicMinMax: u32;
    shaderSharedFloat16Atomics: u32;
    shaderSharedFloat16AtomicAdd: u32;
    shaderSharedFloat16AtomicMinMax: u32;
    shaderSharedFloat32AtomicMinMax: u32;
    shaderSharedFloat64AtomicMinMax: u32;
    shaderImageFloat32AtomicMinMax: u32;
    sparseImageFloat32AtomicMinMax: u32;
}

struct VkPhysicalDeviceShaderDemoteToHelperInvocationFeaturesEXT {
    sType := VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DEMOTE_TO_HELPER_INVOCATION_FEATURES_EXT;
    pNext: void*;
    shaderDemoteToHelperInvocation: u32;
}

struct VkIndirectCommandsLayoutNV {}
enum VkIndirectCommandsTokenTypeNV {
    VK_INDIRECT_COMMANDS_TOKEN_TYPE_SHADER_GROUP_NV = 0;
    VK_INDIRECT_COMMANDS_TOKEN_TYPE_STATE_FLAGS_NV = 1;
    VK_INDIRECT_COMMANDS_TOKEN_TYPE_INDEX_BUFFER_NV = 2;
    VK_INDIRECT_COMMANDS_TOKEN_TYPE_VERTEX_BUFFER_NV = 3;
    VK_INDIRECT_COMMANDS_TOKEN_TYPE_PUSH_CONSTANT_NV = 4;
    VK_INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_INDEXED_NV = 5;
    VK_INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_NV = 6;
    VK_INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_TASKS_NV = 7;
    VK_INDIRECT_COMMANDS_TOKEN_TYPE_MAX_ENUM_NV = 0x7FFFFFFF;
}

enum VkIndirectStateFlagBitsNV {
    VK_INDIRECT_STATE_FLAG_FRONTFACE_BIT_NV = 0x00000001;
    VK_INDIRECT_STATE_FLAG_BITS_MAX_ENUM_NV = 0x7FFFFFFF;
}

enum VkIndirectCommandsLayoutUsageFlagBitsNV {
    VK_INDIRECT_COMMANDS_LAYOUT_USAGE_EXPLICIT_PREPROCESS_BIT_NV = 0x00000001;
    VK_INDIRECT_COMMANDS_LAYOUT_USAGE_INDEXED_SEQUENCES_BIT_NV = 0x00000002;
    VK_INDIRECT_COMMANDS_LAYOUT_USAGE_UNORDERED_SEQUENCES_BIT_NV = 0x00000004;
    VK_INDIRECT_COMMANDS_LAYOUT_USAGE_FLAG_BITS_MAX_ENUM_NV = 0x7FFFFFFF;
}

struct VkPhysicalDeviceDeviceGeneratedCommandsPropertiesNV {
    sType := VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEVICE_GENERATED_COMMANDS_PROPERTIES_NV;
    pNext: void*;
    maxGraphicsShaderGroupCount: u32;
    maxIndirectSequenceCount: u32;
    maxIndirectCommandsTokenCount: u32;
    maxIndirectCommandsStreamCount: u32;
    maxIndirectCommandsTokenOffset: u32;
    maxIndirectCommandsStreamStride: u32;
    minSequencesCountBufferOffsetAlignment: u32;
    minSequencesIndexBufferOffsetAlignment: u32;
    minIndirectCommandsBufferOffsetAlignment: u32;
}

struct VkPhysicalDeviceDeviceGeneratedCommandsFeaturesNV {
    sType := VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEVICE_GENERATED_COMMANDS_FEATURES_NV;
    pNext: void*;
    deviceGeneratedCommands: u32;
}

struct VkGraphicsShaderGroupCreateInfoNV {
    sType := VkStructureType.VK_STRUCTURE_TYPE_GRAPHICS_SHADER_GROUP_CREATE_INFO_NV;
    pNext: void*;
    stageCount: u32;
    pStages: VkPipelineShaderStageCreateInfo*;
    pVertexInputState: VkPipelineVertexInputStateCreateInfo*;
    pTessellationState: VkPipelineTessellationStateCreateInfo*;
}

struct VkGraphicsPipelineShaderGroupsCreateInfoNV {
    sType := VkStructureType.VK_STRUCTURE_TYPE_GRAPHICS_PIPELINE_SHADER_GROUPS_CREATE_INFO_NV;
    pNext: void*;
    groupCount: u32;
    pGroups: VkGraphicsShaderGroupCreateInfoNV*;
    pipelineCount: u32;
    pPipelines: VkPipeline**;
}

struct VkBindShaderGroupIndirectCommandNV {
    groupIndex: u32;
}

struct VkBindIndexBufferIndirectCommandNV {
    bufferAddress: u64;
    size: u32;
    indexType: VkIndexType;
}

struct VkBindVertexBufferIndirectCommandNV {
    bufferAddress: u64;
    size: u32;
    stride: u32;
}

struct VkSetStateFlagsIndirectCommandNV {
    data: u32;
}

struct VkIndirectCommandsStreamNV {
    buffer: VkBuffer*;
    offset: u64;
}

struct VkIndirectCommandsLayoutTokenNV {
    sType := VkStructureType.VK_STRUCTURE_TYPE_INDIRECT_COMMANDS_LAYOUT_TOKEN_NV;
    pNext: void*;
    tokenType: VkIndirectCommandsTokenTypeNV;
    stream: u32;
    offset: u32;
    vertexBindingUnit: u32;
    vertexDynamicStride: u32;
    pushconstantPipelineLayout: VkPipelineLayout*;
    pushconstantShaderStageFlags: u32;
    pushconstantOffset: u32;
    pushconstantSize: u32;
    indirectStateFlags: u32;
    indexTypeCount: u32;
    pIndexTypes: VkIndexType*;
    pIndexTypeValues: u32*;
}

struct VkIndirectCommandsLayoutCreateInfoNV {
    sType := VkStructureType.VK_STRUCTURE_TYPE_INDIRECT_COMMANDS_LAYOUT_CREATE_INFO_NV;
    pNext: void*;
    flags: u32;
    pipelineBindPoint: VkPipelineBindPoint;
    tokenCount: u32;
    pTokens: VkIndirectCommandsLayoutTokenNV*;
    streamCount: u32;
    pStreamStrides: u32*;
}

struct VkGeneratedCommandsInfoNV {
    sType := VkStructureType.VK_STRUCTURE_TYPE_GENERATED_COMMANDS_INFO_NV;
    pNext: void*;
    pipelineBindPoint: VkPipelineBindPoint;
    pipeline: VkPipeline*;
    indirectCommandsLayout: VkIndirectCommandsLayoutNV*;
    streamCount: u32;
    pStreams: VkIndirectCommandsStreamNV*;
    sequencesCount: u32;
    preprocessBuffer: VkBuffer*;
    preprocessOffset: u64;
    preprocessSize: u64;
    sequencesCountBuffer: VkBuffer*;
    sequencesCountOffset: u64;
    sequencesIndexBuffer: VkBuffer*;
    sequencesIndexOffset: u64;
}

struct VkGeneratedCommandsMemoryRequirementsInfoNV {
    sType := VkStructureType.VK_STRUCTURE_TYPE_GENERATED_COMMANDS_MEMORY_REQUIREMENTS_INFO_NV;
    pNext: void*;
    pipelineBindPoint: VkPipelineBindPoint;
    pipeline: VkPipeline*;
    indirectCommandsLayout: VkIndirectCommandsLayoutNV*;
    maxSequencesCount: u32;
}

interface PFN_vkGetGeneratedCommandsMemoryRequirementsNV(VkDevice* device, VkGeneratedCommandsMemoryRequirementsInfoNV* pInfo, VkMemoryRequirements2* pMemoryRequirements)

interface PFN_vkCmdPreprocessGeneratedCommandsNV(VkCommandBuffer* commandBuffer, VkGeneratedCommandsInfoNV* pGeneratedCommandsInfo)

interface PFN_vkCmdExecuteGeneratedCommandsNV(VkCommandBuffer* commandBuffer, u32 isPreprocessed, VkGeneratedCommandsInfoNV* pGeneratedCommandsInfo)

interface PFN_vkCmdBindPipelineShaderGroupNV(VkCommandBuffer* commandBuffer, VkPipelineBindPoint pipelineBindPoint, VkPipeline* pipeline, u32 groupIndex)

interface VkResult PFN_vkCreateIndirectCommandsLayoutNV(VkDevice* device, VkIndirectCommandsLayoutCreateInfoNV* pCreateInfo, VkAllocationCallbacks* pAllocator, VkIndirectCommandsLayoutNV** pIndirectCommandsLayout)

interface PFN_vkDestroyIndirectCommandsLayoutNV(VkDevice* device, VkIndirectCommandsLayoutNV* indirectCommandsLayout, VkAllocationCallbacks* pAllocator)

vkGetGeneratedCommandsMemoryRequirementsNV(VkDevice* device, VkGeneratedCommandsMemoryRequirementsInfoNV* pInfo, VkMemoryRequirements2* pMemoryRequirements) #extern vulkan

vkCmdPreprocessGeneratedCommandsNV(VkCommandBuffer* commandBuffer, VkGeneratedCommandsInfoNV* pGeneratedCommandsInfo) #extern vulkan

vkCmdExecuteGeneratedCommandsNV(VkCommandBuffer* commandBuffer, u32 isPreprocessed, VkGeneratedCommandsInfoNV* pGeneratedCommandsInfo) #extern vulkan

vkCmdBindPipelineShaderGroupNV(VkCommandBuffer* commandBuffer, VkPipelineBindPoint pipelineBindPoint, VkPipeline* pipeline, u32 groupIndex) #extern vulkan

VkResult vkCreateIndirectCommandsLayoutNV(VkDevice* device, VkIndirectCommandsLayoutCreateInfoNV* pCreateInfo, VkAllocationCallbacks* pAllocator, VkIndirectCommandsLayoutNV** pIndirectCommandsLayout) #extern vulkan

vkDestroyIndirectCommandsLayoutNV(VkDevice* device, VkIndirectCommandsLayoutNV* indirectCommandsLayout, VkAllocationCallbacks* pAllocator) #extern vulkan

struct VkPhysicalDeviceInheritedViewportScissorFeaturesNV {
    sType := VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INHERITED_VIEWPORT_SCISSOR_FEATURES_NV;
    pNext: void*;
    inheritedViewportScissor2D: u32;
}

struct VkCommandBufferInheritanceViewportScissorInfoNV {
    sType := VkStructureType.VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_VIEWPORT_SCISSOR_INFO_NV;
    pNext: void*;
    viewportScissor2D: u32;
    viewportDepthCount: u32;
    pViewportDepths: VkViewport*;
}

struct VkPhysicalDeviceTexelBufferAlignmentFeaturesEXT {
    sType := VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXEL_BUFFER_ALIGNMENT_FEATURES_EXT;
    pNext: void*;
    texelBufferAlignment: u32;
}

struct VkPhysicalDeviceTexelBufferAlignmentPropertiesEXT {
    sType := VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXEL_BUFFER_ALIGNMENT_PROPERTIES_EXT;
    pNext: void*;
    storageTexelBufferOffsetAlignmentBytes: u64;
    storageTexelBufferOffsetSingleTexelAlignment: u32;
    uniformTexelBufferOffsetAlignmentBytes: u64;
    uniformTexelBufferOffsetSingleTexelAlignment: u32;
}

struct VkRenderPassTransformBeginInfoQCOM {
    sType := VkStructureType.VK_STRUCTURE_TYPE_RENDER_PASS_TRANSFORM_BEGIN_INFO_QCOM;
    pNext: void*;
    transform: VkSurfaceTransformFlagBitsKHR;
}

struct VkCommandBufferInheritanceRenderPassTransformInfoQCOM {
    sType := VkStructureType.VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_RENDER_PASS_TRANSFORM_INFO_QCOM;
    pNext: void*;
    transform: VkSurfaceTransformFlagBitsKHR;
    renderArea: VkRect2D;
}

enum VkDeviceMemoryReportEventTypeEXT {
    VK_DEVICE_MEMORY_REPORT_EVENT_TYPE_ALLOCATE_EXT = 0;
    VK_DEVICE_MEMORY_REPORT_EVENT_TYPE_FREE_EXT = 1;
    VK_DEVICE_MEMORY_REPORT_EVENT_TYPE_IMPORT_EXT = 2;
    VK_DEVICE_MEMORY_REPORT_EVENT_TYPE_UNIMPORT_EXT = 3;
    VK_DEVICE_MEMORY_REPORT_EVENT_TYPE_ALLOCATION_FAILED_EXT = 4;
    VK_DEVICE_MEMORY_REPORT_EVENT_TYPE_MAX_ENUM_EXT = 0x7FFFFFFF;
}

struct VkPhysicalDeviceDeviceMemoryReportFeaturesEXT {
    sType := VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEVICE_MEMORY_REPORT_FEATURES_EXT;
    pNext: void*;
    deviceMemoryReport: u32;
}

struct VkDeviceMemoryReportCallbackDataEXT {
    sType := VkStructureType.VK_STRUCTURE_TYPE_DEVICE_MEMORY_REPORT_CALLBACK_DATA_EXT;
    pNext: void*;
    flags: u32;
    type: VkDeviceMemoryReportEventTypeEXT;
    memoryObjectId: u64;
    size: u64;
    objectType: VkObjectType;
    objectHandle: u64;
    heapIndex: u32;
}

interface PFN_vkDeviceMemoryReportCallbackEXT(VkDeviceMemoryReportCallbackDataEXT* pCallbackData, void* pUserData)

struct VkDeviceDeviceMemoryReportCreateInfoEXT {
    sType := VkStructureType.VK_STRUCTURE_TYPE_DEVICE_DEVICE_MEMORY_REPORT_CREATE_INFO_EXT;
    pNext: void*;
    flags: u32;
    pfnUserCallback: PFN_vkDeviceMemoryReportCallbackEXT;
    pUserData: void*;
}

interface VkResult PFN_vkAcquireDrmDisplayEXT(VkPhysicalDevice* physicalDevice, s32 drmFd, VkDisplayKHR* display)

interface VkResult PFN_vkGetDrmDisplayEXT(VkPhysicalDevice* physicalDevice, s32 drmFd, u32 connectorId, VkDisplayKHR** display)

VkResult vkAcquireDrmDisplayEXT(VkPhysicalDevice* physicalDevice, s32 drmFd, VkDisplayKHR* display) #extern vulkan

VkResult vkGetDrmDisplayEXT(VkPhysicalDevice* physicalDevice, s32 drmFd, u32 connectorId, VkDisplayKHR** display) #extern vulkan

struct VkPhysicalDeviceRobustness2FeaturesEXT {
    sType := VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ROBUSTNESS_2_FEATURES_EXT;
    pNext: void*;
    robustBufferAccess2: u32;
    robustImageAccess2: u32;
    nullDescriptor: u32;
}

struct VkPhysicalDeviceRobustness2PropertiesEXT {
    sType := VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ROBUSTNESS_2_PROPERTIES_EXT;
    pNext: void*;
    robustStorageBufferAccessSizeAlignment: u64;
    robustUniformBufferAccessSizeAlignment: u64;
}

struct VkSamplerCustomBorderColorCreateInfoEXT {
    sType := VkStructureType.VK_STRUCTURE_TYPE_SAMPLER_CUSTOM_BORDER_COLOR_CREATE_INFO_EXT;
    pNext: void*;
    customBorderColor: VkClearColorValue;
    format: VkFormat;
}

struct VkPhysicalDeviceCustomBorderColorPropertiesEXT {
    sType := VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CUSTOM_BORDER_COLOR_PROPERTIES_EXT;
    pNext: void*;
    maxCustomBorderColorSamplers: u32;
}

struct VkPhysicalDeviceCustomBorderColorFeaturesEXT {
    sType := VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CUSTOM_BORDER_COLOR_FEATURES_EXT;
    pNext: void*;
    customBorderColors: u32;
    customBorderColorWithoutFormat: u32;
}

struct VkPrivateDataSlotEXT {}

enum VkPrivateDataSlotCreateFlagBitsEXT {
    VK_PRIVATE_DATA_SLOT_CREATE_FLAG_BITS_MAX_ENUM_EXT = 0x7FFFFFFF;
}

struct VkPhysicalDevicePrivateDataFeaturesEXT {
    sType := VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRIVATE_DATA_FEATURES_EXT;
    pNext: void*;
    privateData: u32;
}

struct VkDevicePrivateDataCreateInfoEXT {
    sType := VkStructureType.VK_STRUCTURE_TYPE_DEVICE_PRIVATE_DATA_CREATE_INFO_EXT;
    pNext: void*;
    privateDataSlotRequestCount: u32;
}

struct VkPrivateDataSlotCreateInfoEXT {
    sType := VkStructureType.VK_STRUCTURE_TYPE_PRIVATE_DATA_SLOT_CREATE_INFO_EXT;
    pNext: void*;
    flags: u32;
}

interface VkResult PFN_vkCreatePrivateDataSlotEXT(VkDevice* device, VkPrivateDataSlotCreateInfoEXT* pCreateInfo, VkAllocationCallbacks* pAllocator, VkPrivateDataSlotEXT** pPrivateDataSlot)

interface PFN_vkDestroyPrivateDataSlotEXT(VkDevice* device, VkPrivateDataSlotEXT* privateDataSlot, VkAllocationCallbacks* pAllocator)

interface VkResult PFN_vkSetPrivateDataEXT(VkDevice* device, VkObjectType objectType, u64 objectHandle, VkPrivateDataSlotEXT* privateDataSlot, u64 data)

interface PFN_vkGetPrivateDataEXT(VkDevice* device, VkObjectType objectType, u64 objectHandle, VkPrivateDataSlotEXT* privateDataSlot, u64* pData)

VkResult vkCreatePrivateDataSlotEXT(VkDevice* device, VkPrivateDataSlotCreateInfoEXT* pCreateInfo, VkAllocationCallbacks* pAllocator, VkPrivateDataSlotEXT** pPrivateDataSlot) #extern vulkan

vkDestroyPrivateDataSlotEXT(VkDevice* device, VkPrivateDataSlotEXT* privateDataSlot, VkAllocationCallbacks* pAllocator) #extern vulkan

VkResult vkSetPrivateDataEXT(VkDevice* device, VkObjectType objectType, u64 objectHandle, VkPrivateDataSlotEXT* privateDataSlot, u64 data) #extern vulkan

vkGetPrivateDataEXT(VkDevice* device, VkObjectType objectType, u64 objectHandle, VkPrivateDataSlotEXT* privateDataSlot, u64* pData) #extern vulkan

struct VkPhysicalDevicePipelineCreationCacheControlFeaturesEXT {
    sType := VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_CREATION_CACHE_CONTROL_FEATURES_EXT;
    pNext: void*;
    pipelineCreationCacheControl: u32;
}

enum VkDeviceDiagnosticsConfigFlagBitsNV {
    VK_DEVICE_DIAGNOSTICS_CONFIG_ENABLE_SHADER_DEBUG_INFO_BIT_NV = 0x00000001;
    VK_DEVICE_DIAGNOSTICS_CONFIG_ENABLE_RESOURCE_TRACKING_BIT_NV = 0x00000002;
    VK_DEVICE_DIAGNOSTICS_CONFIG_ENABLE_AUTOMATIC_CHECKPOINTS_BIT_NV = 0x00000004;
    VK_DEVICE_DIAGNOSTICS_CONFIG_FLAG_BITS_MAX_ENUM_NV = 0x7FFFFFFF;
}

struct VkPhysicalDeviceDiagnosticsConfigFeaturesNV {
    sType := VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DIAGNOSTICS_CONFIG_FEATURES_NV;
    pNext: void*;
    diagnosticsConfig: u32;
}

struct VkDeviceDiagnosticsConfigCreateInfoNV {
    sType := VkStructureType.VK_STRUCTURE_TYPE_DEVICE_DIAGNOSTICS_CONFIG_CREATE_INFO_NV;
    pNext: void*;
    flags: u32;
}

enum VkFragmentShadingRateTypeNV {
    VK_FRAGMENT_SHADING_RATE_TYPE_FRAGMENT_SIZE_NV = 0;
    VK_FRAGMENT_SHADING_RATE_TYPE_ENUMS_NV = 1;
    VK_FRAGMENT_SHADING_RATE_TYPE_MAX_ENUM_NV = 0x7FFFFFFF;
}

enum VkFragmentShadingRateNV {
    VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_PIXEL_NV = 0;
    VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_1X2_PIXELS_NV = 1;
    VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_2X1_PIXELS_NV = 4;
    VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_2X2_PIXELS_NV = 5;
    VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_2X4_PIXELS_NV = 6;
    VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_4X2_PIXELS_NV = 9;
    VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_4X4_PIXELS_NV = 10;
    VK_FRAGMENT_SHADING_RATE_2_INVOCATIONS_PER_PIXEL_NV = 11;
    VK_FRAGMENT_SHADING_RATE_4_INVOCATIONS_PER_PIXEL_NV = 12;
    VK_FRAGMENT_SHADING_RATE_8_INVOCATIONS_PER_PIXEL_NV = 13;
    VK_FRAGMENT_SHADING_RATE_16_INVOCATIONS_PER_PIXEL_NV = 14;
    VK_FRAGMENT_SHADING_RATE_NO_INVOCATIONS_NV = 15;
    VK_FRAGMENT_SHADING_RATE_MAX_ENUM_NV = 0x7FFFFFFF;
}

struct VkPhysicalDeviceFragmentShadingRateEnumsFeaturesNV {
    sType := VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_ENUMS_FEATURES_NV;
    pNext: void*;
    fragmentShadingRateEnums: u32;
    supersampleFragmentShadingRates: u32;
    noInvocationFragmentShadingRates: u32;
}

struct VkPhysicalDeviceFragmentShadingRateEnumsPropertiesNV {
    sType := VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_ENUMS_PROPERTIES_NV;
    pNext: void*;
    maxFragmentShadingRateInvocationCount: VkSampleCountFlagBits;
}

struct VkPipelineFragmentShadingRateEnumStateCreateInfoNV {
    sType := VkStructureType.VK_STRUCTURE_TYPE_PIPELINE_FRAGMENT_SHADING_RATE_ENUM_STATE_CREATE_INFO_NV;
    pNext: void*;
    shadingRateType: VkFragmentShadingRateTypeNV;
    shadingRate: VkFragmentShadingRateNV;
    combinerOps: CArray<VkFragmentShadingRateCombinerOpKHR>[2];
}

interface PFN_vkCmdSetFragmentShadingRateEnumNV(VkCommandBuffer* commandBuffer, VkFragmentShadingRateNV shadingRate, CArray<VkFragmentShadingRateCombinerOpKHR>[2] combinerOps)

vkCmdSetFragmentShadingRateEnumNV(VkCommandBuffer* commandBuffer, VkFragmentShadingRateNV shadingRate, CArray<VkFragmentShadingRateCombinerOpKHR>[2] combinerOps) #extern vulkan

enum VkAccelerationStructureMotionInstanceTypeNV {
    VK_ACCELERATION_STRUCTURE_MOTION_INSTANCE_TYPE_STATIC_NV = 0;
    VK_ACCELERATION_STRUCTURE_MOTION_INSTANCE_TYPE_MATRIX_MOTION_NV = 1;
    VK_ACCELERATION_STRUCTURE_MOTION_INSTANCE_TYPE_SRT_MOTION_NV = 2;
    VK_ACCELERATION_STRUCTURE_MOTION_INSTANCE_TYPE_MAX_ENUM_NV = 0x7FFFFFFF;
}

union VkDeviceOrHostAddressConstKHR {
    deviceAddress: u64;
    hostAddress: void*;
}

struct VkAccelerationStructureGeometryMotionTrianglesDataNV {
    sType := VkStructureType.VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_MOTION_TRIANGLES_DATA_NV;
    pNext: void*;
    vertexData: VkDeviceOrHostAddressConstKHR;
}

struct VkAccelerationStructureMotionInfoNV {
    sType := VkStructureType.VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_MOTION_INFO_NV;
    pNext: void*;
    maxInstances: u32;
    flags: u32;
}

struct VkAccelerationStructureMatrixMotionInstanceNV {
    transformT0: VkTransformMatrixKHR;
    transformT1: VkTransformMatrixKHR;
    instanceCustomIndex: u32;
    // @Future Support bitfields
    // mask:8: u32;
    instanceShaderBindingTableRecordOffset: u32;
    // flags:8: u32;
    accelerationStructureReference: u64;
}

struct VkSRTDataNV {
    sx: float;
    a: float;
    b: float;
    pvx: float;
    sy: float;
    c: float;
    pvy: float;
    sz: float;
    pvz: float;
    qx: float;
    qy: float;
    qz: float;
    qw: float;
    tx: float;
    ty: float;
    tz: float;
}

struct VkAccelerationStructureSRTMotionInstanceNV {
    transformT0: VkSRTDataNV;
    transformT1: VkSRTDataNV;
    instanceCustomIndex: u32;
    // @Future Support bitfields
    // mask:8: u32;
    instanceShaderBindingTableRecordOffset: u32;
    // flags:8: u32;
    accelerationStructureReference: u64;
}

union VkAccelerationStructureMotionInstanceDataNV {
    staticInstance: VkAccelerationStructureInstanceKHR;
    matrixMotionInstance: VkAccelerationStructureMatrixMotionInstanceNV;
    srtMotionInstance: VkAccelerationStructureSRTMotionInstanceNV;
}

struct VkAccelerationStructureMotionInstanceNV {
    type: VkAccelerationStructureMotionInstanceTypeNV;
    flags: u32;
    data: VkAccelerationStructureMotionInstanceDataNV;
}

struct VkPhysicalDeviceRayTracingMotionBlurFeaturesNV {
    sType := VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_MOTION_BLUR_FEATURES_NV;
    pNext: void*;
    rayTracingMotionBlur: u32;
    rayTracingMotionBlurPipelineTraceRaysIndirect: u32;
}

struct VkPhysicalDeviceYcbcr2Plane444FormatsFeaturesEXT {
    sType := VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_YCBCR_2_PLANE_444_FORMATS_FEATURES_EXT;
    pNext: void*;
    ycbcr2plane444Formats: u32;
}

struct VkPhysicalDeviceFragmentDensityMap2FeaturesEXT {
    sType := VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_2_FEATURES_EXT;
    pNext: void*;
    fragmentDensityMapDeferred: u32;
}

struct VkPhysicalDeviceFragmentDensityMap2PropertiesEXT {
    sType := VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_2_PROPERTIES_EXT;
    pNext: void*;
    subsampledLoads: u32;
    subsampledCoarseReconstructionEarlyAccess: u32;
    maxSubsampledArrayLayers: u32;
    maxDescriptorSetSubsampledSamplers: u32;
}

struct VkCopyCommandTransformInfoQCOM {
    sType := VkStructureType.VK_STRUCTURE_TYPE_COPY_COMMAND_TRANSFORM_INFO_QCOM;
    pNext: void*;
    transform: VkSurfaceTransformFlagBitsKHR;
}

struct VkPhysicalDeviceImageRobustnessFeaturesEXT {
    sType := VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_ROBUSTNESS_FEATURES_EXT;
    pNext: void*;
    robustImageAccess: u32;
}

struct VkPhysicalDevice4444FormatsFeaturesEXT {
    sType := VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_4444_FORMATS_FEATURES_EXT;
    pNext: void*;
    formatA4R4G4B4: u32;
    formatA4B4G4R4: u32;
}

interface VkResult PFN_vkAcquireWinrtDisplayNV(VkPhysicalDevice* physicalDevice, VkDisplayKHR* display)

interface VkResult PFN_vkGetWinrtDisplayNV(VkPhysicalDevice* physicalDevice, u32 deviceRelativeId, VkDisplayKHR** pDisplay)

VkResult vkAcquireWinrtDisplayNV(VkPhysicalDevice* physicalDevice, VkDisplayKHR* display) #extern vulkan

VkResult vkGetWinrtDisplayNV(VkPhysicalDevice* physicalDevice, u32 deviceRelativeId, VkDisplayKHR** pDisplay) #extern vulkan

struct VkPhysicalDeviceMutableDescriptorTypeFeaturesVALVE {
    sType := VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MUTABLE_DESCRIPTOR_TYPE_FEATURES_VALVE;
    pNext: void*;
    mutableDescriptorType: u32;
}

struct VkMutableDescriptorTypeListVALVE {
    descriptorTypeCount: u32;
    pDescriptorTypes: VkDescriptorType*;
}

struct VkMutableDescriptorTypeCreateInfoVALVE {
    sType := VkStructureType.VK_STRUCTURE_TYPE_MUTABLE_DESCRIPTOR_TYPE_CREATE_INFO_VALVE;
    pNext: void*;
    mutableDescriptorTypeListCount: u32;
    pMutableDescriptorTypeLists: VkMutableDescriptorTypeListVALVE*;
}

struct VkPhysicalDeviceVertexInputDynamicStateFeaturesEXT {
    sType := VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_INPUT_DYNAMIC_STATE_FEATURES_EXT;
    pNext: void*;
    vertexInputDynamicState: u32;
}

struct VkVertexInputBindingDescription2EXT {
    sType := VkStructureType.VK_STRUCTURE_TYPE_VERTEX_INPUT_BINDING_DESCRIPTION_2_EXT;
    pNext: void*;
    binding: u32;
    stride: u32;
    inputRate: VkVertexInputRate;
    divisor: u32;
}

struct VkVertexInputAttributeDescription2EXT {
    sType := VkStructureType.VK_STRUCTURE_TYPE_VERTEX_INPUT_ATTRIBUTE_DESCRIPTION_2_EXT;
    pNext: void*;
    location: u32;
    binding: u32;
    format: VkFormat;
    offset: u32;
}

interface PFN_vkCmdSetVertexInputEXT(VkCommandBuffer* commandBuffer, u32 vertexBindingDescriptionCount, VkVertexInputBindingDescription2EXT* pVertexBindingDescriptions, u32 vertexAttributeDescriptionCount, VkVertexInputAttributeDescription2EXT* pVertexAttributeDescriptions)

vkCmdSetVertexInputEXT(VkCommandBuffer* commandBuffer, u32 vertexBindingDescriptionCount, VkVertexInputBindingDescription2EXT* pVertexBindingDescriptions, u32 vertexAttributeDescriptionCount, VkVertexInputAttributeDescription2EXT* pVertexAttributeDescriptions) #extern vulkan

struct VkPhysicalDeviceDrmPropertiesEXT {
    sType := VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DRM_PROPERTIES_EXT;
    pNext: void*;
    hasPrimary: u32;
    hasRender: u32;
    primaryMajor: s64;
    primaryMinor: s64;
    renderMajor: s64;
    renderMinor: s64;
}

struct VkPhysicalDevicePrimitiveTopologyListRestartFeaturesEXT {
    sType := VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRIMITIVE_TOPOLOGY_LIST_RESTART_FEATURES_EXT;
    pNext: void*;
    primitiveTopologyListRestart: u32;
    primitiveTopologyPatchListRestart: u32;
}

struct VkSubpassShadingPipelineCreateInfoHUAWEI {
    sType := VkStructureType.VK_STRUCTURE_TYPE_SUBPASS_SHADING_PIPELINE_CREATE_INFO_HUAWEI;
    pNext: void*;
    renderPass: VkRenderPass*;
    subpass: u32;
}

struct VkPhysicalDeviceSubpassShadingFeaturesHUAWEI {
    sType := VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBPASS_SHADING_FEATURES_HUAWEI;
    pNext: void*;
    subpassShading: u32;
}

struct VkPhysicalDeviceSubpassShadingPropertiesHUAWEI {
    sType := VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBPASS_SHADING_PROPERTIES_HUAWEI;
    pNext: void*;
    maxSubpassShadingWorkgroupSizeAspectRatio: u32;
}

interface VkResult PFN_vkGetDeviceSubpassShadingMaxWorkgroupSizeHUAWEI(VkDevice* device, VkRenderPass* renderpass, VkExtent2D* pMaxWorkgroupSize)

interface PFN_vkCmdSubpassShadingHUAWEI(VkCommandBuffer* commandBuffer)

VkResult vkGetDeviceSubpassShadingMaxWorkgroupSizeHUAWEI(VkDevice* device, VkRenderPass* renderpass, VkExtent2D* pMaxWorkgroupSize) #extern vulkan

vkCmdSubpassShadingHUAWEI(VkCommandBuffer* commandBuffer) #extern vulkan

struct VkPhysicalDeviceInvocationMaskFeaturesHUAWEI {
    sType := VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INVOCATION_MASK_FEATURES_HUAWEI;
    pNext: void*;
    invocationMask: u32;
}

interface PFN_vkCmdBindInvocationMaskHUAWEI(VkCommandBuffer* commandBuffer, VkImageView* imageView, VkImageLayout imageLayout)

vkCmdBindInvocationMaskHUAWEI(VkCommandBuffer* commandBuffer, VkImageView* imageView, VkImageLayout imageLayout) #extern vulkan

struct VkMemoryGetRemoteAddressInfoNV {
    sType := VkStructureType.VK_STRUCTURE_TYPE_MEMORY_GET_REMOTE_ADDRESS_INFO_NV;
    pNext: void*;
    memory: VkDeviceMemory*;
    handleType: VkExternalMemoryHandleTypeFlagBits;
}

struct VkPhysicalDeviceExternalMemoryRDMAFeaturesNV {
    sType := VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_MEMORY_RDMA_FEATURES_NV;
    pNext: void*;
    externalMemoryRDMA: u32;
}

interface VkResult PFN_vkGetMemoryRemoteAddressNV(VkDevice* device, VkMemoryGetRemoteAddressInfoNV* pMemoryGetRemoteAddressInfo, void** pAddress)

VkResult vkGetMemoryRemoteAddressNV(VkDevice* device, VkMemoryGetRemoteAddressInfoNV* pMemoryGetRemoteAddressInfo, void** pAddress) #extern vulkan

struct VkPhysicalDeviceExtendedDynamicState2FeaturesEXT {
    sType := VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTENDED_DYNAMIC_STATE_2_FEATURES_EXT;
    pNext: void*;
    extendedDynamicState2: u32;
    extendedDynamicState2LogicOp: u32;
    extendedDynamicState2PatchControlPoints: u32;
}

interface PFN_vkCmdSetPatchControlPointsEXT(VkCommandBuffer* commandBuffer, u32 patchControlPoints)

interface PFN_vkCmdSetRasterizerDiscardEnableEXT(VkCommandBuffer* commandBuffer, u32 rasterizerDiscardEnable)

interface PFN_vkCmdSetDepthBiasEnableEXT(VkCommandBuffer* commandBuffer, u32 depthBiasEnable)

interface PFN_vkCmdSetLogicOpEXT(VkCommandBuffer* commandBuffer, VkLogicOp logicOp)

interface PFN_vkCmdSetPrimitiveRestartEnableEXT(VkCommandBuffer* commandBuffer, u32 primitiveRestartEnable)

vkCmdSetPatchControlPointsEXT(VkCommandBuffer* commandBuffer, u32 patchControlPoints) #extern vulkan

vkCmdSetRasterizerDiscardEnableEXT(VkCommandBuffer* commandBuffer, u32 rasterizerDiscardEnable) #extern vulkan

vkCmdSetDepthBiasEnableEXT(VkCommandBuffer* commandBuffer, u32 depthBiasEnable) #extern vulkan

vkCmdSetLogicOpEXT(VkCommandBuffer* commandBuffer, VkLogicOp logicOp) #extern vulkan

vkCmdSetPrimitiveRestartEnableEXT(VkCommandBuffer* commandBuffer, u32 primitiveRestartEnable) #extern vulkan

struct VkPhysicalDeviceColorWriteEnableFeaturesEXT {
    sType := VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COLOR_WRITE_ENABLE_FEATURES_EXT;
    pNext: void*;
    colorWriteEnable: u32;
}

struct VkPipelineColorWriteCreateInfoEXT {
    sType := VkStructureType.VK_STRUCTURE_TYPE_PIPELINE_COLOR_WRITE_CREATE_INFO_EXT;
    pNext: void*;
    attachmentCount: u32;
    pColorWriteEnables: u32*;
}

interface PFN_vkCmdSetColorWriteEnableEXT(VkCommandBuffer* commandBuffer, u32 attachmentCount, u32* pColorWriteEnables)

vkCmdSetColorWriteEnableEXT(VkCommandBuffer* commandBuffer, u32 attachmentCount, u32* pColorWriteEnables) #extern vulkan

struct VkPhysicalDeviceGlobalPriorityQueryFeaturesEXT {
    sType := VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GLOBAL_PRIORITY_QUERY_FEATURES_EXT;
    pNext: void*;
    globalPriorityQuery: u32;
}

struct VkQueueFamilyGlobalPriorityPropertiesEXT {
    sType := VkStructureType.VK_STRUCTURE_TYPE_QUEUE_FAMILY_GLOBAL_PRIORITY_PROPERTIES_EXT;
    pNext: void*;
    priorityCount: u32;
    priorities: CArray<VkQueueGlobalPriorityEXT>[16];
}

struct VkPhysicalDeviceMultiDrawFeaturesEXT {
    sType := VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTI_DRAW_FEATURES_EXT;
    pNext: void*;
    multiDraw: u32;
}

struct VkPhysicalDeviceMultiDrawPropertiesEXT {
    sType := VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTI_DRAW_PROPERTIES_EXT;
    pNext: void*;
    maxMultiDrawCount: u32;
}

struct VkMultiDrawInfoEXT {
    firstVertex: u32;
    vertexCount: u32;
}

struct VkMultiDrawIndexedInfoEXT {
    firstIndex: u32;
    indexCount: u32;
    vertexOffset: s32;
}

interface PFN_vkCmdDrawMultiEXT(VkCommandBuffer* commandBuffer, u32 drawCount, VkMultiDrawInfoEXT* pVertexInfo, u32 instanceCount, u32 firstInstance, u32 stride)

interface PFN_vkCmdDrawMultiIndexedEXT(VkCommandBuffer* commandBuffer, u32 drawCount, VkMultiDrawIndexedInfoEXT* pIndexInfo, u32 instanceCount, u32 firstInstance, u32 stride, s32* pVertexOffset)

vkCmdDrawMultiEXT(VkCommandBuffer* commandBuffer, u32 drawCount, VkMultiDrawInfoEXT* pVertexInfo, u32 instanceCount, u32 firstInstance, u32 stride) #extern vulkan

vkCmdDrawMultiIndexedEXT(VkCommandBuffer* commandBuffer, u32 drawCount, VkMultiDrawIndexedInfoEXT* pIndexInfo, u32 instanceCount, u32 firstInstance, u32 stride, s32* pVertexOffset) #extern vulkan

struct VkPhysicalDevicePageableDeviceLocalMemoryFeaturesEXT {
    sType := VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PAGEABLE_DEVICE_LOCAL_MEMORY_FEATURES_EXT;
    pNext: void*;
    pageableDeviceLocalMemory: u32;
}

interface PFN_vkSetDeviceMemoryPriorityEXT(VkDevice* device, VkDeviceMemory* memory, float priority)

vkSetDeviceMemoryPriorityEXT(VkDevice* device, VkDeviceMemory* memory, float priority) #extern vulkan

struct VkAccelerationStructureKHR {}

enum VkBuildAccelerationStructureModeKHR {
    VK_BUILD_ACCELERATION_STRUCTURE_MODE_BUILD_KHR = 0;
    VK_BUILD_ACCELERATION_STRUCTURE_MODE_UPDATE_KHR = 1;
    VK_BUILD_ACCELERATION_STRUCTURE_MODE_MAX_ENUM_KHR = 0x7FFFFFFF;
}

enum VkAccelerationStructureBuildTypeKHR {
    VK_ACCELERATION_STRUCTURE_BUILD_TYPE_HOST_KHR = 0;
    VK_ACCELERATION_STRUCTURE_BUILD_TYPE_DEVICE_KHR = 1;
    VK_ACCELERATION_STRUCTURE_BUILD_TYPE_HOST_OR_DEVICE_KHR = 2;
    VK_ACCELERATION_STRUCTURE_BUILD_TYPE_MAX_ENUM_KHR = 0x7FFFFFFF;
}

enum VkAccelerationStructureCompatibilityKHR {
    VK_ACCELERATION_STRUCTURE_COMPATIBILITY_COMPATIBLE_KHR = 0;
    VK_ACCELERATION_STRUCTURE_COMPATIBILITY_INCOMPATIBLE_KHR = 1;
    VK_ACCELERATION_STRUCTURE_COMPATIBILITY_MAX_ENUM_KHR = 0x7FFFFFFF;
}

enum VkAccelerationStructureCreateFlagBitsKHR {
    VK_ACCELERATION_STRUCTURE_CREATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT_KHR = 0x00000001;
    VK_ACCELERATION_STRUCTURE_CREATE_MOTION_BIT_NV = 0x00000004;
    VK_ACCELERATION_STRUCTURE_CREATE_FLAG_BITS_MAX_ENUM_KHR = 0x7FFFFFFF;
}

union VkDeviceOrHostAddressKHR {
    deviceAddress: u64;
    hostAddress: void*;
}

struct VkAccelerationStructureBuildRangeInfoKHR {
    primitiveCount: u32;
    primitiveOffset: u32;
    firstVertex: u32;
    transformOffset: u32;
}

struct VkAccelerationStructureGeometryTrianglesDataKHR {
    sType := VkStructureType.VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_TRIANGLES_DATA_KHR;
    pNext: void*;
    vertexFormat: VkFormat;
    vertexData: VkDeviceOrHostAddressConstKHR;
    vertexStride: u64;
    maxVertex: u32;
    indexType: VkIndexType;
    indexData: VkDeviceOrHostAddressConstKHR;
    transformData: VkDeviceOrHostAddressConstKHR;
}

struct VkAccelerationStructureGeometryAabbsDataKHR {
    sType := VkStructureType.VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_AABBS_DATA_KHR;
    pNext: void*;
    data: VkDeviceOrHostAddressConstKHR;
    stride: u64;
}

struct VkAccelerationStructureGeometryInstancesDataKHR {
    sType := VkStructureType.VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_INSTANCES_DATA_KHR;
    pNext: void*;
    arrayOfPointers: u32;
    data: VkDeviceOrHostAddressConstKHR;
}

union VkAccelerationStructureGeometryDataKHR {
    triangles: VkAccelerationStructureGeometryTrianglesDataKHR;
    aabbs: VkAccelerationStructureGeometryAabbsDataKHR;
    instances: VkAccelerationStructureGeometryInstancesDataKHR;
}

struct VkAccelerationStructureGeometryKHR {
    sType := VkStructureType.VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_KHR;
    pNext: void*;
    geometryType: VkGeometryTypeKHR;
    geometry: VkAccelerationStructureGeometryDataKHR;
    flags: u32;
}

struct VkAccelerationStructureBuildGeometryInfoKHR {
    sType := VkStructureType.VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_BUILD_GEOMETRY_INFO_KHR;
    pNext: void*;
    type: VkAccelerationStructureTypeKHR;
    flags: u32;
    mode: VkBuildAccelerationStructureModeKHR;
    srcAccelerationStructure: VkAccelerationStructureKHR*;
    dstAccelerationStructure: VkAccelerationStructureKHR*;
    geometryCount: u32;
    pGeometries: VkAccelerationStructureGeometryKHR*;
    ppGeometries: VkAccelerationStructureGeometryKHR*;
    scratchData: VkDeviceOrHostAddressKHR;
}

struct VkAccelerationStructureCreateInfoKHR {
    sType := VkStructureType.VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_CREATE_INFO_KHR;
    pNext: void*;
    createFlags: u32;
    buffer: VkBuffer*;
    offset: u64;
    size: u64;
    type: VkAccelerationStructureTypeKHR;
    deviceAddress: u64;
}

struct VkWriteDescriptorSetAccelerationStructureKHR {
    sType := VkStructureType.VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_ACCELERATION_STRUCTURE_KHR;
    pNext: void*;
    accelerationStructureCount: u32;
    pAccelerationStructures: VkAccelerationStructureKHR**;
}

struct VkPhysicalDeviceAccelerationStructureFeaturesKHR {
    sType := VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ACCELERATION_STRUCTURE_FEATURES_KHR;
    pNext: void*;
    accelerationStructure: u32;
    accelerationStructureCaptureReplay: u32;
    accelerationStructureIndirectBuild: u32;
    accelerationStructureHostCommands: u32;
    descriptorBindingAccelerationStructureUpdateAfterBind: u32;
}

struct VkPhysicalDeviceAccelerationStructurePropertiesKHR {
    sType := VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ACCELERATION_STRUCTURE_PROPERTIES_KHR;
    pNext: void*;
    maxGeometryCount: u64;
    maxInstanceCount: u64;
    maxPrimitiveCount: u64;
    maxPerStageDescriptorAccelerationStructures: u32;
    maxPerStageDescriptorUpdateAfterBindAccelerationStructures: u32;
    maxDescriptorSetAccelerationStructures: u32;
    maxDescriptorSetUpdateAfterBindAccelerationStructures: u32;
    minAccelerationStructureScratchOffsetAlignment: u32;
}

struct VkAccelerationStructureDeviceAddressInfoKHR {
    sType := VkStructureType.VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_DEVICE_ADDRESS_INFO_KHR;
    pNext: void*;
    accelerationStructure: VkAccelerationStructureKHR*;
}

struct VkAccelerationStructureVersionInfoKHR {
    sType := VkStructureType.VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_VERSION_INFO_KHR;
    pNext: void*;
    pVersionData: u8*;
}

struct VkCopyAccelerationStructureToMemoryInfoKHR {
    sType := VkStructureType.VK_STRUCTURE_TYPE_COPY_ACCELERATION_STRUCTURE_TO_MEMORY_INFO_KHR;
    pNext: void*;
    src: VkAccelerationStructureKHR*;
    dst: VkDeviceOrHostAddressKHR;
    mode: VkCopyAccelerationStructureModeKHR;
}

struct VkCopyMemoryToAccelerationStructureInfoKHR {
    sType := VkStructureType.VK_STRUCTURE_TYPE_COPY_MEMORY_TO_ACCELERATION_STRUCTURE_INFO_KHR;
    pNext: void*;
    src: VkDeviceOrHostAddressConstKHR;
    dst: VkAccelerationStructureKHR*;
    mode: VkCopyAccelerationStructureModeKHR;
}

struct VkCopyAccelerationStructureInfoKHR {
    sType := VkStructureType.VK_STRUCTURE_TYPE_COPY_ACCELERATION_STRUCTURE_INFO_KHR;
    pNext: void*;
    src: VkAccelerationStructureKHR*;
    dst: VkAccelerationStructureKHR*;
    mode: VkCopyAccelerationStructureModeKHR;
}

struct VkAccelerationStructureBuildSizesInfoKHR {
    sType := VkStructureType.VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_BUILD_SIZES_INFO_KHR;
    pNext: void*;
    accelerationStructureSize: u64;
    updateScratchSize: u64;
    buildScratchSize: u64;
}

interface VkResult PFN_vkCreateAccelerationStructureKHR(VkDevice* device, VkAccelerationStructureCreateInfoKHR* pCreateInfo, VkAllocationCallbacks* pAllocator, VkAccelerationStructureKHR** pAccelerationStructure)

interface PFN_vkDestroyAccelerationStructureKHR(VkDevice* device, VkAccelerationStructureKHR* accelerationStructure, VkAllocationCallbacks* pAllocator)

interface PFN_vkCmdBuildAccelerationStructuresKHR(VkCommandBuffer* commandBuffer, u32 infoCount, VkAccelerationStructureBuildGeometryInfoKHR* pInfos, VkAccelerationStructureBuildRangeInfoKHR* ppBuildRangeInfos)

interface PFN_vkCmdBuildAccelerationStructuresIndirectKHR(VkCommandBuffer* commandBuffer, u32 infoCount, VkAccelerationStructureBuildGeometryInfoKHR* pInfos, u64* pIndirectDeviceAddresses, u32* pIndirectStrides, u32* ppMaxPrimitiveCounts)

interface VkResult PFN_vkBuildAccelerationStructuresKHR(VkDevice* device, VkDeferredOperationKHR* deferredOperation, u32 infoCount, VkAccelerationStructureBuildGeometryInfoKHR* pInfos, VkAccelerationStructureBuildRangeInfoKHR* ppBuildRangeInfos)

interface VkResult PFN_vkCopyAccelerationStructureKHR(VkDevice* device, VkDeferredOperationKHR* deferredOperation, VkCopyAccelerationStructureInfoKHR* pInfo)

interface VkResult PFN_vkCopyAccelerationStructureToMemoryKHR(VkDevice* device, VkDeferredOperationKHR* deferredOperation, VkCopyAccelerationStructureToMemoryInfoKHR* pInfo)

interface VkResult PFN_vkCopyMemoryToAccelerationStructureKHR(VkDevice* device, VkDeferredOperationKHR* deferredOperation, VkCopyMemoryToAccelerationStructureInfoKHR* pInfo)

interface VkResult PFN_vkWriteAccelerationStructuresPropertiesKHR(VkDevice* device, u32 accelerationStructureCount, VkAccelerationStructureKHR** pAccelerationStructures, VkQueryType queryType, u64 dataSize, void* pData, u64 stride)

interface PFN_vkCmdCopyAccelerationStructureKHR(VkCommandBuffer* commandBuffer, VkCopyAccelerationStructureInfoKHR* pInfo)

interface PFN_vkCmdCopyAccelerationStructureToMemoryKHR(VkCommandBuffer* commandBuffer, VkCopyAccelerationStructureToMemoryInfoKHR* pInfo)

interface PFN_vkCmdCopyMemoryToAccelerationStructureKHR(VkCommandBuffer* commandBuffer, VkCopyMemoryToAccelerationStructureInfoKHR* pInfo)

interface u64 PFN_vkGetAccelerationStructureDeviceAddressKHR(VkDevice* device, VkAccelerationStructureDeviceAddressInfoKHR* pInfo)

interface PFN_vkCmdWriteAccelerationStructuresPropertiesKHR(VkCommandBuffer* commandBuffer, u32 accelerationStructureCount, VkAccelerationStructureKHR** pAccelerationStructures, VkQueryType queryType, VkQueryPool* queryPool, u32 firstQuery)

interface PFN_vkGetDeviceAccelerationStructureCompatibilityKHR(VkDevice* device, VkAccelerationStructureVersionInfoKHR* pVersionInfo, VkAccelerationStructureCompatibilityKHR* pCompatibility)

interface PFN_vkGetAccelerationStructureBuildSizesKHR(VkDevice* device, VkAccelerationStructureBuildTypeKHR buildType, VkAccelerationStructureBuildGeometryInfoKHR* pBuildInfo, u32* pMaxPrimitiveCounts, VkAccelerationStructureBuildSizesInfoKHR* pSizeInfo)

VkResult vkCreateAccelerationStructureKHR(VkDevice* device, VkAccelerationStructureCreateInfoKHR* pCreateInfo, VkAllocationCallbacks* pAllocator, VkAccelerationStructureKHR** pAccelerationStructure) #extern vulkan

vkDestroyAccelerationStructureKHR(VkDevice* device, VkAccelerationStructureKHR* accelerationStructure, VkAllocationCallbacks* pAllocator) #extern vulkan

vkCmdBuildAccelerationStructuresKHR(VkCommandBuffer* commandBuffer, u32 infoCount, VkAccelerationStructureBuildGeometryInfoKHR* pInfos, VkAccelerationStructureBuildRangeInfoKHR* ppBuildRangeInfos) #extern vulkan

vkCmdBuildAccelerationStructuresIndirectKHR(VkCommandBuffer* commandBuffer, u32 infoCount, VkAccelerationStructureBuildGeometryInfoKHR* pInfos, u64* pIndirectDeviceAddresses, u32* pIndirectStrides, u32* ppMaxPrimitiveCounts) #extern vulkan

VkResult vkBuildAccelerationStructuresKHR(VkDevice* device, VkDeferredOperationKHR* deferredOperation, u32 infoCount, VkAccelerationStructureBuildGeometryInfoKHR* pInfos, VkAccelerationStructureBuildRangeInfoKHR* ppBuildRangeInfos) #extern vulkan

VkResult vkCopyAccelerationStructureKHR(VkDevice* device, VkDeferredOperationKHR* deferredOperation, VkCopyAccelerationStructureInfoKHR* pInfo) #extern vulkan

VkResult vkCopyAccelerationStructureToMemoryKHR(VkDevice* device, VkDeferredOperationKHR* deferredOperation, VkCopyAccelerationStructureToMemoryInfoKHR* pInfo) #extern vulkan

VkResult vkCopyMemoryToAccelerationStructureKHR(VkDevice* device, VkDeferredOperationKHR* deferredOperation, VkCopyMemoryToAccelerationStructureInfoKHR* pInfo) #extern vulkan

VkResult vkWriteAccelerationStructuresPropertiesKHR(VkDevice* device, u32 accelerationStructureCount, VkAccelerationStructureKHR** pAccelerationStructures, VkQueryType queryType, u64 dataSize, void* pData, u64 stride) #extern vulkan

vkCmdCopyAccelerationStructureKHR(VkCommandBuffer* commandBuffer, VkCopyAccelerationStructureInfoKHR* pInfo) #extern vulkan

vkCmdCopyAccelerationStructureToMemoryKHR(VkCommandBuffer* commandBuffer, VkCopyAccelerationStructureToMemoryInfoKHR* pInfo) #extern vulkan

vkCmdCopyMemoryToAccelerationStructureKHR(VkCommandBuffer* commandBuffer, VkCopyMemoryToAccelerationStructureInfoKHR* pInfo) #extern vulkan

u64 vkGetAccelerationStructureDeviceAddressKHR(VkDevice* device, VkAccelerationStructureDeviceAddressInfoKHR* pInfo) #extern vulkan

vkCmdWriteAccelerationStructuresPropertiesKHR(VkCommandBuffer* commandBuffer, u32 accelerationStructureCount, VkAccelerationStructureKHR** pAccelerationStructures, VkQueryType queryType, VkQueryPool* queryPool, u32 firstQuery) #extern vulkan

vkGetDeviceAccelerationStructureCompatibilityKHR(VkDevice* device, VkAccelerationStructureVersionInfoKHR* pVersionInfo, VkAccelerationStructureCompatibilityKHR* pCompatibility) #extern vulkan

vkGetAccelerationStructureBuildSizesKHR(VkDevice* device, VkAccelerationStructureBuildTypeKHR buildType, VkAccelerationStructureBuildGeometryInfoKHR* pBuildInfo, u32* pMaxPrimitiveCounts, VkAccelerationStructureBuildSizesInfoKHR* pSizeInfo) #extern vulkan

enum VkShaderGroupShaderKHR {
    VK_SHADER_GROUP_SHADER_GENERAL_KHR = 0;
    VK_SHADER_GROUP_SHADER_CLOSEST_HIT_KHR = 1;
    VK_SHADER_GROUP_SHADER_ANY_HIT_KHR = 2;
    VK_SHADER_GROUP_SHADER_INTERSECTION_KHR = 3;
    VK_SHADER_GROUP_SHADER_MAX_ENUM_KHR = 0x7FFFFFFF;
}

struct VkRayTracingShaderGroupCreateInfoKHR {
    sType := VkStructureType.VK_STRUCTURE_TYPE_RAY_TRACING_SHADER_GROUP_CREATE_INFO_KHR;
    pNext: void*;
    type: VkRayTracingShaderGroupTypeKHR;
    generalShader: u32;
    closestHitShader: u32;
    anyHitShader: u32;
    intersectionShader: u32;
    pShaderGroupCaptureReplayHandle: void*;
}

struct VkRayTracingPipelineInterfaceCreateInfoKHR {
    sType := VkStructureType.VK_STRUCTURE_TYPE_RAY_TRACING_PIPELINE_INTERFACE_CREATE_INFO_KHR;
    pNext: void*;
    maxPipelineRayPayloadSize: u32;
    maxPipelineRayHitAttributeSize: u32;
}

struct VkRayTracingPipelineCreateInfoKHR {
    sType := VkStructureType.VK_STRUCTURE_TYPE_RAY_TRACING_PIPELINE_CREATE_INFO_KHR;
    pNext: void*;
    flags: u32;
    stageCount: u32;
    pStages: VkPipelineShaderStageCreateInfo*;
    groupCount: u32;
    pGroups: VkRayTracingShaderGroupCreateInfoKHR*;
    maxPipelineRayRecursionDepth: u32;
    pLibraryInfo: VkPipelineLibraryCreateInfoKHR*;
    pLibraryInterface: VkRayTracingPipelineInterfaceCreateInfoKHR*;
    pDynamicState: VkPipelineDynamicStateCreateInfo*;
    layout: VkPipelineLayout*;
    basePipelineHandle: VkPipeline*;
    basePipelineIndex: s32;
}

struct VkPhysicalDeviceRayTracingPipelineFeaturesKHR {
    sType := VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_PIPELINE_FEATURES_KHR;
    pNext: void*;
    rayTracingPipeline: u32;
    rayTracingPipelineShaderGroupHandleCaptureReplay: u32;
    rayTracingPipelineShaderGroupHandleCaptureReplayMixed: u32;
    rayTracingPipelineTraceRaysIndirect: u32;
    rayTraversalPrimitiveCulling: u32;
}

struct VkPhysicalDeviceRayTracingPipelinePropertiesKHR {
    sType := VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_PIPELINE_PROPERTIES_KHR;
    pNext: void*;
    shaderGroupHandleSize: u32;
    maxRayRecursionDepth: u32;
    maxShaderGroupStride: u32;
    shaderGroupBaseAlignment: u32;
    shaderGroupHandleCaptureReplaySize: u32;
    maxRayDispatchInvocationCount: u32;
    shaderGroupHandleAlignment: u32;
    maxRayHitAttributeSize: u32;
}

struct VkStridedDeviceAddressRegionKHR {
    deviceAddress: u64;
    stride: u64;
    size: u64;
}

struct VkTraceRaysIndirectCommandKHR {
    width: u32;
    height: u32;
    depth: u32;
}

interface PFN_vkCmdTraceRaysKHR(VkCommandBuffer* commandBuffer, VkStridedDeviceAddressRegionKHR* pRaygenShaderBindingTable, VkStridedDeviceAddressRegionKHR* pMissShaderBindingTable, VkStridedDeviceAddressRegionKHR* pHitShaderBindingTable, VkStridedDeviceAddressRegionKHR* pCallableShaderBindingTable, u32 width, u32 height, u32 depth)

interface VkResult PFN_vkCreateRayTracingPipelinesKHR(VkDevice* device, VkDeferredOperationKHR* deferredOperation, VkPipelineCache* pipelineCache, u32 createInfoCount, VkRayTracingPipelineCreateInfoKHR* pCreateInfos, VkAllocationCallbacks* pAllocator, VkPipeline** pPipelines)

interface VkResult PFN_vkGetRayTracingCaptureReplayShaderGroupHandlesKHR(VkDevice* device, VkPipeline* pipeline, u32 firstGroup, u32 groupCount, u64 dataSize, void* pData)

interface PFN_vkCmdTraceRaysIndirectKHR(VkCommandBuffer* commandBuffer, VkStridedDeviceAddressRegionKHR* pRaygenShaderBindingTable, VkStridedDeviceAddressRegionKHR* pMissShaderBindingTable, VkStridedDeviceAddressRegionKHR* pHitShaderBindingTable, VkStridedDeviceAddressRegionKHR* pCallableShaderBindingTable, u64 indirectDeviceAddress)

interface u64 PFN_vkGetRayTracingShaderGroupStackSizeKHR(VkDevice* device, VkPipeline* pipeline, u32 group, VkShaderGroupShaderKHR groupShader)

interface PFN_vkCmdSetRayTracingPipelineStackSizeKHR(VkCommandBuffer* commandBuffer, u32 pipelineStackSize)

vkCmdTraceRaysKHR(VkCommandBuffer* commandBuffer, VkStridedDeviceAddressRegionKHR* pRaygenShaderBindingTable, VkStridedDeviceAddressRegionKHR* pMissShaderBindingTable, VkStridedDeviceAddressRegionKHR* pHitShaderBindingTable, VkStridedDeviceAddressRegionKHR* pCallableShaderBindingTable, u32 width, u32 height, u32 depth) #extern vulkan

VkResult vkCreateRayTracingPipelinesKHR(VkDevice* device, VkDeferredOperationKHR* deferredOperation, VkPipelineCache* pipelineCache, u32 createInfoCount, VkRayTracingPipelineCreateInfoKHR* pCreateInfos, VkAllocationCallbacks* pAllocator, VkPipeline** pPipelines) #extern vulkan

VkResult vkGetRayTracingCaptureReplayShaderGroupHandlesKHR(VkDevice* device, VkPipeline* pipeline, u32 firstGroup, u32 groupCount, u64 dataSize, void* pData) #extern vulkan

vkCmdTraceRaysIndirectKHR(VkCommandBuffer* commandBuffer, VkStridedDeviceAddressRegionKHR* pRaygenShaderBindingTable, VkStridedDeviceAddressRegionKHR* pMissShaderBindingTable, VkStridedDeviceAddressRegionKHR* pHitShaderBindingTable, VkStridedDeviceAddressRegionKHR* pCallableShaderBindingTable, u64 indirectDeviceAddress) #extern vulkan

u64 vkGetRayTracingShaderGroupStackSizeKHR(VkDevice* device, VkPipeline* pipeline, u32 group, VkShaderGroupShaderKHR groupShader) #extern vulkan

vkCmdSetRayTracingPipelineStackSizeKHR(VkCommandBuffer* commandBuffer, u32 pipelineStackSize) #extern vulkan

struct VkPhysicalDeviceRayQueryFeaturesKHR {
    sType := VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_QUERY_FEATURES_KHR;
    pNext: void*;
    rayQuery: u32;
}
